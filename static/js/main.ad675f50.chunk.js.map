{"version":3,"sources":["components/error-boundary.tsx","entities/system-description/system-description-entity.ts","entities/meny/flow.ts","entities/system-description/object-types.ts","components/meny/meny.tsx","components/meny/help-text.tsx","components/meny/progress-steps.tsx","components/shared/corner-card.tsx","components/mishap-victim-identification/victim-harms.tsx","entities/graph/style.ts","entities/graph/graph-element.ts","entities/graph/collapse-api.ts","components/graph/graph.tsx","entities/graph/graph-elements-factory.ts","entities/system-description/role.ts","entities/graph/graph-elements-factory-mishap-victims.ts","components/mishap-victim-identification/graph-view.tsx","components/mishap-victim-identification/harms-table-row.tsx","components/mishap-victim-identification/select-role-table-row.tsx","components/shared/corner-button-primary.tsx","components/mishap-victim-identification/table-view.tsx","components/shared/corner-fab.tsx","components/mishap-victim-identification/mishap-victim-identification.tsx","entities/system-model.ts","components/system-description/toolbar-buttons.tsx","components/system-description/node-editor.tsx","components/graph/node-popper.tsx","components/system-description/delete-element-button.tsx","components/system-description/sdf-step-base.tsx","components/system-description/subsystem-collapse-button.tsx","components/system-description/sdf-step-1.tsx","components/system-description/sdf-step-2.tsx","components/system-description/sdf-step-3.tsx","components/system-description/sdf-step-4.tsx","entities/graph/element-utilities.ts","entities/hazard-description-categorization/hazard-category.ts","components/hazard-description-categorization/och-step-1/categorization-wizard.tsx","components/hazard-population/hazard-id.tsx","components/hazard-population/hazard-row.tsx","components/hazard-population/hazards-table.tsx","components/hazard-population/hazard-create-details.tsx","components/hazard-population/hazard-create.tsx","components/hazard-population/victim-hazards.tsx","components/hazard-population/graph-view.tsx","components/hazard-population/table-view.tsx","components/hazard-population/hazard-population.tsx","components/project-name.tsx","components/hazard-description-categorization/och-step-1/table-row.tsx","components/hazard-description-categorization/och-step-1/och-step-1.tsx","App.tsx","index.tsx"],"names":["ErrorBoundary","props","state","error","this","setState","message","children","Component","isSystemObject","entity","isConnection","isSubsystem","flowSteps","OHI","name","order","OHI_1","SDF_1","SDF_2","SDF_3","SDF_4","OHI_2","OHI_3","OCH","OCH_1","OCH_2","OCH_3","SARE","SARE_1","SARE_2","SARE_3","CM","flow","id","label","helpText","getFirstStepId","ObjectTypes","Meny","_openFileRef","readFile","bind","downloadFile","processResult","handleFileError","reportError","prepareDataToDownload","openFile","window","FileReader","FileList","Fragment","ref","style","display","type","onChange","ev","target","files","accept","htmlFor","IconButton","title","size","color","component","FolderOpen","disabled","onClick","SaveAlt","length","hasUnsavedChanges","confirm","file","reader","onload","onerror","readAsText","data","serialized","JSON","stringify","fileName","projectName","Date","toISOString","replace","element","document","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","saveFile","systemObjectConnections","patchCollapsedConnections","currentStep","serializeStepId","lastCompletedStep","deserializeStepId","connections","map","e","source","originalEnds","step","key","Error","alert","result","model","prepareReadData","parse","reset","React","useStyles","makeStyles","theme","typography","padding","spacing","maxWidth","HelpText","classes","useState","popoverAnchor","setPopoverAnchor","isOpen","setIsOpen","useEffect","open","edge","highlighted","Help","HelpOutline","Popover","anchorEl","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Typography","variant","className","dangerouslySetInnerHTML","__html","htmlContent","paddingLeft","phase","bold","fontWeight","ProgressSteps","moveTo","progress","progressUpdated","advanceFlow","setFlowBack","List","dense","stage","ListItem","ListItemIcon","Chip","ListItemText","primary","disableTypography","renderSteps","steps","paddingClass","disablePadding","isInFlow","isCurrent","isEnabled","helpOpenedOnFirstVisit","button","ListItemSecondaryAction","Divider","root","position","bottom","right","zIndex","minWidth","CornerCard","Card","CardContent","VictimHarms","emptyContent","renderHarmItem","item","index","role","harm","updatedHarms","possibleHarms","filter","possibleHarmsUpdated","deletePossibleHarm","Delete","renderAddItem","action","onSubmit","form","currentTarget","elements","namedItem","value","preventDefault","concat","createMishapVictim","TextField","required","autoFocus","margin","fullWidth","placeholder","autoComplete","Add","selectedRole","gutterBottom","sort","a","b","localeCompare","renderContent","graphStyle","selector","kind","toString","relator","isSystemObjectData","isSubsystemData","isConnectionData","options","animate","cueEnabled","getCollapseApi","cy","expandCollapse","cytoscape","use","popper","Graph","newMaxX","newMaxY","initCytoscape","addEventListeners","checkCanvasSizeToFitNode","resizeCanvas","handleNodeMoved","collapseApi","maxX","maxY","graphContainerStyle","width","height","cursor","cursorStyle","stylesheet","userZoomingEnabled","userPanningEnabled","event","node","outerWidth","outerHeight","x","y","nodeMoved","ele","isNode","on","trigger","subsystem","isCollapsed","collapse","mouseEnteredNode","mouseLeftNode","nodeClicked","zoom","graphClicked","useCollapseApi","initCollapseApi","GraphElementsFactory","system","mapSystemDescriptionEntities","getAllNodes","entities","mapSystemObject","mapConnection","mapSubsystem","kinds","relators","roles","subsystems","object","hookSystemObject","group","systemObject","parent","posX","posY","connection","hookConnection","pannable","isOriented","hookSubsystem","isRole","obj","isMishapVictim","GraphElementsFactoryMishapVictims","grabbable","push","GraphView","getRoleFromEvent","mouseEntered","mouseLeft","selectRole","clearRoleSelection","selectedRoleId","isMouseOverRole","mapSystemDescription","systemDescription","find","isDefaultPrevented","chip","marginRight","HarmsTableRow","TableRow","TableCell","scope","align","onDelete","harmsUpdated","deleteHarm","formControl","SelectRoleTableRow","FormControl","InputLabel","Select","labelId","roleId","roleSelected","MenuItem","colSpan","marginLeft","marginTop","marginBottom","CornerButtonPrimary","Button","TableView","newlyAdded","setNewlyAdded","isSelectingRole","setIsSelectingRole","existingMishapVictims","some","n","newlyAddedMishapVictims","mishapVictims","rolesToSelect","r","TableContainer","Table","TableHead","TableBody","undefined","fab","CornerFab","Fab","MishapVictimIdentification","isGraphView","setIsGraphView","updateHarms","updatedRoles","TableChart","BubbleChart","createObjectId","prefix","getTime","ToolbarButtons","buttons","icon","text","selectEmpty","NodeEditor","parentEditor","setEntity","subsystemsAvailable","entityParent","shrink","displayEmpty","Backdrop","Dialog","entityUpdated","onReset","editCancelled","DialogContent","defaultValue","DialogActions","useStyle","NodePopper","createRef","setPopper","current","popperObj","content","placement","scheduleUpdate","off","destroy","DeleteElementButton","removeConnection","updatedConnections","updatedHazards","hazards","mishapVictim","exposure","hazardElement","hazardElementEnvObj","mishapVictimEnvObj","removeObjectWithEdges","updatedSystem","removeObject","connectedEdges","reduce","carry","removeSubsystemWithChildren","removeSubsystem","isChildless","systemUpdated","DEFAULT_POSITION","SdfStepBase","showNodeActions","hideNodeActions","tryCreateConnection","updateEntity","completeEditEntity","modifySystemDescription","updateNodePosition","validateConnection","preventOverlap","cancelEditEntity","renderConnectionActions","updateHazards","isConnectionValid","actionButtonsPlacement","elementDisplayPopper","nodeConnecting","elementActions","actionElement","isEdge","renderSystemObjectActions","renderSubsystemActions","nodeConnectingDone","toolbarButtons","objectEditing","elementDisplayPopperChanged","list","edgesWith","parentPosition","i","childNode","childData","childObject","transformHazard","hazard","objectEditingDone","allNodes","existingEntity","positionOverride","parentId","adjustedPosition","nodePosition","otherNodes","every","SubsystemCollapseButton","newStateCollapsed","expand","json","pan","updatedSubsystems","ExpandMore","ExpandLess","SdfStep1","startCreatingKind","startCreatingRole","startCreatingSubsystem","top","left","Link","Edit","sourceData","targetData","SdfStep2","SdfStep3","startCreatingRelator","SdfStep4","roleData","kindData","getSystemObject","getRole","HazardCategory","IntermediateCategory","HazardId","StyledTableCell","withStyles","createStyles","sizeSmall","HazardsRow","isEditable","setIsEditable","harmTruthmaker","setHarmTruthmaker","description","setDescription","hazardEdited","editHazard","Save","hazardDeleted","actions","HazardsTable","divide","paddingRight","select","HazardCreateDetails","template","hazardElementEnvObjs","envObj","setEnvObj","selectOptions","nextHazardId","hazardCreated","multiline","rowsMax","StyledTableRow","backgroundColor","palette","grey","header","HazardCreate","setTemplate","possibleHazards","setPossibleHazards","getEntityPair","takeSource","getConnection","victimKinds","incomers","outgoers","hazardRoles","hazardElementsEnvObjs","hazardKinds","j","k","findPossibleHazards","Grid","container","xs","tableGutter","fabSpace","VictimHazards","join","close","isVictimPointed","setIsVictimPointed","getMishapVictimFromEvent","checkVictimPointed","victimSelected","cyInitialized","mishapVictimId","setMishapVictimId","mishapVictimNode","setMishapVictimNode","getNode","HazardPopulation","isSummarySelected","setIsSummarySelected","selectedVictim","setSelectedVictim","cyRef","useRef","addHazard","h","removeHazard","$","input","common","white","buttonGutter","ProjectName","isEditing","setIsEditing","setName","inputRef","initInput","nameUpdated","Done","Clear","CategorizationWizard","question","notSet","category","setCategory","instructions","situation","complete","initiatingCondition","mishap","initiatingEvent","CardHeader","cancel","Close","CardActions","OchStep1TableRow","isCategorizing","setIsCategorizing","hazardUpdated","OchStep1","updateHazard","appBar","drawer","drawerOpen","toolbar","alignItems","justifyContent","mixins","flexGrow","appTitle","textAlign","defaultModel","App","systemModel","setSystemModel","setHasUnsaveChanges","useBeforeunload","updateSystemModel","needsSaving","CssBaseline","AppBar","Toolbar","justify","Drawer","paper","getMainContent","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ad675f50.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\ninterface State {\r\n    error?: Error\r\n}\r\n\r\ninterface Props {}\r\n\r\nclass ErrorBoundary extends Component<Props, State> {\r\n    constructor(props: Props) {\r\n      super(props);\r\n      this.state = {};\r\n    }\r\n\r\n    static getDerivedStateFromError(error: Error) {\r\n      // Update state so the next render will show the fallback UI.\r\n      return { error: error };\r\n    }\r\n  \r\n    componentDidCatch(error: Error) {\r\n      this.setState({ error });\r\n    }\r\n  \r\n    render() {\r\n      if (this.state.error) {\r\n        return <h1>{'ERROR: ' + this.state.error.message}</h1>;\r\n      }\r\n      return this.props.children;\r\n    }\r\n  }\r\n\r\n  export default ErrorBoundary;\r\n","import SystemObject from \"./system-object\";\r\nimport Connection from \"./connection\";\r\nimport Subsystem from \"./subsystem\";\r\nimport ConnectionToCollapsed from \"./connection-to-collapsed\";\r\n\r\nexport type SystemDescriptionEntity = Connection | SystemObject | Subsystem;\r\n\r\nexport function isSystemObject(entity: SystemDescriptionEntity): entity is SystemObject {\r\n    return 'type' in entity;\r\n}\r\n\r\nexport function isConnection(entity: SystemDescriptionEntity): entity is Connection {\r\n    return 'source' in entity;\r\n}\r\n\r\nexport function isSubsystem(entity: SystemDescriptionEntity): entity is Subsystem {\r\n    return !('source' in entity) && !('type' in entity);\r\n}\r\n\r\nexport function isConnectionToCollapsed(entity: SystemDescriptionEntity): entity is ConnectionToCollapsed {\r\n    return isConnection(entity) && 'originalEnds' in entity;\r\n}\r\n","import { FlowStepId } from \"./flow-step\";\r\n\r\nexport const OUT_OF_FLOW = -1;\r\n\r\nexport const flowSteps: {[key: string]: FlowStepId} = {\r\n    OHI: { name: 'OHI', order: OUT_OF_FLOW },\r\n    OHI_1: { name: 'OHI-1', order: OUT_OF_FLOW },\r\n    SDF_1: { name: 'SDF-1', order: 1 },\r\n    SDF_2: { name: 'SDF-2', order: 2 },\r\n    SDF_3: { name: 'SDF-3', order: 3 },\r\n    SDF_4: { name: 'SDF-4', order: 4 },\r\n    OHI_2: { name: 'OHI-2', order: 5 },\r\n    OHI_3: { name: 'OHI-3', order: 6 },\r\n    OCH: { name: 'OCH', order: OUT_OF_FLOW },\r\n    OCH_1: { name: 'OCH-1', order: 7 },\r\n    OCH_2: { name: 'OCH-2', order: OUT_OF_FLOW },\r\n    OCH_3: { name: 'OCH-3', order: OUT_OF_FLOW },\r\n    SARE: { name: 'SARE', order: OUT_OF_FLOW },\r\n    SARE_1: { name: 'SARE-1', order: OUT_OF_FLOW },\r\n    SARE_2: { name: 'SARE-2', order: OUT_OF_FLOW },\r\n    SARE_3: { name: 'SARE-3', order: OUT_OF_FLOW },\r\n    CM: { name: 'CM', order: OUT_OF_FLOW },\r\n};\r\n\r\nexport const flow = [\r\n    {\r\n        id: flowSteps.OHI, label: 'Identify Hazards', children: [\r\n            {\r\n                id: flowSteps.OHI_1, label: 'Modelling', children: [\r\n                    { id: flowSteps.SDF_1, label: 'Step 1', helpText: 'Identify the <i>kind</i> and <i>role</i> objects explicitly presented in the system description.' },\r\n                    { id: flowSteps.SDF_2, label: 'Step 2', helpText: 'For each <i>kind</i> object obtained in SDF-Step&nbsp;1, identify all the roles it can play, considering the system description.' },\r\n                    { id: flowSteps.SDF_3, label: 'Step 3', helpText: 'For each <i>role</i> object obtained in SDF-Step&nbsp;1 and SDF-Step&nbsp;2, identify the relator that connects this role, and specify all the other roles connected by the identified relator, considering the system description and the analysts&apos; expertise.' },\r\n                    { id: flowSteps.SDF_4, label: 'Step 4', helpText: 'For each <i>role</i> object obtained in SDF-Step&nbsp;1, SDF-Step&nbsp;2 and SDF-Step&nbsp;3, identify all the <i>kind</i> objects that can play the role, considering the system description.' },\r\n                ]\r\n            },\r\n            {\r\n                id: flowSteps.OHI_2, label: 'Identify Victims', helpText: 'Go through all the <i>roles</i> presented in the HO-style model and analyze if the roles are not supposed to but have the potential to encounter harms. Furthermore, the analysts continue with identifying possible harms that can affect the victims, including but not limited to, physical damages, chemical injuries, fatal illness, explosion, etc.'\r\n            },\r\n            {\r\n                id: flowSteps.OHI_3, label: 'Identify Hazards', helpText: 'Identify the hazardous situations that are likely to harm the identified mishap victims. Occurrence of a mishap is the manifestation of the <i>harm truthmaker</i> dispositions that characterize the <i>hazard element</i> roles in a hazardous situation. '\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        id: flowSteps.OCH, label: 'Identify Causes', children: [\r\n            {\r\n                id: flowSteps.OCH_1, label: 'Categorize', helpText: 'Categorize all the hazard descriptions into four categories, in terms of <b>Hazard</b>, <b>Initiating Condition</b>, <b>Initiating Event</b>, and/or <b>Mishap</b> based on the set of heuristic questions.'\r\n            },\r\n            {\r\n                id: flowSteps.OCH_2, label: 'Expand', children: []\r\n            },\r\n            {\r\n                id: flowSteps.OCH_3, label: 'Identify Causes', children: []\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        id: flowSteps.SARE, label: 'Safety Requirements', children: [\r\n            {\r\n                id: flowSteps.SARE_1, label: 'Evaluate Severity', children: []\r\n            },\r\n            {\r\n                id: flowSteps.SARE_2, label: 'Evaluate Probability', children: []\r\n            },\r\n            {\r\n                id: flowSteps.SARE_3, label: 'Safety Requirements', children: []\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        id: flowSteps.CM, label: 'Control Mitigation', children: []\r\n    }\r\n];\r\n\r\nexport function getFirstStepId() {\r\n    return flowSteps.SDF_1;\r\n};\r\n","export enum ObjectTypes {\r\n    kind = 'kind',\r\n    role = 'role',\r\n    relator = 'relator'\r\n}\r\n","import React from \"react\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport { FolderOpen, SaveAlt } from \"@material-ui/icons\";\r\n\r\nimport { SystemModel } from \"../../entities/system-model\";\r\nimport { isConnectionToCollapsed } from \"../../entities/system-description/system-description-entity\";\r\nimport Connection from \"../../entities/system-description/connection\";\r\nimport { FlowStepId } from \"../../entities/meny/flow-step\";\r\nimport { flowSteps } from \"../../entities/meny/flow\";\r\n\r\ninterface Props {\r\n    hasUnsavedChanges: boolean;\r\n    openFile: (model: SystemModel) => void;\r\n    saveFile: () => SystemModel;\r\n}\r\n\r\nexport default class Meny extends React.Component<Props> {\r\n\r\n    private _openFileRef: HTMLFormElement | null;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.readFile = this.readFile.bind(this);\r\n        this.downloadFile = this.downloadFile.bind(this);\r\n        this.processResult = this.processResult.bind(this);\r\n        this.handleFileError = this.handleFileError.bind(this);\r\n        this.reportError = this.reportError.bind(this);\r\n        this.prepareDataToDownload = this.prepareDataToDownload.bind(this);\r\n\r\n        this._openFileRef = null;\r\n    }\r\n\r\n    render() {\r\n        let openFile;\r\n        if (window.FileReader && window.FileList) {\r\n            openFile = (\r\n                <React.Fragment>\r\n                    <form\r\n                        ref={(ref) => this._openFileRef = ref}\r\n                        style={{ display: 'inline-block' }}\r\n                    >\r\n                        <input\r\n                            style={{ display: 'none' }}\r\n                            type='file'\r\n                            onChange={(ev) => this.readFile(ev.target.files)}\r\n                            accept='.json'\r\n                            id='input-open-file'\r\n                        />\r\n                        <label htmlFor='input-open-file'>\r\n                            <IconButton title='Open File' size='small' color='inherit' component='span'>\r\n                                <FolderOpen />\r\n                            </IconButton>\r\n                        </label>\r\n                    </form>\r\n                </React.Fragment>\r\n            );\r\n        } else {\r\n            openFile = (\r\n                <div title='File API not supported' style={{ display: 'inline-block' }}>\r\n                    <IconButton size='small' color='inherit' disabled={true}>\r\n                        <FolderOpen />\r\n                    </IconButton>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {openFile}\r\n                <IconButton\r\n                    size='small'\r\n                    title='Download'\r\n                    color='inherit'\r\n                    onClick={this.downloadFile}\r\n                >\r\n                    <SaveAlt />\r\n                </IconButton>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private readFile(files: FileList | null) {\r\n        if (files === null || files.length !== 1 ||\r\n            (this.props.hasUnsavedChanges && !window.confirm('You have usaved changes that will be lost. Continue?'))\r\n        ) {\r\n            return;\r\n        }\r\n        const file = files[0];\r\n        if (file.type !== 'application/json') {\r\n            return this.reportError('File type not supported');\r\n        }\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = this.processResult;\r\n        reader.onerror = this.handleFileError;\r\n        reader.readAsText(file, 'utf-8');\r\n    }\r\n\r\n    private downloadFile() {\r\n        const data = this.prepareDataToDownload();\r\n        const serialized = JSON.stringify(this.prepareDataToDownload(), null, '\\t');\r\n        const fileName = `${data.projectName} ${new Date().toISOString().replace(/:/g, '_')}.json`;\r\n\r\n        var element = document.createElement('a');\r\n        element.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(serialized));\r\n        element.setAttribute('download', fileName);\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n\r\n        element.click();\r\n        document.body.removeChild(element);\r\n    }\r\n\r\n    private prepareDataToDownload() {\r\n        const data = this.props.saveFile();\r\n        return {\r\n            ...data,\r\n            ...{\r\n                systemObjectConnections: this.patchCollapsedConnections(data.systemObjectConnections),\r\n                currentStep: this.serializeStepId(data.currentStep),\r\n                lastCompletedStep: this.serializeStepId(data.lastCompletedStep)\r\n            }\r\n        };\r\n    }\r\n\r\n    private prepareReadData(data: any) {\r\n        return {\r\n            ...data,\r\n            ...{\r\n                currentStep: this.deserializeStepId(data.currentStep),\r\n                lastCompletedStep: this.deserializeStepId(data.lastCompletedStep)\r\n            }\r\n        };\r\n    }\r\n\r\n    private patchCollapsedConnections(connections: Connection[]) {\r\n        // needed as cytoscape.js-expand-collapse modifies the model so that it brings circular references\r\n        return connections.map(e => {\r\n            if (isConnectionToCollapsed(e)) {\r\n                return {\r\n                    id: e.id,\r\n                    source: e.originalEnds.source.data().id,\r\n                    target: e.originalEnds.target.data().id\r\n                };\r\n            }\r\n            return e;\r\n        });\r\n    }\r\n\r\n    private serializeStepId(step: FlowStepId) {\r\n        return step.name;\r\n    }\r\n\r\n    private deserializeStepId(name: string) {\r\n        for (var key in flowSteps) {\r\n            if (flowSteps[key].name === name) {\r\n                return flowSteps[key];\r\n            }\r\n        }\r\n        throw new Error(`Unknown flow step id - ${name}`);\r\n    }\r\n\r\n    private reportError(message: string) {\r\n        return alert(message);\r\n    }\r\n\r\n    private handleFileError(ev: ProgressEvent<FileReader>) {\r\n        let message = 'Error reading a file';\r\n        if (ev.target && ev.target.error) {\r\n            message = ev.target.error.message;\r\n        }\r\n        this.reportError(message);\r\n    }\r\n\r\n    private processResult(ev: ProgressEvent<FileReader>) {\r\n        if (!ev.target) {\r\n            return this.reportError('Error reading a file');\r\n        }\r\n\r\n        const data = ev.target.result as string;\r\n        const model = this.prepareReadData(JSON.parse(data));\r\n        this._openFileRef && this._openFileRef.reset();\r\n        this.props.openFile(model);\r\n    }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { IconButton, Popover, Typography, makeStyles } from '@material-ui/core';\r\nimport { Help, HelpOutline } from '@material-ui/icons';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    highlighted?: boolean;\r\n    htmlContent: string;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    typography: {\r\n        padding: theme.spacing(2),\r\n        maxWidth: '320px'\r\n    }\r\n}));\r\n\r\nconst HelpText: React.FC<Props> = (props: Props) => {\r\n    const classes = useStyles();\r\n\r\n    const [popoverAnchor, setPopoverAnchor] = useState<Element | null>(null);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    // can be opened both from parent component and from itself\r\n    useEffect(() => {\r\n        setIsOpen(props.open);\r\n    }, [props.open]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <IconButton ref={(ref) => setPopoverAnchor(ref)} edge=\"end\" onClick={() => setIsOpen(true)}>\r\n                {props.highlighted ? <Help /> : <HelpOutline />}\r\n            </IconButton>\r\n            <Popover\r\n                open={isOpen}\r\n                anchorEl={popoverAnchor}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'center',\r\n                    horizontal: 'right',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'center',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <Typography variant='body2' className={classes.typography} dangerouslySetInnerHTML={{ __html: props.htmlContent }}></Typography>\r\n            </Popover>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default HelpText;\r\n","import React from 'react';\r\nimport { List, ListItem, ListItemText, Chip, makeStyles, ListItemIcon, Divider, ListItemSecondaryAction } from '@material-ui/core';\r\nimport { FlowStep, FlowStepId } from '../../entities/meny/flow-step';\r\nimport { flow, OUT_OF_FLOW } from '../../entities/meny/flow';\r\nimport HelpText from './help-text';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    label: {\r\n        paddingLeft: theme.spacing(1)\r\n    },\r\n    phase: {\r\n        paddingLeft: theme.spacing(4)\r\n    },\r\n    step: {\r\n        paddingLeft: theme.spacing(8)\r\n    },\r\n    bold: {\r\n        fontWeight: 'bold'\r\n    }\r\n}));\r\n\r\ninterface StepModel {\r\n    currentStep: FlowStepId;\r\n    lastCompletedStep: FlowStepId;\r\n}\r\n\r\ninterface Props {\r\n    progress: StepModel;\r\n    progressUpdated: (model: StepModel, needsSaving: boolean) => void;\r\n}\r\n\r\nconst ProgressSteps: React.FC<Props> = (props: Props) => {\r\n    const classes = useStyles();\r\n\r\n    const advanceFlow = (step: FlowStepId) => {\r\n        let lastCompletedStep = step;\r\n        if (props.progress.lastCompletedStep.order > step.order) {\r\n            lastCompletedStep = props.progress.lastCompletedStep;\r\n        }\r\n        props.progressUpdated({ currentStep: step, lastCompletedStep }, false);\r\n    }\r\n\r\n    const setFlowBack = (step: FlowStepId) => {\r\n        props.progressUpdated({\r\n            currentStep: step, lastCompletedStep: props.progress.lastCompletedStep\r\n        }, false);\r\n    }\r\n\r\n    const moveTo = (step: FlowStepId) => {\r\n        if (step.order > props.progress.currentStep.order) {\r\n            advanceFlow(step);\r\n        } else if (step.order < props.progress.currentStep.order) {\r\n            setFlowBack(step);\r\n        }\r\n    };\r\n\r\n    const renderSteps = (steps: FlowStep[], paddingClass: string) => (\r\n        <List disablePadding dense>\r\n            {steps.map((step: FlowStep) => {\r\n                const isInFlow = step.id.order !== OUT_OF_FLOW;\r\n                const isCurrent = isInFlow &&\r\n                    step.id.order === props.progress.currentStep.order;\r\n                const isEnabled = !isInFlow ||\r\n                    step.id.order <= props.progress.lastCompletedStep.order + 1;\r\n                const helpOpenedOnFirstVisit = step.id === props.progress.currentStep &&\r\n                    step.id === props.progress.lastCompletedStep;\r\n\r\n                return (\r\n                    <React.Fragment key={step.id.name}>\r\n                        <ListItem\r\n                            className={paddingClass}\r\n                            button\r\n                            disabled={!isEnabled}\r\n                            onClick={() => isInFlow && moveTo(step.id)}\r\n                        >\r\n                            <ListItemIcon>\r\n                                <Chip\r\n                                    size=\"small\"\r\n                                    disabled={!isEnabled}\r\n                                    label={step.id.name}\r\n                                    color={isCurrent ? 'secondary' : 'primary'}\r\n                                    variant={isInFlow ? 'default' : 'outlined'}\r\n                                />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={step.label} className={classes.label} />\r\n                            {step.helpText ? (\r\n                                <ListItemSecondaryAction>\r\n                                    <HelpText\r\n                                        open={helpOpenedOnFirstVisit}\r\n                                        highlighted={isCurrent}\r\n                                        htmlContent={step.helpText}\r\n                                    />\r\n                                </ListItemSecondaryAction>)\r\n                                : ''\r\n                            }\r\n                        </ListItem>\r\n                        {step.children ? renderSteps(step.children, classes.step) : ''}\r\n                    </React.Fragment>\r\n                );\r\n            })}\r\n        </List>\r\n    );\r\n\r\n    return (\r\n        <List dense>\r\n            {flow.map(stage => (\r\n                <React.Fragment key={stage.id.name}>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <Chip label={stage.id.name} variant='outlined' color='primary' />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={stage.label}\r\n                            disableTypography\r\n                            className={`${classes.label} ${classes.bold}`}\r\n                        />\r\n                    </ListItem>\r\n                    {renderSteps(stage.children, classes.phase)}\r\n                    <Divider />\r\n                </React.Fragment>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default ProgressSteps;\r\n","import React from 'react';\r\nimport { Card, makeStyles, CardContent } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        position: 'fixed',\r\n        bottom: theme.spacing(2),\r\n        right: theme.spacing(1),\r\n        zIndex: 110,\r\n        minWidth: 200,\r\n    }\r\n}));\r\n\r\nconst CornerCard: React.FC = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                {props.children}\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default CornerCard;\r\n","import React from 'react';\r\nimport { Typography, ListItem, ListItemText, ListItemSecondaryAction, IconButton, TextField, List } from '@material-ui/core';\r\n\r\nimport { Delete, Add } from '@material-ui/icons';\r\nimport Role from '../../entities/system-description/role';\r\nimport CornerCard from '../shared/corner-card';\r\n\r\ninterface Props {\r\n    selectedRole: Role | undefined;\r\n    possibleHarmsUpdated: (role: Role) => void;\r\n};\r\n\r\nconst VictimHarms: React.FC<Props> = (props: Props) => {\r\n\r\n    const createMishapVictim = (ev: React.FormEvent<HTMLFormElement>, role: Role) => {\r\n        const form = ev.currentTarget;\r\n        const harm = (form.elements.namedItem(\"harm\") as HTMLInputElement).value;\r\n        form.reset();\r\n        ev.preventDefault();\r\n\r\n        const updatedHarms = role.possibleHarms.concat(harm);\r\n        props.possibleHarmsUpdated({ ...role, ...{ possibleHarms: updatedHarms } });\r\n    };\r\n\r\n    const deletePossibleHarm = (role: Role, harm: string) => {\r\n        const updatedHarms = role.possibleHarms.filter(e => e !== harm);\r\n        props.possibleHarmsUpdated({ ...role, ...{ possibleHarms: updatedHarms } });\r\n    };\r\n\r\n    const emptyContent = (\r\n            <Typography>\r\n                Click on a role to see or add possible harms\r\n            </Typography>\r\n        );\r\n\r\n    const renderHarms = (role: Role) => {\r\n        return role.possibleHarms\r\n            .sort((a, b) => a.localeCompare(b))\r\n            .map((harm, index) => renderHarmItem(harm, index, role))\r\n            .concat(renderAddItem(role));\r\n    };\r\n\r\n    const renderHarmItem = (item: string, index: number, role: Role) => (\r\n        <ListItem key={index}>\r\n            <ListItemText primary={item} />\r\n            <ListItemSecondaryAction>\r\n                <IconButton edge=\"end\" title=\"Delete\" onClick={() => deletePossibleHarm(role, item)}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </ListItem>\r\n    );\r\n\r\n    const renderAddItem = (role: Role) => (\r\n        <ListItem key=\"-1\">\r\n            <form action='#' onSubmit={(ev) => createMishapVictim(ev, role)}>\r\n                <TextField\r\n                    required\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    type=\"text\"\r\n                    name=\"harm\"\r\n                    fullWidth\r\n                    placeholder=\"Add New\"\r\n                    autoComplete=\"off\"\r\n                />\r\n                <ListItemSecondaryAction>\r\n                    <IconButton type=\"submit\" edge=\"end\" title=\"Add\">\r\n                        <Add />\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            </form>\r\n        </ListItem>\r\n    );\r\n\r\n    const renderContent = () => {\r\n        if (!props.selectedRole) {\r\n            return emptyContent;\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    Mishap Victim\r\n                </Typography>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    {props.selectedRole.name}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    Possible Harms\r\n                </Typography>\r\n                <List dense>\r\n                    {renderHarms(props.selectedRole)}\r\n                </List>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <CornerCard>\r\n            {renderContent()}\r\n        </CornerCard>\r\n    );\r\n};\r\n\r\nexport default VictimHarms;\r\n","import { ObjectTypes } from \"../system-description/object-types\";\r\n\r\nconst graphStyle = [\r\n    {\r\n        selector: 'node',\r\n        style: {\r\n            'background-color': '#fff',\r\n            'border-width': 1,\r\n            'border-style': 'solid',\r\n            'border-color': '#000',\r\n            'shape': 'round-rectangle',\r\n            'label': 'data(label)',\r\n            'height': 'label',\r\n            'width': 'label',\r\n            'text-valign': 'center',\r\n            'text-halign': 'center',\r\n            'text-wrap': 'wrap',\r\n            'text-max-width': '130px',\r\n            'font-size': 11,\r\n            'padding': '5px'\r\n        }\r\n    },\r\n    {\r\n        selector: 'edge',\r\n        style: {\r\n            'width': 2,\r\n            'curve-style': 'taxi',\r\n            'label': 'data(label)',\r\n            'font-size': 11\r\n        }\r\n    },\r\n    {\r\n        selector: '.subsystem',\r\n        style: {\r\n            'shape': 'rectangle',\r\n            'text-valign': 'top',\r\n            'text-max-width': '300px'\r\n        }\r\n    },\r\n    {\r\n        selector: `.${ObjectTypes.kind.toString()}`,\r\n        style: {\r\n            'background-color': '#8282ff',\r\n            'color': '#fff'\r\n        }\r\n    },\r\n    {\r\n        selector: `.${ObjectTypes.role.toString()}`,\r\n        style: {\r\n            'background-color': '#818181',\r\n            'color': '#fff'\r\n        }\r\n    },\r\n    {\r\n        selector: `.${ObjectTypes.relator.toString()}`,\r\n        style: {\r\n            'background-color': '#fff',\r\n            'color': '#000'\r\n        }\r\n    },\r\n    {\r\n        selector: '.arrow-edge',\r\n        style: {\r\n            'target-arrow-shape': 'chevron'\r\n        }\r\n    },\r\n    {\r\n        selector: '.faded',\r\n        style: {\r\n            'opacity': 0.6\r\n        }\r\n    },\r\n    {\r\n        selector: '.mishap-victim',\r\n        style: {\r\n            'background-color': '#ff0',\r\n            'color': '#000'\r\n        }\r\n    }\r\n];\r\n\r\nexport default graphStyle;\r\n","import SystemObject from \"../system-description/system-object\";\r\nimport Subsystem from \"../system-description/subsystem\";\r\nimport Connection from \"../system-description/connection\";\r\n\r\nexport interface Data {\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface SystemObjectData extends Data {\r\n    systemObject: SystemObject;\r\n    parent?: string;\r\n}\r\n\r\nexport interface SubsystemData extends Data {\r\n    subsystem: Subsystem;\r\n}\r\n\r\nexport interface ConnectionData extends Data {\r\n    source: string;\r\n    target: string;\r\n    connection: Connection;\r\n}\r\n\r\nexport interface GraphElement<TData extends Data> {\r\n    group: 'nodes' | 'edges';\r\n    data: TData;\r\n    position?: GraphElementPosition;\r\n    classes?: string[];\r\n    grabbable?: boolean,\r\n    pannable?: boolean;\r\n}\r\n\r\nexport interface GraphElementPosition {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport function isSystemObjectData(data: Data): data is SystemObjectData {\r\n    return 'systemObject' in data;\r\n}\r\n\r\nexport function isSubsystemData(data: Data): data is SubsystemData {\r\n    return 'subsystem' in data;\r\n}\r\n\r\nexport function isConnectionData(data: Data): data is ConnectionData {\r\n    return 'connection' in data;\r\n}\r\n","import { NodeSingular } from \"cytoscape\";\r\n\r\nconst options = {\r\n    animate: false,\r\n    cueEnabled: false\r\n};\r\n\r\nexport interface CollapseApi {\r\n    collapse: (node: NodeSingular) => void;\r\n    expand: (node: NodeSingular) => void;\r\n}\r\n\r\nexport function initCollapseApi(cy: any) {\r\n    cy.expandCollapse(options);\r\n}\r\n\r\nexport function getCollapseApi(cy: any): CollapseApi {\r\n    return cy.expandCollapse('get');\r\n}\r\n","import React from 'react';\r\nimport cytoscape, { Core, EventObject, Singular, NodeSingular } from 'cytoscape';\r\nimport CytoscapeComponent from 'react-cytoscapejs';\r\nimport expandCollapse from 'cytoscape-expand-collapse';\r\nimport popper from 'cytoscape-popper';\r\n\r\nimport style from '../../entities/graph/style';\r\nimport { GraphElement, isSubsystemData } from '../../entities/graph/graph-element';\r\nimport { initCollapseApi, CollapseApi, getCollapseApi } from '../../entities/graph/collapse-api';\r\n\r\ncytoscape.use(popper);\r\nexpandCollapse(cytoscape);\r\n\r\ninterface Props {\r\n    elements: GraphElement<any>[];\r\n    cursorStyle: string;\r\n    useCollapseApi?: boolean;\r\n    mouseEnteredNode: (ev: EventObject) => void;\r\n    mouseLeftNode: (ev: EventObject) => void;\r\n    nodeClicked: (ev: EventObject) => void;\r\n    graphClicked?: (ev: EventObject) => void;\r\n    nodeMoved?: (ev: EventObject) => void;\r\n    cy?: (cy: Core) => void;\r\n}\r\n\r\ninterface State {\r\n    cy: Core | null;\r\n    collapseApi: CollapseApi | null;\r\n    maxX: number;\r\n    maxY: number;\r\n}\r\n\r\nexport default class Graph extends React.Component<Props, State> {\r\n\r\n    // storing max canvas dimentions to use while loading a graph from a file\r\n    // state will non work here as nodes load one by one without state being updated\r\n    private newMaxX: number;\r\n    private newMaxY: number;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.initCytoscape = this.initCytoscape.bind(this);\r\n        this.addEventListeners = this.addEventListeners.bind(this);\r\n        this.checkCanvasSizeToFitNode = this.checkCanvasSizeToFitNode.bind(this);\r\n        this.resizeCanvas = this.resizeCanvas.bind(this);\r\n        this.handleNodeMoved = this.handleNodeMoved.bind(this);\r\n\r\n        this.newMaxX = 1500;\r\n        this.newMaxY = 900;\r\n        this.state = {\r\n            cy: null,\r\n            collapseApi: null,\r\n            maxX: this.newMaxX,\r\n            maxY: this.newMaxY\r\n        };\r\n    }\r\n\r\n    render() {\r\n        // if cytoscape is not initialized yet it is impossible to render elements, so first init empty cytoscape \r\n        const elements = this.state.cy ? this.props.elements : [];\r\n        const graphContainerStyle = {\r\n            width: this.state.maxX,\r\n            height: this.state.maxY,\r\n            zIndex: 10,\r\n            cursor: this.props.cursorStyle\r\n        };\r\n\r\n        return (\r\n            <CytoscapeComponent\r\n                elements={elements}\r\n                style={graphContainerStyle}\r\n                stylesheet={style}\r\n                userZoomingEnabled={false}\r\n                userPanningEnabled={false}\r\n                cy={this.initCytoscape} />\r\n        );\r\n    }\r\n\r\n    private resizeCanvas() {\r\n        if (this.newMaxX > this.state.maxX || this.newMaxY > this.state.maxY) {\r\n            this.setState({ ...this.state, ...{ maxX: this.newMaxX, maxY: this.newMaxY } });\r\n        }\r\n    }\r\n\r\n    private checkCanvasSizeToFitNode(event: EventObject) {\r\n        const node = event.target as NodeSingular;\r\n        const position = node.position();\r\n        const width = node.outerWidth();\r\n        const height = node.outerHeight();\r\n\r\n        const margin = 120; // we'll add more space than needed as node dimensions are not correct when loading from file\r\n        if (position.x + width + margin > this.newMaxX) {\r\n            this.newMaxX = position.x + width + margin;\r\n        }\r\n        if (position.y + height + margin > this.newMaxY) {\r\n            this.newMaxY = position.y + height + margin;\r\n        }\r\n    }\r\n\r\n    private handleNodeMoved(event: EventObject) {\r\n        if (this.props.nodeMoved) {\r\n            this.props.nodeMoved(event);\r\n        }\r\n    }\r\n\r\n    private addEventListeners(event: EventObject) {\r\n        const ele: Singular = event.target.element();\r\n        if (ele.isNode()) {\r\n            ele.on('position', this.checkCanvasSizeToFitNode);\r\n            ele.trigger('position');\r\n            ele.on('dragfree', this.handleNodeMoved);\r\n\r\n            const data = ele.data();\r\n            if (this.state.collapseApi && isSubsystemData(data) && data.subsystem.isCollapsed) {\r\n                this.state.collapseApi.collapse(ele);\r\n            }\r\n        }\r\n        ele.on('mouseover', this.props.mouseEnteredNode);\r\n        ele.on('mouseout', this.props.mouseLeftNode);\r\n        ele.on('click', this.props.nodeClicked);\r\n    }\r\n\r\n    private initCytoscape(cy: Core) {\r\n        if (this.props.cy) {\r\n            this.props.cy(cy);\r\n        }\r\n\r\n        // this method must run only once\r\n        if (this.state.cy) {\r\n            return;\r\n        }\r\n        cy.zoom(1.1); // hack to fix blurring\r\n        cy.on('add', this.addEventListeners);\r\n        cy.on('click', (ev) => this.props.graphClicked && this.props.graphClicked(ev));\r\n        cy.on('render', this.resizeCanvas);\r\n\r\n        let collapseApi = null;\r\n        if (this.props.useCollapseApi) {\r\n            initCollapseApi(cy);\r\n            collapseApi = getCollapseApi(cy);\r\n        }\r\n\r\n        this.setState({ ...this.state, ...{ cy, collapseApi } });\r\n    }\r\n}\r\n","import { SystemDescriptionEntity, isSystemObject, isConnection, isSubsystem } from \"../system-description/system-description-entity\";\r\nimport SystemObject from \"../system-description/system-object\";\r\nimport { GraphElement, SystemObjectData, ConnectionData, SubsystemData, Data } from \"./graph-element\";\r\nimport Connection from \"../system-description/connection\";\r\nimport Subsystem from \"../system-description/subsystem\";\r\nimport { SystemDescription } from \"../system-model\";\r\n\r\nexport default class GraphElementsFactory {\r\n\r\n    mapSystemDescription(system: SystemDescription) {\r\n        return this.mapSystemDescriptionEntities(\r\n            (this.getAllNodes(system) as SystemDescriptionEntity[])\r\n                .concat(system.systemObjectConnections)\r\n        );\r\n    }\r\n\r\n    mapSystemDescriptionEntities(entities: SystemDescriptionEntity[]): GraphElement<Data>[] {\r\n        return entities.map((e) => {\r\n            if (isSystemObject(e)) return this.mapSystemObject(e);\r\n            if (isConnection(e)) return this.mapConnection(e);\r\n            if (isSubsystem(e)) return this.mapSubsystem(e);\r\n            throw new Error('Unknown entity type');\r\n        });\r\n    }\r\n\r\n    getAllNodes(system: SystemDescription): (SystemObject | Subsystem)[] {\r\n        return (system.kinds as (SystemObject | Subsystem)[])\r\n            .concat(system.relators)\r\n            .concat(system.roles)\r\n            .concat(system.subsystems);\r\n    }\r\n\r\n    protected hookSystemObject(element: GraphElement<SystemObjectData>) {\r\n        return element;\r\n    }\r\n\r\n    protected hookConnection(element: GraphElement<ConnectionData>) {\r\n        return element;\r\n    }\r\n\r\n    protected hookSubsystem(element: GraphElement<SubsystemData>) {\r\n        return element;\r\n    }\r\n\r\n    private mapSystemObject(object: SystemObject): GraphElement<SystemObjectData> {\r\n        return this.hookSystemObject({\r\n            group: 'nodes',\r\n            data: {\r\n                id: object.id,\r\n                label: `<<${object.type.toString()}>>\\n${object.name}`,\r\n                systemObject: object,\r\n                parent: object.parent\r\n            },\r\n            position: {\r\n                x: object.posX, y: object.posY\r\n            },\r\n            classes: [object.type.toString()]\r\n        });\r\n    }\r\n\r\n    private mapConnection(connection: Connection): GraphElement<ConnectionData> {\r\n        return this.hookConnection({\r\n            group: 'edges',\r\n            data: {\r\n                id: connection.id,\r\n                label: connection.label ? connection.label : '',\r\n                source: connection.source,\r\n                target: connection.target,\r\n                connection: connection\r\n            },\r\n            pannable: true,\r\n            classes: connection.isOriented ? ['arrow-edge'] : []\r\n        });\r\n    }\r\n\r\n    private mapSubsystem(subsystem: Subsystem): GraphElement<SubsystemData> {\r\n        return this.hookSubsystem({\r\n            group: 'nodes',\r\n            data: {\r\n                id: subsystem.id,\r\n                label: subsystem.name,\r\n                subsystem: subsystem\r\n            },\r\n            position: {\r\n                x: subsystem.posX, y: subsystem.posY\r\n            },\r\n            classes: ['subsystem']\r\n        });\r\n    }\r\n}\r\n","import SystemObject from \"./system-object\";\r\nimport { ObjectTypes } from \"./object-types\";\r\n\r\ninterface Role extends SystemObject {\r\n    possibleHarms: string[];\r\n}\r\n\r\nexport interface MishapVictim extends Role {\r\n}\r\n\r\nexport function isRole(obj: SystemObject): obj is Role {\r\n    return obj.type === ObjectTypes.role;\r\n}\r\n\r\nexport function isMishapVictim(obj: SystemObject): obj is MishapVictim {\r\n    return isRole(obj) && obj.possibleHarms.length > 0;\r\n}\r\n\r\nexport default Role;\r\n","import GraphElementsFactory from \"./graph-elements-factory\";\r\nimport { GraphElement, SystemObjectData, ConnectionData, SubsystemData } from \"./graph-element\";\r\nimport { isRole, isMishapVictim } from \"../system-description/role\";\r\n\r\nexport default class GraphElementsFactoryMishapVictims extends GraphElementsFactory {\r\n\r\n    hookSystemObject(element: GraphElement<SystemObjectData>) {\r\n        if (!isRole(element.data.systemObject)) {\r\n            element.classes = [element.data.systemObject.type.toString(), 'faded'];\r\n        } else if (isMishapVictim(element.data.systemObject)) {\r\n            element.classes = ['mishap-victim'];\r\n        }\r\n        element.grabbable = false;\r\n        return element;\r\n    }\r\n\r\n    hookConnection(element: GraphElement<ConnectionData>) {\r\n        const classes = ['faded'];\r\n        if (element.data.connection.isOriented) {\r\n            classes.push('arrow-edge');\r\n        }\r\n        element.classes = classes;\r\n        return element;\r\n    }\r\n\r\n    hookSubsystem(element: GraphElement<SubsystemData>) {\r\n        element.grabbable = false;\r\n        return element;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { EventObject, Singular } from 'cytoscape';\r\n\r\nimport VictimHarms from './victim-harms';\r\nimport Graph from '../graph/graph';\r\nimport GraphElementsFactoryMishapVictims from '../../entities/graph/graph-elements-factory-mishap-victims';\r\nimport { isSystemObjectData } from '../../entities/graph/graph-element';\r\nimport { SystemDescription } from '../../entities/system-model';\r\nimport Role, { isRole } from '../../entities/system-description/role';\r\n\r\ninterface Props {\r\n    systemDescription: SystemDescription;\r\n    possibleHarmsUpdated: (role: Role) => void;\r\n}\r\n\r\ninterface State {\r\n    selectedRoleId: string;\r\n    isMouseOverRole: boolean;\r\n}\r\n\r\nexport default class GraphView extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.getRoleFromEvent = this.getRoleFromEvent.bind(this);\r\n        this.mouseEntered = this.mouseEntered.bind(this);\r\n        this.mouseLeft = this.mouseLeft.bind(this);\r\n        this.selectRole = this.selectRole.bind(this);\r\n        this.clearRoleSelection = this.clearRoleSelection.bind(this);\r\n\r\n        this.state = {\r\n            selectedRoleId: '',\r\n            isMouseOverRole: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const elementsFactory = new GraphElementsFactoryMishapVictims();\r\n        const elements = elementsFactory.mapSystemDescription(this.props.systemDescription);\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Graph\r\n                    elements={elements}\r\n                    cursorStyle={this.state.isMouseOverRole ? 'pointer' : 'default'}\r\n                    graphClicked={this.clearRoleSelection}\r\n                    mouseEnteredNode={this.mouseEntered}\r\n                    mouseLeftNode={this.mouseLeft}\r\n                    nodeClicked={this.selectRole}\r\n                />\r\n                <VictimHarms\r\n                    selectedRole={this.props.systemDescription.roles\r\n                        .find(e => e.id === this.state.selectedRoleId)}\r\n                    possibleHarmsUpdated={this.props.possibleHarmsUpdated}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private getRoleFromEvent(event: EventObject): Role | undefined {\r\n        const ele: Singular = event.target.element();\r\n        const data = ele.data();\r\n        if (isSystemObjectData(data) && isRole(data.systemObject)) {\r\n            return data.systemObject;\r\n        }\r\n    }\r\n\r\n    private mouseEntered(event: EventObject) {\r\n        if (this.getRoleFromEvent(event)) {\r\n            this.setState({ ...this.state, ...{ isMouseOverRole: true } });\r\n        }\r\n    }\r\n\r\n    private mouseLeft(event: EventObject) {\r\n        if (this.getRoleFromEvent(event)) {\r\n            this.setState({ ...this.state, ...{ isMouseOverRole: false } });\r\n        }\r\n    }\r\n\r\n    private selectRole(event: EventObject) {\r\n        const role = this.getRoleFromEvent(event);\r\n        if (role) {\r\n            event.preventDefault();\r\n            this.setState({ ...this.state, ...{ selectedRoleId: role.id } });\r\n        }\r\n    }\r\n\r\n    private clearRoleSelection(event: EventObject) {\r\n        if (!event.isDefaultPrevented()) {\r\n            this.setState({ ...this.state, ...{ selectedRoleId: '' } });\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { TableRow, TableCell, Chip, TextField, IconButton, makeStyles } from '@material-ui/core';\r\n\r\nimport { Add } from '@material-ui/icons';\r\nimport Role from '../../entities/system-description/role';\r\n\r\ninterface Props {\r\n    role: Role;\r\n    harmsUpdated: (role: Role) => void;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    chip: {\r\n        marginRight: theme.spacing(1),\r\n    }\r\n}));\r\n\r\nconst HarmsTableRow: React.FC<Props> = (props: Props) => {\r\n    const classes = useStyles();\r\n\r\n    const addHarm = (ev: React.FormEvent<HTMLFormElement>) => {\r\n        const form = ev.currentTarget;\r\n        const harm = (form.elements.namedItem(\"harm\") as HTMLInputElement).value;\r\n        form.reset();\r\n        ev.preventDefault();\r\n\r\n        const updatedHarms = props.role.possibleHarms.concat(harm);\r\n        props.harmsUpdated({ ...props.role, ...{ possibleHarms: updatedHarms } });\r\n    };\r\n\r\n    const deleteHarm = (harm: string) => {\r\n        const updatedHarms = props.role.possibleHarms.filter(e => e !== harm);\r\n        props.harmsUpdated({ ...props.role, ...{ possibleHarms: updatedHarms } });\r\n    };\r\n\r\n    return (\r\n        <TableRow>\r\n            <TableCell component='th' scope='row'>\r\n                {props.role.name}\r\n            </TableCell>\r\n            <TableCell align='left'>\r\n                {props.role.possibleHarms\r\n                    .sort((a, b) => a.localeCompare(b))\r\n                    .map((harm, index) =>\r\n                        <Chip\r\n                            className={classes.chip}\r\n                            key={index}\r\n                            label={harm}\r\n                            variant='outlined'\r\n                            onDelete={() => deleteHarm(harm)}\r\n                        />)}\r\n            </TableCell>\r\n            <TableCell align='right'>\r\n                <form action='#' onSubmit={addHarm}>\r\n                    <TextField\r\n                        required\r\n                        autoFocus\r\n                        margin='dense'\r\n                        type='text'\r\n                        name='harm'\r\n                        placeholder='Add Harm'\r\n                        autoComplete='off'\r\n                    />\r\n                    <IconButton size='small' type='submit' edge='end' title='Add'>\r\n                        <Add />\r\n                    </IconButton>\r\n                </form>\r\n            </TableCell>\r\n        </TableRow>\r\n    );\r\n};\r\n\r\nexport default HarmsTableRow;\r\n","import React from 'react';\r\nimport { TableRow, TableCell, FormControl, InputLabel, Select, MenuItem, makeStyles } from '@material-ui/core';\r\nimport Role from '../../entities/system-description/role';\r\n\r\ninterface Props {\r\n    roles: Role[];\r\n    roleSelected: (role: Role) => void;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    }\r\n}));\r\n\r\nconst SelectRoleTableRow: React.FC<Props> = (props: Props) => {\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        const roleId = event.target.value as string;\r\n        props.roleSelected(props.roles.find(e => e.id === roleId) as Role);\r\n    };\r\n\r\n    return (\r\n        <TableRow>\r\n            <TableCell>\r\n                <FormControl className={classes.formControl}>\r\n                    <InputLabel id='label-select-role'>Select role</InputLabel>\r\n                    <Select\r\n                        labelId='label-select-role'\r\n                        onChange={handleChange}\r\n                        value=''\r\n                    >\r\n                        {\r\n                            props.roles\r\n                                .sort((a, b) => a.name.localeCompare(b.name))\r\n                                .map(e => <MenuItem key={e.id} value={e.id}>{e.name}</MenuItem>)\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </TableCell>\r\n            <TableCell colSpan={2}>\r\n            </TableCell>\r\n        </TableRow>\r\n    );\r\n};\r\n\r\nexport default SelectRoleTableRow;\r\n","import React from 'react';\r\nimport { makeStyles, Button } from '@material-ui/core';\r\n\r\ninterface Props {\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    button: {\r\n        marginLeft: theme.spacing(2),\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2) + 40\r\n    },\r\n}));\r\n\r\nconst CornerButtonPrimary: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Button\r\n            className={classes.button}\r\n            variant='contained'\r\n            color='primary'\r\n            onClick={props.onClick}\r\n            disabled={props.disabled}\r\n        >\r\n            {props.children}\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default CornerButtonPrimary;\r\n","import React, { useState } from 'react';\r\nimport { TableContainer, Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core';\r\n\r\nimport HarmsTableRow from './harms-table-row';\r\nimport SelectRoleTableRow from './select-role-table-row';\r\nimport Role, { isMishapVictim } from '../../entities/system-description/role';\r\nimport CornerButtonPrimary from '../shared/corner-button-primary';\r\n\r\ninterface Props {\r\n    roles: Role[];\r\n    possibleHarmsUpdated: (role: Role) => void;\r\n}\r\n\r\nconst TableView: React.FC<Props> = (props: Props) => {\r\n\r\n    const [newlyAdded, setNewlyAdded] = useState<string[]>([]);\r\n    const [isSelectingRole, setIsSelectingRole] = useState(false);\r\n\r\n    const addNewRole = (role: Role) => {\r\n        setNewlyAdded(newlyAdded.concat(role.id));\r\n        setIsSelectingRole(false);\r\n    };\r\n\r\n    const existingMishapVictims = props.roles\r\n        .filter(e => isMishapVictim(e) && !newlyAdded.some(n => n === e.id))\r\n        .sort((a, b) => a.name.localeCompare(b.name));\r\n    // sorting - existing alphabeticaly, newly added in order of adding\r\n    const newlyAddedMishapVictims = props.roles.filter(e => newlyAdded.some(n => n === e.id));\r\n    const mishapVictims = existingMishapVictims.concat(newlyAddedMishapVictims);\r\n\r\n    const rolesToSelect = props.roles.filter(r => !mishapVictims.some(e => e.id === r.id));\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableContainer>\r\n                <Table size='small'>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Mishap Victims</TableCell>\r\n                            <TableCell align='left'>Possible Harms</TableCell>\r\n                            <TableCell align='right'>&nbsp;</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {!isSelectingRole && mishapVictims.length === 0 ?\r\n                            <TableRow>\r\n                                <TableCell align='center' colSpan={3}>\r\n                                    No mishap victims identified\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            :\r\n                            mishapVictims.map(e => (\r\n                                <HarmsTableRow\r\n                                    key={e.id}\r\n                                    role={e}\r\n                                    harmsUpdated={props.possibleHarmsUpdated}\r\n                                />\r\n                            ))}\r\n                        {isSelectingRole ?\r\n                            <SelectRoleTableRow roles={rolesToSelect} roleSelected={addNewRole} />\r\n                            :\r\n                            undefined}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <CornerButtonPrimary\r\n                onClick={() => { !isSelectingRole && setIsSelectingRole(true) }}\r\n                disabled={rolesToSelect.length === 0}\r\n            >\r\n                {rolesToSelect.length === 0 ?\r\n                    'All mishap victims have been identified' :\r\n                    'Add new mishap victim'}\r\n            </CornerButtonPrimary>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default TableView;\r\n","import React from 'react';\r\nimport { makeStyles, Fab } from '@material-ui/core';\r\n\r\ninterface Props {\r\n    onClick: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    fab: {\r\n        position: 'fixed',\r\n        marginBottom: theme.spacing(2),\r\n        marginLeft: theme.spacing(2),\r\n        bottom: 0,\r\n        zIndex: 110,\r\n    }\r\n}));\r\n\r\nconst CornerFab: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Fab variant='extended'\r\n            className={classes.fab}\r\n            size='medium'\r\n            onClick={props.onClick}\r\n        >\r\n            {props.children}\r\n        </Fab>\r\n    );\r\n};\r\n\r\nexport default CornerFab;\r\n","import React, { useState } from 'react';\r\nimport GraphView from './graph-view';\r\nimport { TableChart, BubbleChart } from '@material-ui/icons';\r\nimport TableView from './table-view';\r\nimport { SystemDescription } from '../../entities/system-model';\r\nimport Role from '../../entities/system-description/role';\r\nimport CornerFab from '../shared/corner-fab';\r\n\r\ninterface Props {\r\n    system: SystemDescription;\r\n    possibleHarmsUpdated: (roles: { roles: Role[] }) => void;\r\n}\r\n\r\nconst MishapVictimIdentification: React.FC<Props> = (props: Props) => {\r\n    const [isGraphView, setIsGraphView] = useState(true);\r\n\r\n    const updateHarms = (role: Role) => {\r\n        const updatedRoles = props.system.roles.map(e => e.id === role.id ? role : e);\r\n        props.possibleHarmsUpdated({ roles: updatedRoles });\r\n    };\r\n\r\n    if (isGraphView) {\r\n        return (\r\n            <React.Fragment>\r\n                <CornerFab onClick={() => setIsGraphView(false)} >\r\n                    <TableChart />\r\n                    Table View\r\n                </CornerFab>\r\n                <GraphView\r\n                    systemDescription={props.system}\r\n                    possibleHarmsUpdated={updateHarms}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CornerFab onClick={() => setIsGraphView(true)} >\r\n                <BubbleChart />\r\n                Graph View\r\n            </CornerFab>\r\n            <TableView\r\n                roles={props.system.roles}\r\n                possibleHarmsUpdated={updateHarms}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default MishapVictimIdentification;\r\n","import { FlowStepId } from \"./meny/flow-step\";\r\nimport SystemObject from \"./system-description/system-object\";\r\nimport Connection from \"./system-description/connection\";\r\nimport Subsystem from \"./system-description/subsystem\";\r\nimport Role from \"./system-description/role\";\r\nimport Hazard from \"./hazard-population/hazard\";\r\n\r\nexport interface SystemDescription {\r\n    kinds: SystemObject[];\r\n    roles: Role[];\r\n    relators: SystemObject[];\r\n    systemObjectConnections: Connection[];\r\n    subsystems: Subsystem[];\r\n    hazards: Hazard[];\r\n}\r\n\r\nexport interface SystemModel extends SystemDescription {\r\n    projectName: string;\r\n    currentStep: FlowStepId;\r\n    lastCompletedStep: FlowStepId;\r\n    nextHazardId: number;\r\n};\r\n\r\nexport function createObjectId(prefix: string) {\r\n    return `${prefix}-${new Date().getTime()}`;\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, Fab } from '@material-ui/core';\r\n\r\ninterface ButtonDescription {\r\n    icon: JSX.Element;\r\n    text: string;\r\n    action: () => void;\r\n}\r\n\r\ninterface Props {\r\n    buttons: ButtonDescription[];\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        position: 'fixed',\r\n        bottom: 0,\r\n        zIndex: 110\r\n    },\r\n    fab: {\r\n        marginBottom: theme.spacing(1),\r\n        marginLeft: theme.spacing(2),\r\n        display: 'flex'\r\n    }\r\n}));\r\n\r\nconst ToolbarButtons: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {props.buttons.map((e, index) => (\r\n                <Fab\r\n                    key={index}\r\n                    className={classes.fab}\r\n                    size='small'\r\n                    color='primary'\r\n                    variant='extended'\r\n                    onClick={e.action}\r\n                >\r\n                    {e.icon}\r\n                    {e.text}\r\n                </Fab>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToolbarButtons;\r\n","import React, { useState } from 'react';\r\nimport { Dialog, Backdrop, DialogActions, Button, TextField, DialogContent, FormControl, InputLabel, Select, MenuItem, makeStyles } from '@material-ui/core';\r\n\r\nimport { isSystemObject } from '../../entities/system-description/system-description-entity';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport SystemObject from '../../entities/system-description/system-object';\r\n\r\ninterface Props {\r\n    entity: SystemObject | Subsystem;\r\n    subsystemsAvailable: Subsystem[];\r\n    entityUpdated: (entity: SystemObject | Subsystem) => void;\r\n    editCancelled: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst NodeEditor: React.FC<Props> = (props: Props) => {\r\n\r\n    const [entity, setEntity] = useState(props.entity);\r\n\r\n    const classes = useStyles();\r\n\r\n    const defaultParent = \"\";\r\n\r\n    let parentEditor;\r\n    if (isSystemObject(entity)) {\r\n        const subsystems = props.subsystemsAvailable\r\n            .sort((a, b) => a.name.localeCompare(b.name))\r\n            .map(e => <MenuItem key={e.id} value={e.id}>{e.name}</MenuItem>);\r\n\r\n        let entityParent = defaultParent;\r\n        if (entity.parent) {\r\n            entityParent = entity.parent;\r\n        }\r\n\r\n        const updateParent = (ev: React.ChangeEvent<{ value: unknown }>) => {\r\n            let parent: string | undefined;\r\n            if (ev.target.value !== defaultParent) {\r\n                parent = ev.target.value as string;\r\n            }\r\n            setEntity({ ...entity, ...{ parent: parent } });\r\n        };\r\n\r\n        parentEditor = (\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel shrink id=\"label-subsystem\">\r\n                    Subsystem\r\n                </InputLabel>\r\n                <Select\r\n                    labelId=\"label-subsystem\"\r\n                    value={entityParent}\r\n                    onChange={updateParent}\r\n                    displayEmpty\r\n                    disabled={subsystems.length === 0}\r\n                    className={classes.selectEmpty}\r\n                >\r\n                    <MenuItem key=\"-1\" value={defaultParent}>\r\n                        <em>None</em>\r\n                    </MenuItem>\r\n                    {subsystems}\r\n                </Select>\r\n            </FormControl>\r\n        );\r\n    }\r\n\r\n    const updateName = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n        setEntity({ ...entity, ...{ name: ev.target.value } });\r\n    };\r\n\r\n    const submitEntity = (ev: React.FormEvent) => {\r\n        props.entityUpdated(entity);\r\n        ev.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Backdrop open={!!props.entity} />\r\n            <Dialog open={!!props.entity}>\r\n                <form autoComplete=\"off\" onSubmit={submitEntity} onReset={() => props.editCancelled()}>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            required\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"Name\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            defaultValue={entity.name}\r\n                            onChange={updateName}\r\n                        />\r\n                        {parentEditor}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">OK</Button>\r\n                        <Button type=\"reset\" color=\"primary\">Cancel</Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default NodeEditor;\r\n","import React, { createRef, useState, useEffect } from 'react';\r\nimport { Singular } from 'cytoscape';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Popper from 'popper.js';\r\n\r\ninterface Props {\r\n    element: Singular;\r\n    placement?: Popper.Placement\r\n}\r\n\r\nconst useStyle = makeStyles(() => ({\r\n    popper: {\r\n        zIndex: 100\r\n    }\r\n}));\r\n\r\nconst nodeEvent = 'position';\r\n\r\nconst NodePopper: React.FC<Props> = (props) => {\r\n    const root = createRef<HTMLDivElement>();\r\n    const [popper, setPopper] = useState<Popper | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (root.current && !popper) {\r\n            const popperObj = (props.element as any).popper({\r\n                content: () => root.current,\r\n                popper: {\r\n                    placement: props.placement ? props.placement : 'top'\r\n                }\r\n            });\r\n            props.element.on(nodeEvent, popperObj.scheduleUpdate);\r\n            setPopper(popperObj);\r\n        }\r\n\r\n        return () => {\r\n            if (popper) {\r\n                props.element.off(nodeEvent, undefined, popper.scheduleUpdate);\r\n                popper.destroy();\r\n            }\r\n        };\r\n    }, [root, popper, props.element, props.placement]);\r\n\r\n    const classes = useStyle();\r\n\r\n    return <div ref={root} className={classes.popper}>{props.children}</div>;\r\n};\r\n\r\nexport default NodePopper;\r\n","import React from 'react';\r\nimport { NodeSingular, EdgeSingular } from 'cytoscape';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\n\r\nimport { SystemDescription } from '../../entities/system-model';\r\nimport Connection from '../../entities/system-description/connection';\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport { ObjectTypes } from '../../entities/system-description/object-types';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport { isSystemObjectData, isSubsystemData, isConnectionData } from '../../entities/graph/graph-element';\r\n\r\ninterface Props {\r\n    element: NodeSingular | EdgeSingular;\r\n    system: SystemDescription;\r\n    systemUpdated: (system: SystemDescription) => void;\r\n}\r\n\r\nconst DeleteElementButton: React.FC<Props> = (props) => {\r\n\r\n    const removeConnection = (connection: Connection, system: SystemDescription) => {\r\n        const updatedConnections = system.systemObjectConnections\r\n            .filter(e => e.id !== connection.id);\r\n        const updatedHazards = system.hazards.filter(e =>\r\n                e.mishapVictim.id !== connection.target &&\r\n                e.exposure.id !== connection.target &&\r\n                e.hazardElement.id !== connection.target &&\r\n                e.hazardElementEnvObj.id !== connection.target &&\r\n                e.mishapVictimEnvObj.id !== connection.target);\r\n        return { ...system, ...{ systemObjectConnections: updatedConnections, hazards: updatedHazards } };\r\n    };\r\n\r\n    const removeSubsystem = (subsystem: Subsystem, system: SystemDescription) => {\r\n        return {\r\n            ...system, ...{ subsystems: system.subsystems.filter(e => e.id !== subsystem.id) }\r\n        };\r\n    };\r\n\r\n    const removeObject = (object: SystemObject, system: SystemDescription) => {\r\n        switch (object.type) {\r\n            case ObjectTypes.kind:\r\n                return {\r\n                    ...system, ...{ kinds: system.kinds.filter(e => e.id !== object.id) }\r\n                };\r\n            case ObjectTypes.relator:\r\n                return {\r\n                    ...system, ...{ relators: system.relators.filter(e => e.id !== object.id) }\r\n                };\r\n            case ObjectTypes.role:\r\n                return {\r\n                    ...system, ...{ roles: system.roles.filter(e => e.id !== object.id) }\r\n                };\r\n            default:\r\n                throw new Error('Unknown entity type');\r\n        }\r\n    };\r\n\r\n    const removeObjectWithEdges = (object: SystemObject, ele: NodeSingular, system: SystemDescription) => {\r\n        let updatedSystem = removeObject(object, system);\r\n        updatedSystem = ele.connectedEdges()\r\n            .reduce((carry, edge) => {\r\n                const data = edge.data();\r\n                if (isConnectionData(data)) {\r\n                    return removeConnection(data.connection, carry);\r\n                }\r\n                return carry;\r\n            } , updatedSystem);\r\n        return updatedSystem;\r\n    }\r\n\r\n    const removeSubsystemWithChildren = (subsystem: Subsystem, ele: NodeSingular, system: SystemDescription) => {\r\n        let updatedSystem = removeSubsystem(subsystem, system);\r\n        updatedSystem = ele.children()\r\n            .reduce((carry, node) => {\r\n                const data = node.data();\r\n                if (isSystemObjectData(data)) {\r\n                    return removeObjectWithEdges(data.systemObject, node, carry);\r\n                }\r\n                return carry;\r\n            }, updatedSystem);\r\n        return updatedSystem;\r\n    }\r\n\r\n    const deleteElement = () => {\r\n        let updatedSystem = props.system;\r\n        const data = props.element.data();\r\n        if (isConnectionData(data)) {\r\n            updatedSystem = removeConnection(data.connection, updatedSystem);\r\n        } else if (isSystemObjectData(data) && props.element.isNode()) {\r\n            updatedSystem = removeObjectWithEdges(data.systemObject, props.element, updatedSystem);\r\n        } else if (isSubsystemData(data) && props.element.isNode()) {\r\n            if (!props.element.isChildless() &&\r\n                !window.confirm('All the objects in the subsystem will be removed as well. Continue?')\r\n            ) {\r\n                return;\r\n            }\r\n            updatedSystem = removeSubsystemWithChildren(data.subsystem, props.element, updatedSystem);\r\n        }\r\n        props.systemUpdated(updatedSystem);\r\n    }\r\n\r\n    return (\r\n        <IconButton\r\n            size='small'\r\n            title=\"Delete\"\r\n            onClick={deleteElement}\r\n        >\r\n            <Delete />\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default DeleteElementButton;\r\n","import React from 'react';\r\nimport Popper from 'popper.js';\r\nimport { NodeSingular, EventObject, Singular, EdgeSingular } from 'cytoscape';\r\n\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport { SystemDescription } from '../../entities/system-model';\r\nimport GraphElementsFactory from '../../entities/graph/graph-elements-factory';\r\nimport Graph from '../graph/graph';\r\nimport NodeEditor from './node-editor';\r\nimport { ObjectTypes } from '../../entities/system-description/object-types';\r\nimport { isSystemObject, isSubsystem, SystemDescriptionEntity, isConnection } from '../../entities/system-description/system-description-entity';\r\nimport { isSystemObjectData, isSubsystemData, GraphElementPosition } from '../../entities/graph/graph-element';\r\nimport NodePopper from '../graph/node-popper';\r\nimport Connection from '../../entities/system-description/connection';\r\nimport DeleteElementButton from './delete-element-button';\r\nimport { isRole } from '../../entities/system-description/role';\r\nimport Hazard from '../../entities/hazard-population/hazard';\r\n\r\ninterface Props {\r\n    system: SystemDescription;\r\n    systemUpdated: (system: SystemDescription) => void;\r\n    objectEditing?: SystemObject | Subsystem | null;\r\n    objectEditingDone?: () => void;\r\n    nodeConnecting: NodeSingular | null;\r\n    nodeConnectingDone: () => void;\r\n    tryCreateConnection: (source: NodeSingular, target: NodeSingular) => Connection | null;\r\n    toolbarButtons?: JSX.Element;\r\n    elementDisplayPopper: Singular | null;\r\n    elementDisplayPopperChanged: (element: Singular | null) => void;\r\n    renderSystemObjectActions: (object: SystemObject, element: NodeSingular) => JSX.Element;\r\n    renderSubsystemActions: (subsystem: Subsystem, element: NodeSingular) => JSX.Element;\r\n    renderConnectionActions?: (element: EdgeSingular) => JSX.Element;\r\n}\r\n\r\ninterface State {\r\n    isConnectionValid: boolean;\r\n}\r\n\r\nexport interface StepProps {\r\n    system: SystemDescription;\r\n    systemUpdated: (system: SystemDescription) => void;\r\n}\r\n\r\nexport interface StepState {\r\n    objectEditing: SystemObject | Subsystem | null;\r\n    nodeConnecting: NodeSingular | null;\r\n    elementDisplayPopper: Singular | null;\r\n}\r\n\r\nconst DEFAULT_POSITION = {\r\n    x: 100, y: 50\r\n};\r\n\r\nexport default class SdfStepBase extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.showNodeActions = this.showNodeActions.bind(this);\r\n        this.hideNodeActions = this.hideNodeActions.bind(this);\r\n        this.tryCreateConnection = this.tryCreateConnection.bind(this);\r\n        this.updateEntity = this.updateEntity.bind(this);\r\n        this.completeEditEntity = this.completeEditEntity.bind(this);\r\n        this.modifySystemDescription = this.modifySystemDescription.bind(this);\r\n        this.updateNodePosition = this.updateNodePosition.bind(this);\r\n        this.validateConnection = this.validateConnection.bind(this);\r\n        this.preventOverlap = this.preventOverlap.bind(this);\r\n        this.cancelEditEntity = this.cancelEditEntity.bind(this);\r\n        this.renderConnectionActions = this.renderConnectionActions.bind(this);\r\n        this.updateHazards = this.updateHazards.bind(this);\r\n\r\n        this.state = {\r\n            isConnectionValid: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const elementsFactory = new GraphElementsFactory();\r\n        const elements = elementsFactory.mapSystemDescription(this.props.system);\r\n\r\n        let actionButtonsPlacement: Popper.Placement = 'top';\r\n        if (this.props.elementDisplayPopper && this.props.elementDisplayPopper.isNode()) {\r\n            if (isSystemObjectData(this.props.elementDisplayPopper.data())) {\r\n                actionButtonsPlacement = 'top-start';\r\n            } else {\r\n                actionButtonsPlacement = 'bottom-start';\r\n            }\r\n        }\r\n\r\n        let cursorStyle = 'default';\r\n        if (this.props.nodeConnecting) {\r\n            if (this.state.isConnectionValid) {\r\n                cursorStyle = 'pointer';\r\n            } else {\r\n                cursorStyle = 'not-allowed';\r\n            }\r\n        }\r\n\r\n        let elementActions = <React.Fragment></React.Fragment>;\r\n        const actionElement = this.props.elementDisplayPopper;\r\n        if (actionElement) {\r\n            if (actionElement.isEdge()) {\r\n                if (this.props.renderConnectionActions) {\r\n                    elementActions = this.props.renderConnectionActions(actionElement);\r\n                } else {\r\n                    elementActions = this.renderConnectionActions(actionElement);\r\n                }\r\n            } else if (actionElement.isNode()) {\r\n                const data = actionElement.data();\r\n                if (isSystemObjectData(data)) {\r\n                    elementActions = this.props.renderSystemObjectActions(data.systemObject, actionElement);\r\n                } else if (isSubsystemData(data)) {\r\n                    elementActions = this.props.renderSubsystemActions(data.subsystem, actionElement);\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Graph\r\n                    elements={elements}\r\n                    cursorStyle={cursorStyle}\r\n                    graphClicked={this.props.nodeConnectingDone}\r\n                    nodeClicked={this.tryCreateConnection}\r\n                    mouseEnteredNode={this.showNodeActions}\r\n                    mouseLeftNode={this.hideNodeActions}\r\n                    nodeMoved={this.updateNodePosition}\r\n                    useCollapseApi={true}\r\n                />\r\n                {this.props.toolbarButtons}\r\n                {\r\n                    this.props.elementDisplayPopper ?\r\n                        <NodePopper\r\n                            element={this.props.elementDisplayPopper}\r\n                            placement={actionButtonsPlacement}\r\n                        >\r\n                            {elementActions}\r\n                        </NodePopper>\r\n                        :\r\n                        undefined\r\n                }\r\n                {\r\n                    this.props.objectEditing ?\r\n                        <NodeEditor\r\n                            entity={this.props.objectEditing}\r\n                            subsystemsAvailable={this.props.system.subsystems}\r\n                            entityUpdated={this.completeEditEntity}\r\n                            editCancelled={this.cancelEditEntity}\r\n                        />\r\n                        :\r\n                        undefined\r\n                }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private renderConnectionActions(element: EdgeSingular) {\r\n        if (!this.props.tryCreateConnection(element.source(), element.target())) {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n\r\n        return <DeleteElementButton\r\n            element={element}\r\n            system={this.props.system}\r\n            systemUpdated={this.props.systemUpdated}\r\n        />;\r\n    }\r\n\r\n    private showNodeActions(event: EventObject) {\r\n        // triggered twice for element in subsystem which breaks popper\r\n        if (this.props.elementDisplayPopper) {\r\n            return;\r\n        }\r\n\r\n        let isConnectionValid = false;\r\n        const ele = event.target as Singular;\r\n        if (ele.isNode()) {\r\n            isConnectionValid = !!this.validateConnection(ele);\r\n        }\r\n\r\n        this.setState({ ...this.state, ...{ isConnectionValid: isConnectionValid } });\r\n        this.props.elementDisplayPopperChanged(event.target);\r\n    }\r\n\r\n    private hideNodeActions() {\r\n        this.setState({ ...this.state, ...{ isConnectionValid: false } });\r\n        this.props.elementDisplayPopperChanged(null);\r\n    }\r\n\r\n    private tryCreateConnection(event: EventObject) {\r\n        const target = event.target as Singular;\r\n        if (target.isNode()) {\r\n            const connection = this.validateConnection(target);\r\n            if (connection) {\r\n                this.modifySystemDescription(connection, (list, item) => list.concat(item));\r\n            }\r\n        }\r\n        this.props.nodeConnectingDone();\r\n    }\r\n\r\n    private validateConnection(target: NodeSingular) {\r\n        if (!this.props.nodeConnecting ||\r\n            this.props.nodeConnecting === target ||\r\n            this.props.nodeConnecting.edgesWith(target).length !== 0\r\n        ) {\r\n            return null;\r\n        }\r\n        return this.props.tryCreateConnection(this.props.nodeConnecting, target);\r\n    }\r\n\r\n    private updateNodePosition(event: EventObject) {\r\n        const node = event.target as NodeSingular;\r\n        const position = node.position();\r\n        const data = node.data();\r\n        if (isSystemObjectData(data)) {\r\n            const systemObject = data.systemObject;\r\n            systemObject.posX = position.x;\r\n            systemObject.posY = position.y;\r\n            this.updateEntity(systemObject);\r\n            if (data.parent && node.parent().length > 0) {\r\n                // save position of parent subsystem as it changes when its children move\r\n                const parent = this.props.system.subsystems.find(e => e.id === data.parent);\r\n                if (parent) {\r\n                    const parentPosition = node.parent()[0].position();\r\n                    parent.posX = parentPosition.x;\r\n                    parent.posY = parentPosition.y;\r\n                    this.updateEntity(parent);\r\n                }\r\n            }\r\n\r\n        } else if (isSubsystemData(data)) {\r\n            const subsystem = data.subsystem;\r\n            subsystem.posX = position.x;\r\n            subsystem.posY = position.y;\r\n            this.updateEntity(subsystem);\r\n            // update position of children nodes\r\n            for (var i = 0; i < node.children().length; i++) {\r\n                const childNode = node.children()[i];\r\n                const childData = childNode.data();\r\n                if (isSystemObjectData(childData)) {\r\n                    const childObject = childData.systemObject;\r\n                    const position = childNode.position();\r\n                    childObject.posX = position.x;\r\n                    childObject.posY = position.y;\r\n                    this.updateEntity(childObject);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateHazards(entity: SystemObject) {\r\n        let transformHazard = (hazard: Hazard) => hazard;\r\n        switch (entity.type) {\r\n            case ObjectTypes.relator:\r\n                transformHazard = (hazard: Hazard) => {\r\n                    if (hazard.exposure.id !== entity.id) {\r\n                        return hazard;\r\n                    }\r\n                    return {\r\n                        ...hazard,\r\n                        ...{ exposure: { id: entity.id, name: entity.name } }\r\n                    };\r\n                };\r\n                break;\r\n            case ObjectTypes.role:\r\n                transformHazard = (hazard: Hazard) => {\r\n                    if (hazard.mishapVictim.id !== entity.id && hazard.hazardElement.id !== entity.id) {\r\n                        return hazard;\r\n                    }\r\n                    return {\r\n                        ...hazard,\r\n                        ...{\r\n                            mishapVictim: hazard.mishapVictim.id === entity.id ?\r\n                                { id: entity.id, name: entity.name } : hazard.mishapVictim,\r\n                            hazardElement: hazard.hazardElement.id === entity.id ?\r\n                                { id: entity.id, name: entity.name } : hazard.hazardElement,\r\n                        }\r\n                    };\r\n                };\r\n                break;\r\n            case ObjectTypes.kind:\r\n                transformHazard = (hazard: Hazard) => {\r\n                    if (hazard.mishapVictimEnvObj.id !== entity.id &&\r\n                        hazard.hazardElementEnvObj.id !== entity.id\r\n                    ) {\r\n                        return hazard;\r\n                    }\r\n                    return {\r\n                        ...hazard,\r\n                        ...{\r\n                            mishapVictimEnvObj: hazard.mishapVictimEnvObj.id === entity.id ?\r\n                                { id: entity.id, name: entity.name } : hazard.mishapVictimEnvObj,\r\n                            hazardElementEnvObj: hazard.hazardElementEnvObj.id === entity.id ?\r\n                                { id: entity.id, name: entity.name } : hazard.hazardElementEnvObj,\r\n                        }\r\n                    };\r\n                };\r\n                break;\r\n        }\r\n\r\n        const updatedHazards = this.props.system.hazards.map(transformHazard);\r\n        this.props.systemUpdated({ ...this.props.system, ...{ hazards: updatedHazards } });\r\n    }\r\n\r\n    private updateEntity(entity: SystemObject | Subsystem) {\r\n        this.modifySystemDescription(entity, (list, item) => list.map(e => e.id === item.id ? item : e));\r\n    }\r\n\r\n    private modifySystemDescription(\r\n        entity: SystemDescriptionEntity,\r\n        action: <T extends SystemDescriptionEntity>(list: T[], item: T) => T[]\r\n    ) {\r\n        const system = this.props.system;\r\n        if (isSubsystem(entity)) {\r\n            system.subsystems = action(system.subsystems, entity);\r\n        } else if (isSystemObject(entity)) {\r\n            if (isRole(entity)) {\r\n                system.roles = action(system.roles, entity);\r\n            } else {\r\n                switch (entity.type) {\r\n                    case ObjectTypes.kind:\r\n                        system.kinds = action(system.kinds, entity);\r\n                        break;\r\n                    case ObjectTypes.relator:\r\n                        system.relators = action(system.relators, entity);\r\n                        break;\r\n                    default:\r\n                        throw new Error('Unknown entity type');\r\n                }\r\n            }\r\n        } else if (isConnection(entity)) {\r\n            system.systemObjectConnections = action(system.systemObjectConnections, entity);\r\n        }\r\n        this.props.systemUpdated({ ...this.props.system, ...system });\r\n    }\r\n\r\n    private cancelEditEntity() {\r\n        this.props.objectEditingDone && this.props.objectEditingDone();\r\n    }\r\n\r\n    private completeEditEntity(entity: SystemObject | Subsystem) {\r\n        const allNodes = new GraphElementsFactory().getAllNodes(this.props.system);\r\n        const existingEntity = allNodes.find(e => e.id === entity.id);\r\n\r\n        if (existingEntity) {\r\n            if (isSystemObject(entity) && isSystemObject(existingEntity)) {\r\n                let positionOverride = null;\r\n                let parentId: string | undefined = undefined;\r\n                if (entity.parent && (!existingEntity.parent || existingEntity.parent !== entity.parent)) {\r\n                    const parent = this.props.system.subsystems.find(e => e.id === entity.parent);\r\n                    if (parent) {\r\n                        positionOverride = { x: parent.posX, y: parent.posY };\r\n                        parentId = parent.id;\r\n                    }\r\n                } else if (!entity.parent && existingEntity.parent) {\r\n                    positionOverride = DEFAULT_POSITION;\r\n                }\r\n\r\n                if (positionOverride) {\r\n                    const adjustedPosition = this.preventOverlap(positionOverride, allNodes, parentId);\r\n                    entity.posX = adjustedPosition.x;\r\n                    entity.posY = adjustedPosition.y;\r\n                }\r\n\r\n                if (entity.name !== existingEntity.name) {\r\n                    this.updateHazards(entity);\r\n                }\r\n            }\r\n            this.updateEntity(entity);\r\n\r\n        } else {\r\n            let nodePosition = DEFAULT_POSITION;\r\n            let parentId: string | undefined;\r\n            if (isSystemObject(entity) && entity.parent) {\r\n                const parent = this.props.system.subsystems.find(e => e.id === entity.parent);\r\n                if (parent) {\r\n                    nodePosition = { x: parent.posX, y: parent.posY };\r\n                    parentId = parent.id;\r\n                }\r\n            }\r\n            const adjustedPosition = this.preventOverlap(nodePosition, allNodes, parentId);\r\n            entity.posX = adjustedPosition.x;\r\n            entity.posY = adjustedPosition.y;\r\n\r\n            this.modifySystemDescription(entity, (list, item) => list.concat(item));\r\n        }\r\n\r\n        this.props.objectEditingDone && this.props.objectEditingDone();\r\n    };\r\n\r\n    private preventOverlap(\r\n        position: GraphElementPosition,\r\n        otherNodes: (SystemObject | Subsystem)[],\r\n        parentId?: string\r\n    ): GraphElementPosition {\r\n        if (otherNodes.every(e => (e.posX !== position.x && e.posY !== position.y) || e.id === parentId)) {\r\n            return position;\r\n        }\r\n        return this.preventOverlap({ x: position.x + 20, y: position.y + 20 }, otherNodes);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { NodeSingular } from 'cytoscape';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { ExpandMore, ExpandLess } from '@material-ui/icons';\r\nimport { getCollapseApi } from '../../entities/graph/collapse-api';\r\nimport { SystemDescription } from '../../entities/system-model';\r\n\r\ninterface Props {\r\n    node: NodeSingular;\r\n    subsystem: Subsystem;\r\n    system: SystemDescription;\r\n    systemUpdated: (system: SystemDescription) => void;\r\n}\r\n\r\nconst SubsystemCollapseButton: React.FC<Props> = (props) => {\r\n\r\n    const toggleCollapsedState = () => {\r\n        const cy = props.node.cy();\r\n        const collapseApi = getCollapseApi(cy);\r\n        const newStateCollapsed = !props.subsystem.isCollapsed;\r\n        if (newStateCollapsed) {\r\n            collapseApi.collapse(props.node);\r\n        } else {\r\n            collapseApi.expand(props.node);\r\n        }\r\n        // collapsing tool messes up everything\r\n        cy.json(cy.json()); // force redraw\r\n        cy.zoom(1.1); // restore position\r\n        cy.pan({ x: 0, y: 0 });\r\n\r\n        const updatedSubsystems = props.system.subsystems\r\n            .map(e => e.id !== props.subsystem.id ? e : { ...props.subsystem, ...{ isCollapsed: newStateCollapsed } });\r\n        props.systemUpdated({ ...props.system, ...{ subsystems: updatedSubsystems } });\r\n    };\r\n\r\n    return (\r\n        <IconButton\r\n            title={props.subsystem.isCollapsed ? 'Expand' : 'Collapse'}\r\n            onClick={toggleCollapsedState}\r\n            size='small'\r\n        >\r\n            {props.subsystem.isCollapsed ? <ExpandMore /> : <ExpandLess />}\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default SubsystemCollapseButton;\r\n","import React from 'react';\r\nimport { NodeSingular } from 'cytoscape';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Add, Edit, Link } from '@material-ui/icons';\r\n\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport { createObjectId } from '../../entities/system-model';\r\nimport ToolbarButtons from './toolbar-buttons';\r\nimport { ObjectTypes } from '../../entities/system-description/object-types';\r\nimport { isSystemObjectData } from '../../entities/graph/graph-element';\r\nimport SdfStepBase, { StepProps, StepState } from './sdf-step-base';\r\nimport DeleteElementButton from './delete-element-button';\r\nimport SubsystemCollapseButton from './subsystem-collapse-button';\r\n\r\nexport default class SdfStep1 extends React.Component<StepProps, StepState> {\r\n\r\n    constructor(props: StepProps) {\r\n        super(props);\r\n\r\n        this.tryCreateConnection = this.tryCreateConnection.bind(this);\r\n        this.startCreatingKind = this.startCreatingKind.bind(this);\r\n        this.startCreatingRole = this.startCreatingRole.bind(this);\r\n        this.startCreatingSubsystem = this.startCreatingSubsystem.bind(this);\r\n        this.renderSystemObjectActions = this.renderSystemObjectActions.bind(this);\r\n        this.renderSubsystemActions = this.renderSubsystemActions.bind(this);\r\n\r\n        this.state = {\r\n            nodeConnecting: null,\r\n            objectEditing: null,\r\n            elementDisplayPopper: null\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const toolbarButtons = <ToolbarButtons buttons={[\r\n            {\r\n                icon: <Add />,\r\n                text: 'Kind',\r\n                action: this.startCreatingKind\r\n            },\r\n            {\r\n                icon: <Add />,\r\n                text: 'Role',\r\n                action: this.startCreatingRole\r\n            },\r\n            {\r\n                icon: <Add />,\r\n                text: 'Subsystem',\r\n                action: this.startCreatingSubsystem\r\n            },\r\n        ]} />;\r\n\r\n        return (\r\n            <SdfStepBase\r\n                system={this.props.system}\r\n                systemUpdated={this.props.systemUpdated}\r\n                elementDisplayPopper={this.state.elementDisplayPopper}\r\n                elementDisplayPopperChanged={(ele) => this.setState({\r\n                    ...this.state, ...{ elementDisplayPopper: ele }\r\n                })}\r\n                nodeConnecting={this.state.nodeConnecting}\r\n                nodeConnectingDone={() => this.setState({ ...this.state, ...{ nodeConnecting: null } })}\r\n                objectEditing={this.state.objectEditing}\r\n                objectEditingDone={() => this.setState({ ...this.state, ...{ objectEditing: null } })}\r\n                toolbarButtons={toolbarButtons}\r\n                tryCreateConnection={this.tryCreateConnection}\r\n                renderSubsystemActions={this.renderSubsystemActions}\r\n                renderSystemObjectActions={this.renderSystemObjectActions}\r\n            />\r\n        );\r\n    }\r\n\r\n    private renderSystemObjectActions(object: SystemObject, element: NodeSingular) {\r\n        if (object.type === ObjectTypes.kind) {\r\n            return (<div style={{ position: 'relative', top: '-5px', left: '-5px' }}>\r\n                <IconButton\r\n                    size='small'\r\n                    title='Connect to containing kind'\r\n                    onClick={() => this.setState({ ...this.state, ...{ nodeConnecting: element } })}\r\n                >\r\n                    <Link />\r\n                </IconButton>\r\n                <IconButton\r\n                    size='small'\r\n                    title='Edit'\r\n                    onClick={() => this.setState({\r\n                        ...this.state, ...{ objectEditing: object, elementDisplayPopper: null }\r\n                    })}\r\n                >\r\n                    <Edit />\r\n                </IconButton>\r\n                <DeleteElementButton\r\n                    element={element}\r\n                    system={this.props.system}\r\n                    systemUpdated={this.props.systemUpdated}\r\n                />\r\n            </div>);\r\n        }\r\n        if (object.type === ObjectTypes.role) {\r\n            return (<div style={{ position: 'relative', top: '-5px', left: '-5px' }}>\r\n                <IconButton\r\n                    size='small'\r\n                    title='Edit'\r\n                    onClick={() => this.setState({\r\n                        ...this.state, ...{ objectEditing: object, elementDisplayPopper: null }\r\n                    })}\r\n                >\r\n                    <Edit />\r\n                </IconButton>\r\n                <DeleteElementButton\r\n                    element={element}\r\n                    system={this.props.system}\r\n                    systemUpdated={this.props.systemUpdated}\r\n                />\r\n            </div>);\r\n        }\r\n        return <React.Fragment></React.Fragment>;\r\n    }\r\n\r\n    private renderSubsystemActions(subsystem: Subsystem, element: NodeSingular) {\r\n        return <div style={{ position: 'relative', top: '5px', left: '-5px' }}>\r\n            <SubsystemCollapseButton\r\n                node={element}\r\n                subsystem={subsystem}\r\n                system={this.props.system}\r\n                systemUpdated={this.props.systemUpdated}\r\n            />\r\n            <IconButton\r\n                size='small'\r\n                title='Edit'\r\n                onClick={() => this.setState({\r\n                    ...this.state, ...{ objectEditing: subsystem, elementDisplayPopper: null }\r\n                })}\r\n            >\r\n                <Edit />\r\n            </IconButton>\r\n            <DeleteElementButton\r\n                element={element}\r\n                system={this.props.system}\r\n                systemUpdated={this.props.systemUpdated}\r\n            />\r\n        </div>;\r\n    }\r\n\r\n    private tryCreateConnection(source: NodeSingular, target: NodeSingular) {\r\n        const sourceData = source.data();\r\n        const targetData = target.data();\r\n        if (isSystemObjectData(sourceData) && isSystemObjectData(targetData) &&\r\n            sourceData.systemObject.type === ObjectTypes.kind &&\r\n            targetData.systemObject.type === ObjectTypes.kind\r\n        ) {\r\n            return {\r\n                id: createObjectId('connection'),\r\n                source: sourceData.systemObject.id,\r\n                target: targetData.systemObject.id,\r\n                label: 'ispartof',\r\n                isOriented: true\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private startCreatingKind() {\r\n        if (!this.state.objectEditing) {\r\n            const obj = {\r\n                id: createObjectId('kind'),\r\n                name: \"\",\r\n                type: ObjectTypes.kind,\r\n                posX: 0,\r\n                posY: 0\r\n            };\r\n            this.setState({ ...this.state, ...{ objectEditing: obj } });\r\n        }\r\n    };\r\n\r\n    private startCreatingRole() {\r\n        if (!this.state.objectEditing) {\r\n            const obj = {\r\n                id: createObjectId('role'),\r\n                name: \"\",\r\n                type: ObjectTypes.role,\r\n                posX: 0,\r\n                posY: 0,\r\n                possibleHarms: []\r\n            };\r\n            this.setState({ ...this.state, ...{ objectEditing: obj } });\r\n        }\r\n    };\r\n\r\n    private startCreatingSubsystem() {\r\n        if (!this.state.objectEditing) {\r\n            const subsystem = {\r\n                id: createObjectId('subsystem'),\r\n                name: \"\",\r\n                posX: 0,\r\n                posY: 0,\r\n                isCollapsed: false\r\n            };\r\n            this.setState({ ...this.state, ...{ objectEditing: subsystem } });\r\n        }\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { NodeSingular } from 'cytoscape';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Link } from '@material-ui/icons';\r\n\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport { createObjectId } from '../../entities/system-model';\r\nimport { ObjectTypes } from '../../entities/system-description/object-types';\r\nimport { isSystemObjectData } from '../../entities/graph/graph-element';\r\nimport SdfStepBase, { StepProps, StepState } from './sdf-step-base';\r\nimport SubsystemCollapseButton from './subsystem-collapse-button';\r\n\r\nexport default class SdfStep2 extends React.Component<StepProps, StepState> {\r\n\r\n    constructor(props: StepProps) {\r\n        super(props);\r\n\r\n        this.tryCreateConnection = this.tryCreateConnection.bind(this);\r\n        this.renderSystemObjectActions = this.renderSystemObjectActions.bind(this);\r\n        this.renderSubsystemActions = this.renderSubsystemActions.bind(this);\r\n\r\n        this.state = {\r\n            nodeConnecting: null,\r\n            objectEditing: null,\r\n            elementDisplayPopper: null\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <SdfStepBase\r\n                system={this.props.system}\r\n                systemUpdated={this.props.systemUpdated}\r\n                elementDisplayPopper={this.state.elementDisplayPopper}\r\n                elementDisplayPopperChanged={(ele) => this.setState({\r\n                    ...this.state, ...{ elementDisplayPopper: ele }\r\n                })}\r\n                nodeConnecting={this.state.nodeConnecting}\r\n                nodeConnectingDone={() => this.setState({ ...this.state, ...{ nodeConnecting: null } })}\r\n                tryCreateConnection={this.tryCreateConnection}\r\n                renderSubsystemActions={this.renderSubsystemActions}\r\n                renderSystemObjectActions={this.renderSystemObjectActions}\r\n            />\r\n        );\r\n    }\r\n\r\n    private renderSystemObjectActions(object: SystemObject, element: NodeSingular) {\r\n        if (object.type !== ObjectTypes.kind) {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n\r\n        return (<div style={{ position: 'relative', top: '-5px', left: '-5px' }}>\r\n            <IconButton\r\n                size='small'\r\n                title='Connect to role'\r\n                onClick={() => this.setState({ ...this.state, ...{ nodeConnecting: element } })}\r\n            >\r\n                <Link />\r\n            </IconButton>\r\n        </div>);\r\n    }\r\n\r\n    private renderSubsystemActions(subsystem: Subsystem, element: NodeSingular) {\r\n        return <div style={{ position: 'relative', top: '5px', left: '-5px' }}>\r\n            <SubsystemCollapseButton\r\n                node={element}\r\n                subsystem={subsystem}\r\n                system={this.props.system}\r\n                systemUpdated={this.props.systemUpdated}\r\n            />\r\n        </div>;\r\n    }\r\n\r\n    private tryCreateConnection(source: NodeSingular, target: NodeSingular) {\r\n        const sourceData = source.data();\r\n        const targetData = target.data();\r\n        if (isSystemObjectData(sourceData) && sourceData.systemObject.type === ObjectTypes.kind &&\r\n            isSystemObjectData(targetData) && targetData.systemObject.type === ObjectTypes.role\r\n        ) {\r\n            return {\r\n                id: createObjectId('connection'),\r\n                source: sourceData.systemObject.id,\r\n                target: targetData.systemObject.id,\r\n                label: 'play',\r\n                isOriented: true\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { NodeSingular } from 'cytoscape';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Add, Edit, Link } from '@material-ui/icons';\r\n\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport { createObjectId } from '../../entities/system-model';\r\nimport ToolbarButtons from './toolbar-buttons';\r\nimport { ObjectTypes } from '../../entities/system-description/object-types';\r\nimport { isSystemObjectData } from '../../entities/graph/graph-element';\r\nimport SdfStepBase, { StepProps, StepState } from './sdf-step-base';\r\nimport DeleteElementButton from './delete-element-button';\r\nimport SubsystemCollapseButton from './subsystem-collapse-button';\r\n\r\nexport default class SdfStep3 extends React.Component<StepProps, StepState> {\r\n\r\n    constructor(props: StepProps) {\r\n        super(props);\r\n\r\n        this.tryCreateConnection = this.tryCreateConnection.bind(this);\r\n        this.startCreatingRelator = this.startCreatingRelator.bind(this);\r\n        this.renderSystemObjectActions = this.renderSystemObjectActions.bind(this);\r\n        this.renderSubsystemActions = this.renderSubsystemActions.bind(this);\r\n\r\n        this.state = {\r\n            nodeConnecting: null,\r\n            objectEditing: null,\r\n            elementDisplayPopper: null\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const toolbarButtons = <ToolbarButtons buttons={[\r\n            {\r\n                icon: <Add />,\r\n                text: 'Relator',\r\n                action: this.startCreatingRelator\r\n            }]} />;\r\n\r\n        return (\r\n            <SdfStepBase\r\n                system={this.props.system}\r\n                systemUpdated={this.props.systemUpdated}\r\n                elementDisplayPopper={this.state.elementDisplayPopper}\r\n                elementDisplayPopperChanged={(ele) => this.setState({\r\n                    ...this.state, ...{ elementDisplayPopper: ele }\r\n                })}\r\n                nodeConnecting={this.state.nodeConnecting}\r\n                nodeConnectingDone={() => this.setState({ ...this.state, ...{ nodeConnecting: null } })}\r\n                objectEditing={this.state.objectEditing}\r\n                objectEditingDone={() => this.setState({ ...this.state, ...{ objectEditing: null } })}\r\n                toolbarButtons={toolbarButtons}\r\n                tryCreateConnection={this.tryCreateConnection}\r\n                renderSubsystemActions={this.renderSubsystemActions}\r\n                renderSystemObjectActions={this.renderSystemObjectActions}\r\n            />\r\n        );\r\n    }\r\n\r\n    private renderSystemObjectActions(object: SystemObject, element: NodeSingular) {\r\n        if (object.type === ObjectTypes.relator) {\r\n            return (<div style={{ position: 'relative', top: '-5px', left: '-5px' }}>\r\n                <IconButton\r\n                    size='small'\r\n                    title='Connect to role'\r\n                    onClick={() => this.setState({ ...this.state, ...{ nodeConnecting: element } })}\r\n                >\r\n                    <Link />\r\n                </IconButton>\r\n                <IconButton\r\n                    size='small'\r\n                    title='Edit'\r\n                    onClick={() => this.setState({\r\n                        ...this.state, ...{ objectEditing: object, elementDisplayPopper: null }\r\n                    })}\r\n                >\r\n                    <Edit />\r\n                </IconButton>\r\n                <DeleteElementButton\r\n                    element={element}\r\n                    system={this.props.system}\r\n                    systemUpdated={this.props.systemUpdated}\r\n                />\r\n            </div>);\r\n        }\r\n        if (object.type === ObjectTypes.role) {\r\n            return (<div style={{ position: 'relative', top: '-5px', left: '-5px' }}>\r\n                <IconButton\r\n                    size='small'\r\n                    title='Connect to relator'\r\n                    onClick={() => this.setState({ ...this.state, ...{ nodeConnecting: element } })}\r\n                >\r\n                    <Link />\r\n                </IconButton>\r\n            </div>);\r\n        }\r\n        return <React.Fragment></React.Fragment>;\r\n    }\r\n\r\n    private renderSubsystemActions(subsystem: Subsystem, element: NodeSingular) {\r\n        return <div style={{ position: 'relative', top: '5px', left: '-5px' }}>\r\n            <SubsystemCollapseButton\r\n                node={element}\r\n                subsystem={subsystem}\r\n                system={this.props.system}\r\n                systemUpdated={this.props.systemUpdated}\r\n            />\r\n        </div>;\r\n    }\r\n\r\n    private tryCreateConnection(source: NodeSingular, target: NodeSingular) {\r\n        const sourceData = source.data();\r\n        const targetData = target.data();\r\n        if (isSystemObjectData(sourceData) && isSystemObjectData(targetData)) {\r\n            // connection goes from role to relator, this is important for hazard population\r\n            if (sourceData.systemObject.type === ObjectTypes.role &&\r\n                targetData.systemObject.type === ObjectTypes.relator\r\n            ) {\r\n                return {\r\n                    id: createObjectId('connection'),\r\n                    source: sourceData.systemObject.id,\r\n                    target: targetData.systemObject.id,\r\n                    label: '',\r\n                    isOriented: false\r\n                };\r\n            }\r\n            // swap ends if ends are wrong\r\n            if (sourceData.systemObject.type === ObjectTypes.relator &&\r\n                targetData.systemObject.type === ObjectTypes.role) {\r\n                return {\r\n                    id: createObjectId('connection'),\r\n                    source: targetData.systemObject.id,\r\n                    target: sourceData.systemObject.id,\r\n                    label: '',\r\n                    isOriented: false\r\n                };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private startCreatingRelator() {\r\n        if (!this.state.objectEditing) {\r\n            const obj = {\r\n                id: createObjectId(ObjectTypes.relator.toString()),\r\n                name: \"\",\r\n                type: ObjectTypes.relator,\r\n                posX: 0,\r\n                posY: 0\r\n            };\r\n            this.setState({ ...this.state, ...{ objectEditing: obj } });\r\n        }\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { NodeSingular, EdgeSingular } from 'cytoscape';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Link } from '@material-ui/icons';\r\n\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport { createObjectId } from '../../entities/system-model';\r\nimport { ObjectTypes } from '../../entities/system-description/object-types';\r\nimport { isSystemObjectData } from '../../entities/graph/graph-element';\r\nimport SdfStepBase, { StepProps, StepState } from './sdf-step-base';\r\nimport SubsystemCollapseButton from './subsystem-collapse-button';\r\nimport DeleteElementButton from './delete-element-button';\r\n\r\nexport default class SdfStep4 extends React.Component<StepProps, StepState> {\r\n\r\n    constructor(props: StepProps) {\r\n        super(props);\r\n\r\n        this.tryCreateConnection = this.tryCreateConnection.bind(this);\r\n        this.renderSystemObjectActions = this.renderSystemObjectActions.bind(this);\r\n        this.renderSubsystemActions = this.renderSubsystemActions.bind(this);\r\n        this.renderConnectionActions = this.renderConnectionActions.bind(this);\r\n\r\n        this.state = {\r\n            nodeConnecting: null,\r\n            objectEditing: null,\r\n            elementDisplayPopper: null\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <SdfStepBase\r\n                system={this.props.system}\r\n                systemUpdated={this.props.systemUpdated}\r\n                elementDisplayPopper={this.state.elementDisplayPopper}\r\n                elementDisplayPopperChanged={(ele) => this.setState({\r\n                    ...this.state, ...{ elementDisplayPopper: ele }\r\n                })}\r\n                nodeConnecting={this.state.nodeConnecting}\r\n                nodeConnectingDone={() => this.setState({ ...this.state, ...{ nodeConnecting: null } })}\r\n                tryCreateConnection={this.tryCreateConnection}\r\n                renderSubsystemActions={this.renderSubsystemActions}\r\n                renderSystemObjectActions={this.renderSystemObjectActions}\r\n                renderConnectionActions={this.renderConnectionActions}\r\n            />\r\n        );\r\n    }\r\n\r\n    private renderSystemObjectActions(object: SystemObject, element: NodeSingular) {\r\n        if (object.type !== ObjectTypes.role) {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n\r\n        return (<div style={{ position: 'relative', top: '-5px', left: '-5px' }}>\r\n            <IconButton\r\n                size='small'\r\n                title='Connect to kind'\r\n                onClick={() => this.setState({ ...this.state, ...{ nodeConnecting: element } })}\r\n            >\r\n                <Link />\r\n            </IconButton>\r\n        </div>);\r\n    }\r\n\r\n    private renderSubsystemActions(subsystem: Subsystem, element: NodeSingular) {\r\n        return <div style={{ position: 'relative', top: '5px', left: '-5px' }}>\r\n            <SubsystemCollapseButton\r\n                node={element}\r\n                subsystem={subsystem}\r\n                system={this.props.system}\r\n                systemUpdated={this.props.systemUpdated}\r\n            />\r\n        </div>;\r\n    }\r\n\r\n    private renderConnectionActions(element: EdgeSingular) {\r\n        // swap ends\r\n        if (!this.tryCreateConnection(element.target(), element.source())) {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n\r\n        return <DeleteElementButton\r\n            element={element}\r\n            system={this.props.system}\r\n            systemUpdated={this.props.systemUpdated}\r\n        />;\r\n    }\r\n\r\n    private tryCreateConnection(source: NodeSingular, target: NodeSingular) {\r\n        const roleData = source.data();\r\n        const kindData = target.data();\r\n        if (isSystemObjectData(roleData) && roleData.systemObject.type === ObjectTypes.role &&\r\n            isSystemObjectData(kindData) && kindData.systemObject.type === ObjectTypes.kind\r\n        ) {\r\n            return {\r\n                id: createObjectId('connection'),\r\n                source: kindData.systemObject.id,\r\n                target: roleData.systemObject.id,\r\n                label: 'play',\r\n                isOriented: true\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","import { NodeSingular, EdgeSingular } from \"cytoscape\";\r\nimport { isSystemObjectData, isConnectionData } from \"./graph-element\";\r\nimport { isRole } from \"../system-description/role\";\r\n\r\nexport function getSystemObject(ele: NodeSingular | EdgeSingular) {\r\n    const data = ele.data();\r\n    if (isSystemObjectData(data)) {\r\n        return data.systemObject;\r\n    }\r\n}\r\n\r\nexport function getRole(ele: NodeSingular | EdgeSingular) {\r\n    const systemObject = getSystemObject(ele);\r\n    if (systemObject && isRole(systemObject)) {\r\n        return systemObject;\r\n    }\r\n}\r\n\r\nexport function getConnection(ele: NodeSingular | EdgeSingular) {\r\n    const data = ele.data();\r\n    if (isConnectionData(data)) {\r\n        return data.connection;\r\n    }\r\n}\r\n","export enum HazardCategory {\r\n    hazard = 'Hazard',\r\n    initiatingCondition = 'Initiating Condition',\r\n    initiatingEvent = 'Initiating Event',\r\n    mishap = 'Mishap'\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Card, CardHeader, IconButton, Button, Typography, CardContent, CardActions } from '@material-ui/core';\r\nimport { Close } from '@material-ui/icons';\r\nimport { HazardCategory } from '../../../entities/hazard-description-categorization/hazard-category';\r\n\r\ninterface Props {\r\n    cancel: () => void;\r\n    complete: (category: HazardCategory) => void;\r\n}\r\n\r\nenum IntermediateCategory {\r\n    notSet,\r\n    situation,\r\n    event\r\n}\r\n\r\nconst CategorizationWizard: React.FC<Props> = (props) => {\r\n\r\n    const [category, setCategory] = useState(IntermediateCategory.notSet);\r\n\r\n    let question: string;\r\n    let instructions: JSX.Element | null = null;\r\n    let actions: JSX.Element;\r\n\r\n    switch (category) {\r\n        case IntermediateCategory.notSet:\r\n            question = 'Is the hazard description describing a situation (state of affairs) or an event?';\r\n            instructions = (\r\n                <React.Fragment>\r\n                    <p>\r\n                        Note that\r\n                    </p>\r\n                    <p>\r\n                        1) if a hazard description describes that some event is supposed to occur but\r\n                        does not, then the hazard description is regarded as a generic situation that\r\n                        will not trigger the specific event, such as \"the brake command is not issued\",\r\n                    </p>\r\n                    <p>\r\n                        and\r\n                    </p>\r\n                    <p>\r\n                        2) if a hazard description describes a repetitive and continuous behavior, it \r\n                        can be regarded as a situation, such as \"a train is running on the track\".\r\n                    </p>\r\n                </React.Fragment>\r\n            );\r\n            actions = (\r\n                <React.Fragment>\r\n                    <Button\r\n                        size='small'\r\n                        variant='outlined'\r\n                        onClick={() => setCategory(IntermediateCategory.situation)}\r\n                    >\r\n                        Situation\r\n                    </Button>\r\n                    <Button\r\n                        size='small'\r\n                        variant='outlined'\r\n                        onClick={() => setCategory(IntermediateCategory.event)}\r\n                    >\r\n                        Event\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n            break;\r\n        case IntermediateCategory.situation:\r\n            question = 'Can the situation trigger mishaps when some dispositions in the situation are manifested ?';\r\n            actions = (\r\n                <React.Fragment>\r\n                    <Button\r\n                        size='small'\r\n                        variant='outlined'\r\n                        onClick={() => props.complete(HazardCategory.hazard)}\r\n                    >\r\n                        Yes &mdash; Hazard\r\n                    </Button>\r\n                    <Button\r\n                        size='small'\r\n                        variant='outlined'\r\n                        onClick={() => props.complete(HazardCategory.initiatingCondition)}\r\n                    >\r\n                        No &mdash; Initiating Condition\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n            break;\r\n        case IntermediateCategory.event:\r\n            question = 'Can the event bring about severe injuries of people or damages to the environment?';\r\n            actions = (\r\n                <React.Fragment>\r\n                    <Button\r\n                        size='small'\r\n                        variant='outlined'\r\n                        onClick={() => props.complete(HazardCategory.mishap)}\r\n                    >\r\n                        Yes &mdash; Mishap\r\n                    </Button>\r\n                    <Button\r\n                        size='small'\r\n                        variant='outlined'\r\n                        onClick={() => props.complete(HazardCategory.initiatingEvent)}\r\n                    >\r\n                        No &mdash; Initiating Event\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n            break;\r\n        default:\r\n            throw new Error('Unknown intermediate category');\r\n    }\r\n\r\n    return (\r\n        <Card variant='outlined'>\r\n            <CardHeader\r\n                action={\r\n                    <IconButton size='small' onClick={props.cancel}>\r\n                        <Close />\r\n                    </IconButton>\r\n                }\r\n                title={question}\r\n            />\r\n            {\r\n                instructions ?\r\n                    <CardContent>\r\n                        <Typography variant='body2' component='div'>\r\n                            {instructions}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    :\r\n                    undefined\r\n            }\r\n            <CardActions>\r\n                {actions}\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default CategorizationWizard;\r\n","import React from 'react';\r\nimport Hazard from '../../entities/hazard-population/hazard';\r\n\r\ninterface Props {\r\n    hazard: Hazard;\r\n}\r\n\r\nconst HazardId: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n        <React.Fragment>H{props.hazard.id}</React.Fragment>\r\n    );\r\n};\r\n\r\nexport default HazardId;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { TableRow, TableCell, TextField, IconButton, withStyles, createStyles } from '@material-ui/core';\r\nimport { Delete, Edit, Save } from '@material-ui/icons';\r\nimport Hazard from '../../entities/hazard-population/hazard';\r\nimport HazardId from './hazard-id';\r\n\r\ninterface Props {\r\n    hazard: Hazard;\r\n    index: number;\r\n    hazardEdited: (hazard: Hazard) => void;\r\n    hazardDeleted: (id: number) => void;\r\n}\r\n\r\nconst StyledTableCell = withStyles(theme =>\r\n    createStyles({\r\n        sizeSmall: {\r\n            padding: theme.spacing(1)\r\n        }\r\n    })\r\n)(TableCell);\r\n\r\nconst HazardsRow: React.FC<Props> = (props) => {\r\n\r\n    const [isEditable, setIsEditable] = useState(false);\r\n    const [harmTruthmaker, setHarmTruthmaker] = useState(props.hazard.harmTruthmaker);\r\n    const [description, setDescription] = useState(props.hazard.description);\r\n\r\n    const editHazard = () => {\r\n        if(harmTruthmaker !== props.hazard.harmTruthmaker ||\r\n            description !== props.hazard.description) {\r\n                const hazard = {\r\n                    ...props.hazard,\r\n                    harmTruthmaker: harmTruthmaker,\r\n                    description: description\r\n                };\r\n        \r\n                props.hazardEdited(hazard);\r\n        }\r\n        \r\n        setIsEditable(false);\r\n    };\r\n\r\n    return ( \r\n        <TableRow key={props.index}>\r\n            <StyledTableCell>\r\n                <HazardId hazard={props.hazard} />\r\n            </StyledTableCell>\r\n            <StyledTableCell>\r\n                {props.hazard.mishapVictim.name}\r\n                <br />\r\n                ({props.hazard.mishapVictimEnvObj.name})\r\n            </StyledTableCell>\r\n            <StyledTableCell>{props.hazard.exposure.name}</StyledTableCell>\r\n            <StyledTableCell>\r\n                {props.hazard.hazardElement.name}\r\n                <br />\r\n                ({props.hazard.hazardElementEnvObj.name})\r\n            </StyledTableCell>\r\n            <StyledTableCell>\r\n                {isEditable\r\n                ? <TextField\r\n                required\r\n                autoFocus\r\n                defaultValue={props.hazard.harmTruthmaker}\r\n                margin='none'\r\n                type='text'\r\n                onChange={(ev) => setHarmTruthmaker(ev.target.value)}\r\n                autoComplete='off'\r\n                />\r\n                : props.hazard.harmTruthmaker}\r\n            </StyledTableCell>\r\n            <StyledTableCell>\r\n                {isEditable\r\n                ? <TextField\r\n                required\r\n                defaultValue={props.hazard.description}\r\n                margin='none'\r\n                fullWidth\r\n                type='text'\r\n                onChange={(ev) => setDescription(ev.target.value)}\r\n                autoComplete='off'\r\n                />\r\n                : props.hazard.description}\r\n            </StyledTableCell>\r\n            <StyledTableCell>\r\n                {isEditable \r\n                ? <IconButton size='small' onClick={() => editHazard()}><Save /></IconButton>\r\n                : <IconButton size='small' onClick={() => setIsEditable(true)}><Edit /></IconButton>\r\n                }\r\n                <IconButton\r\n                    size='small'\r\n                    onClick={() => props.hazardDeleted(props.index)}\r\n                >\r\n                    <Delete />\r\n                </IconButton>\r\n            </StyledTableCell>\r\n        </TableRow>\r\n    );\r\n};\r\n\r\nexport default HazardsRow;","import React from 'react';\r\nimport { TableContainer, Table, TableRow, TableCell, TableBody, TableHead, withStyles, createStyles, makeStyles } from '@material-ui/core';\r\nimport Hazard from '../../entities/hazard-population/hazard';\r\nimport HazardsRow from './hazard-row';\r\n\r\ninterface Props {\r\n    hazards: Hazard[];\r\n    hazardEdited: (item: Hazard) => void;\r\n    hazardDeleted: (id: number) => void;\r\n}\r\n\r\nconst StyledTableCell = withStyles(theme =>\r\n    createStyles({\r\n        sizeSmall: {\r\n            padding: theme.spacing(1)\r\n        }\r\n    })\r\n)(TableCell);\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    id: {\r\n        width: '7%'\r\n    },\r\n    mishapVictim: {\r\n        width: '15%'\r\n    },\r\n    exposure: {\r\n        width: '10%'\r\n    },\r\n    hazardElement: {\r\n        width: '15%'\r\n    },\r\n    harmTruthmaker: {\r\n        width: '15%'\r\n    },\r\n    actions: {\r\n        width: '10%'\r\n    }\r\n}));\r\n\r\n\r\nconst HazardsTable: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <TableContainer>\r\n            <Table size='small'>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell className={classes.id}>\r\n                            ID\r\n                        </StyledTableCell>\r\n                        <StyledTableCell className={classes.mishapVictim}>\r\n                            Mishap Victim<br />(Env Obj)\r\n                        </StyledTableCell>\r\n                        <StyledTableCell className={classes.exposure}>\r\n                            Exposure\r\n                        </StyledTableCell>\r\n                        <StyledTableCell className={classes.hazardElement}>\r\n                            Hazard Element<br />(Env Obj)\r\n                        </StyledTableCell>\r\n                        <StyledTableCell className={classes.harmTruthmaker}>\r\n                            Harm TruthMaker\r\n                        </StyledTableCell>\r\n                        <StyledTableCell>\r\n                            Hazard Description\r\n                        </StyledTableCell>\r\n                        <StyledTableCell className={classes.actions} />\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {props.hazards.length === 0 ?\r\n                        <TableRow>\r\n                            <TableCell colSpan={7} align='center'>\r\n                                No hazards identified\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        :\r\n                        props.hazards\r\n                            .sort((a, b) => a.id - b.id)\r\n                            .map((hazard, index) => (\r\n                                <HazardsRow \r\n                                hazard={hazard}\r\n                                index={index}\r\n                                hazardEdited={props.hazardEdited}\r\n                                hazardDeleted={props.hazardDeleted}\r\n                                />\r\n                            ))\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default HazardsTable;\r\n","import React, { useState } from 'react';\r\nimport { MenuItem, TableRow, TableCell, FormControl, Select, InputLabel, TextField, IconButton, makeStyles } from '@material-ui/core';\r\nimport { Add } from '@material-ui/icons';\r\nimport { PossibleHazard } from '../../entities/hazard-population/possible-hazard';\r\nimport Hazard from '../../entities/hazard-population/hazard';\r\n\r\ninterface Props {\r\n    template: PossibleHazard;\r\n    nextHazardId: number;\r\n    hazardCreated: (hazard: Hazard) => void;\r\n}\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    divide: {\r\n        paddingRight: theme.spacing(2)\r\n    },\r\n    select: {\r\n        width: '220px'\r\n    }\r\n}));\r\n\r\nconst HazardCreateDetails: React.FC<Props> = (props) => {\r\n    const classes = useStyle();\r\n\r\n    let hazardElementEnvObj = '';\r\n    if (props.template.hazardElementEnvObjs.length === 1) {\r\n        hazardElementEnvObj = props.template.hazardElementEnvObjs[0].object.id;\r\n    }\r\n    const [envObj, setEnvObj] = useState(hazardElementEnvObj);\r\n    const [harmTruthmaker, setHarmTruthmaker] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const createHazard = (ev: React.FormEvent<HTMLFormElement>) => {\r\n        const form = ev.currentTarget;\r\n        form.reset();\r\n        ev.preventDefault();\r\n        const hazardElementEnvObj = props.template.hazardElementEnvObjs\r\n            .find(e => e.object.id === envObj);\r\n        if (!hazardElementEnvObj) {\r\n            return;\r\n        }\r\n\r\n        const hazard = {\r\n            id: props.nextHazardId,\r\n            harmTruthmaker,\r\n            description,\r\n            mishapVictim: {\r\n                id: props.template.mishapVictim.id,\r\n                name: props.template.mishapVictim.name\r\n            },\r\n            mishapVictimEnvObj: {\r\n                id: props.template.mishapVictimEnvObj.object.id,\r\n                name: props.template.mishapVictimEnvObj.object.name\r\n            },\r\n            exposure: {\r\n                id: props.template.exposure.object.id,\r\n                name: props.template.exposure.object.name\r\n            },\r\n            hazardElement: {\r\n                id: props.template.hazardElement.object.id,\r\n                name: props.template.hazardElement.object.name\r\n            },\r\n            hazardElementEnvObj: {\r\n                id: hazardElementEnvObj.object.id,\r\n                name: hazardElementEnvObj.object.name\r\n            }\r\n        };\r\n        props.hazardCreated(hazard);\r\n    };\r\n\r\n    let selectOptions = props.template.hazardElementEnvObjs\r\n        .sort((a, b) => a.object.name.localeCompare(b.object.name))\r\n        .map((item, index) => (\r\n            <MenuItem key={index} value={item.object.id}>\r\n                {item.object.name}\r\n            </MenuItem>));\r\n    if (props.template.hazardElementEnvObjs.length === 0) {\r\n        selectOptions = [(<MenuItem key={-1} value='' disabled>Nothing found</MenuItem>)];\r\n    }\r\n\r\n    return (\r\n        <TableRow>\r\n            <TableCell colSpan={3}>\r\n                <form action='#' onSubmit={createHazard}>\r\n                    <FormControl className={classes.divide}>\r\n                        <TextField\r\n                            required\r\n                            autoFocus\r\n                            margin='none'\r\n                            type='text'\r\n                            onChange={(ev) => setHarmTruthmaker(ev.target.value)}\r\n                            label='Harm Truthmaker'\r\n                            autoComplete='off'\r\n                            multiline\r\n                            rowsMax={4}\r\n                        />\r\n                    </FormControl>\r\n                    <FormControl className={classes.divide}>\r\n                        <TextField\r\n                            required\r\n                            margin='none'\r\n                            type='text'\r\n                            onChange={(ev) => setDescription(ev.target.value)}\r\n                            label='Hazard Description'\r\n                            autoComplete='off'\r\n                            multiline\r\n                            rowsMax={4}\r\n                        />\r\n                    </FormControl>\r\n                    <FormControl className={classes.select}>\r\n                        <InputLabel id='label-select-env-obj'>\r\n                            Hazard Evement Env Obj\r\n                            </InputLabel>\r\n                        <Select\r\n                            required\r\n                            margin='none'\r\n                            labelId='label-select-env-obj'\r\n                            value={hazardElementEnvObj}\r\n                            onChange={(ev) => setEnvObj(ev.target.value as string)}\r\n                        >\r\n                            {selectOptions}\r\n                        </Select>\r\n                    </FormControl>\r\n                    <IconButton type='submit' edge='end' title='Create'>\r\n                        <Add />\r\n                    </IconButton>\r\n                </form>\r\n            </TableCell>\r\n        </TableRow>\r\n    );\r\n};\r\n\r\nexport default HazardCreateDetails;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { TableRow, TableCell, TableContainer, Table, TableHead, TableBody, withStyles, createStyles, Theme, Grid, Typography, makeStyles } from '@material-ui/core';\r\nimport { NodeSingular, EdgeSingular, SingularElementReturnValue } from 'cytoscape';\r\n\r\nimport { PossibleHazard, ConnectionToObject } from '../../entities/hazard-population/possible-hazard';\r\nimport Hazard from '../../entities/hazard-population/hazard';\r\nimport HazardCreateDetails from './hazard-create-details';\r\nimport { getRole, getSystemObject, getConnection } from '../../entities/graph/element-utilities';\r\nimport { isMishapVictim, MishapVictim } from '../../entities/system-description/role';\r\n\r\ninterface Props {\r\n    node: NodeSingular;\r\n    nextHazardId: number;\r\n    hazardCreated: (item: Hazard) => void;\r\n}\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: theme.palette.grey[200],\r\n            cursor: 'pointer'\r\n        }\r\n    })\r\n)(TableRow);\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    header: {\r\n        marginLeft: theme.spacing(2)\r\n    }\r\n}));\r\n\r\n\r\nconst HazardCreate: React.FC<Props> = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [template, setTemplate] = useState<PossibleHazard | null>(null);\r\n    const [possibleHazards, setPossibleHazards] = useState<PossibleHazard[]>([]);\r\n\r\n    useEffect(() => {\r\n        const mishapVictim = getRole(props.node);\r\n        if (!mishapVictim || !isMishapVictim(mishapVictim)) {\r\n            throw new Error('Entity passed is not a mishap victim');\r\n        }\r\n\r\n        const findPossibleHazards = (mishapVictim: MishapVictim) => {\r\n            let result: PossibleHazard[] = [];\r\n            const victimKinds = props.node.incomers();\r\n            const relators = props.node.outgoers();\r\n            const hazardRoles = relators.incomers();\r\n\r\n            const hazardElementsEnvObjs: ConnectionToObject[] = [];\r\n            const hazardKinds = hazardRoles.incomers();\r\n            for (let i = 0; i < hazardKinds.length; i++) {\r\n                const envObj = getEntityPair(hazardKinds[i], true);\r\n                if (envObj) {\r\n                    hazardElementsEnvObjs.push(envObj);\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < victimKinds.length; i++) {\r\n                const mishapVictimEnvObj = getEntityPair(victimKinds[i], true);\r\n                if (!mishapVictimEnvObj) {\r\n                    continue;\r\n                }\r\n                for (let j = 0; j < relators.length; j++) {\r\n                    const exposure = getEntityPair(relators[j], false);\r\n                    if (!exposure) {\r\n                        continue;\r\n                    }\r\n                    for (let k = 0; k < hazardRoles.length; k++) {\r\n                        const hazardElement = getEntityPair(hazardRoles[k], true);\r\n                        if (!hazardElement) {\r\n                            continue;\r\n                        }\r\n                        result.push({\r\n                            mishapVictim,\r\n                            mishapVictimEnvObj,\r\n                            exposure,\r\n                            hazardElement,\r\n                            hazardElementEnvObjs: hazardElementsEnvObjs\r\n                                .filter(e => e.connection.target === hazardElement.object.id)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n\r\n        const getEntityPair = (\r\n            ele: SingularElementReturnValue | (NodeSingular & EdgeSingular),\r\n            takeSource: boolean\r\n        ) => {\r\n            if (ele.isEdge()) {\r\n                const node = takeSource ? ele.source() : ele.target();\r\n                const object = getSystemObject(node);\r\n                const connection = getConnection(ele);\r\n                if (object && connection) {\r\n                    return { object, connection };\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        setPossibleHazards(findPossibleHazards(mishapVictim));\r\n    }, [props.node]);\r\n\r\n    const renderDetailsForm = (possibleHazard: PossibleHazard) => {\r\n        if (template !== possibleHazard) {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n\r\n        return (\r\n            <HazardCreateDetails\r\n                template={template}\r\n                nextHazardId={props.nextHazardId}\r\n                hazardCreated={props.hazardCreated}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Typography variant='caption' className={classes.header}>\r\n                        Select a table row to add\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <TableContainer>\r\n                <Table size='small'>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Mishap Victim (Env Obj)</TableCell>\r\n                            <TableCell>Exposure</TableCell>\r\n                            <TableCell>Hazard Element</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {possibleHazards.length === 0 ?\r\n                            <TableRow>\r\n                                <TableCell colSpan={3} align='center'>\r\n                                    No possible hazards found\r\n                            </TableCell>\r\n                            </TableRow>\r\n                            :\r\n                            possibleHazards.map((hazard, index) => (\r\n                                <React.Fragment key={index}>\r\n                                    <StyledTableRow onClick={() => setTemplate(hazard)} >\r\n                                        <TableCell>\r\n                                            {hazard.mishapVictim.name} ({hazard.mishapVictimEnvObj.object.name})\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {hazard.exposure.object.name}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {hazard.hazardElement.object.name}\r\n                                        </TableCell>\r\n                                    </StyledTableRow>\r\n                                    {renderDetailsForm(hazard)}\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default HazardCreate;\r\n","import React from 'react';\r\nimport { makeStyles, Typography } from '@material-ui/core';\r\nimport { NodeSingular } from 'cytoscape';\r\n\r\nimport { isMishapVictim } from '../../entities/system-description/role';\r\nimport { getRole } from '../../entities/graph/element-utilities';\r\nimport Hazard from '../../entities/hazard-population/hazard';\r\nimport HazardsTable from './hazards-table';\r\nimport HazardCreate from './hazard-create';\r\nimport CornerFab from '../shared/corner-fab';\r\n\r\ninterface Props {\r\n    node: NodeSingular;\r\n    hazards: Hazard[];\r\n    nextHazardId: number;\r\n    hazardCreated: (hazard: Hazard) => void;\r\n    hazardEdited: (hazard: Hazard) => void;\r\n    hazardDeleted: (id: number) => void;\r\n    close: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    header: {\r\n        marginLeft: theme.spacing(2)\r\n    },\r\n    tableGutter: {\r\n        marginBottom: theme.spacing(2)\r\n    },\r\n    fabSpace: {\r\n        marginBottom: theme.spacing(2) + 40\r\n    }\r\n}));\r\n\r\nconst VictimHazards: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const mishapVictim = getRole(props.node);\r\n    if (!mishapVictim || !isMishapVictim(mishapVictim)) {\r\n        throw new Error('Entity passed is not a mishap victim');\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h6\" color=\"textSecondary\" className={classes.header}>\r\n                Possible Harms\r\n            </Typography>\r\n            <Typography variant=\"body1\" className={classes.header} gutterBottom>\r\n                {mishapVictim.possibleHarms.join(', ')}\r\n            </Typography>\r\n            <Typography variant=\"h6\" color=\"textSecondary\" className={classes.header}>\r\n                Hazards\r\n            </Typography>\r\n            <HazardsTable\r\n                hazards={props.hazards}\r\n                hazardEdited={props.hazardEdited}\r\n                hazardDeleted={props.hazardDeleted}\r\n            />\r\n            <div className={classes.tableGutter}></div>\r\n            <Typography variant='h6' color='textSecondary' className={classes.header}>\r\n                Add New Hazard\r\n            </Typography>\r\n            <HazardCreate\r\n                hazardCreated={props.hazardCreated}\r\n                nextHazardId={props.nextHazardId}\r\n                node={props.node}\r\n            />\r\n            <div className={classes.fabSpace}></div>\r\n            <CornerFab onClick={props.close} >\r\n                Back\r\n            </CornerFab>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default VictimHazards;\r\n","import React, { useState } from 'react';\r\nimport { EventObject, NodeSingular, Core } from 'cytoscape';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nimport { SystemDescription } from '../../entities/system-model';\r\nimport GraphElementsFactoryMishapVictims from '../../entities/graph/graph-elements-factory-mishap-victims';\r\nimport Graph from '../graph/graph';\r\nimport { isMishapVictim } from '../../entities/system-description/role';\r\nimport CornerCard from '../shared/corner-card';\r\nimport { getRole } from '../../entities/graph/element-utilities';\r\n\r\ninterface Props {\r\n    system: SystemDescription;\r\n    victimSelected: (node: NodeSingular) => void;\r\n    cyInitialized: (cy: Core) => void;\r\n}\r\n\r\nconst GraphView: React.FC<Props> = (props) => {\r\n\r\n    const [isVictimPointed, setIsVictimPointed] = useState(false);\r\n\r\n    const getMishapVictimFromEvent = (event: EventObject) => {\r\n        const ele: NodeSingular = event.target.element();\r\n        const role = getRole(ele);\r\n        if (role && isMishapVictim(role)) {\r\n            return role;\r\n        }\r\n    }\r\n\r\n    const checkVictimPointed = (event: EventObject) => {\r\n        setIsVictimPointed(!!getMishapVictimFromEvent(event));\r\n    }\r\n\r\n    const selectVictim = (event: EventObject) => {\r\n        const mishapVictim = getMishapVictimFromEvent(event);\r\n        if (mishapVictim) {\r\n            props.victimSelected(event.target);\r\n        }\r\n    };\r\n\r\n    const elementsFactory = new GraphElementsFactoryMishapVictims();\r\n    const elements = elementsFactory.mapSystemDescription(props.system);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Graph\r\n                elements={elements}\r\n                cursorStyle={isVictimPointed ? 'pointer' : 'default'}\r\n                mouseEnteredNode={checkVictimPointed}\r\n                mouseLeftNode={checkVictimPointed}\r\n                nodeClicked={selectVictim}\r\n                cy={props.cyInitialized}\r\n            />\r\n            <CornerCard>\r\n                <Typography>\r\n                    Click on a mishap victim to populate hazards\r\n                </Typography>\r\n                <Typography variant='caption'>\r\n                    Mishap victims are marked yellow\r\n                </Typography>\r\n            </CornerCard>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default GraphView;\r\n","import React, { useState } from 'react';\r\nimport { makeStyles, Typography, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\n\r\nimport Hazard from '../../entities/hazard-population/hazard';\r\nimport HazardsTable from './hazards-table';\r\nimport { NodeSingular } from 'cytoscape';\r\nimport { MishapVictim } from '../../entities/system-description/role';\r\nimport HazardCreate from './hazard-create';\r\n\r\ninterface Props {\r\n    hazards: Hazard[];\r\n    mishapVictims: MishapVictim[];\r\n    getNode: (id: string) => NodeSingular | null;\r\n    nextHazardId: number;\r\n    hazardCreated: (item: Hazard) => void;\r\n    hazardEdited: (item: Hazard) => void;\r\n    hazardDeleted: (id: number) => void;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    header: {\r\n        marginLeft: theme.spacing(2)\r\n    },\r\n    tableGutter: {\r\n        marginBottom: theme.spacing(2)\r\n    },\r\n    select: {\r\n        marginLeft: theme.spacing(2),\r\n        width: '220px'\r\n    }\r\n}));\r\n\r\nconst TableView: React.FC<Props> = (props: Props) => {\r\n    const classes = useStyles();\r\n\r\n    const [mishapVictimId, setMishapVictimId] = useState('');\r\n    const [mishapVictimNode, setMishapVictimNode] = useState<NodeSingular | null>(null);\r\n\r\n    const selectMishapVictim = (ev: React.ChangeEvent<{ value: unknown }>) => {\r\n        const id = ev.target.value as string;\r\n        const node = props.getNode(id);\r\n        if (node) {\r\n            setMishapVictimId(id);\r\n            setMishapVictimNode(node);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h6\" color=\"textSecondary\" className={classes.header}>\r\n                Hazards\r\n            </Typography>\r\n            <HazardsTable\r\n                hazards={props.hazards}\r\n                hazardEdited={props.hazardEdited}\r\n                hazardDeleted={props.hazardDeleted}\r\n            />\r\n            <div className={classes.tableGutter}></div>\r\n            <Typography variant='h6' color='textSecondary' className={classes.header}>\r\n                Add New Hazard\r\n            </Typography>\r\n            <FormControl className={classes.select}>\r\n                <InputLabel id='label-select-mishap-victim'>\r\n                    Select mishap victim\r\n                </InputLabel>\r\n                <Select\r\n                    margin='none'\r\n                    labelId='label-select-mishap-victim'\r\n                    onChange={selectMishapVictim}\r\n                    value={mishapVictimId}\r\n                >\r\n                    {props.mishapVictims\r\n                        .sort((a, b) => a.name.localeCompare(b.name))\r\n                        .map((item, index) => (\r\n                            <MenuItem key={index} value={item.id}>\r\n                                {item.name}\r\n                            </MenuItem>))}\r\n                </Select>\r\n            </FormControl>\r\n            {mishapVictimNode ?\r\n                <React.Fragment>\r\n                    <HazardCreate\r\n                        hazardCreated={props.hazardCreated}\r\n                        nextHazardId={props.nextHazardId}\r\n                        node={mishapVictimNode}\r\n                    />\r\n                </React.Fragment>\r\n                :\r\n                undefined\r\n            }\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default TableView;\r\n","import React, { useState, useRef } from 'react';\r\nimport { NodeSingular, Core } from 'cytoscape';\r\n\r\nimport { SystemModel } from '../../entities/system-model';\r\nimport VictimHazards from './victim-hazards';\r\nimport GraphView from './graph-view';\r\nimport TableView from './table-view';\r\nimport Hazard from '../../entities/hazard-population/hazard';\r\nimport { getSystemObject } from '../../entities/graph/element-utilities';\r\nimport CornerFab from '../shared/corner-fab';\r\nimport { TableChart, BubbleChart } from '@material-ui/icons';\r\nimport { isMishapVictim } from '../../entities/system-description/role';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\ninterface Props {\r\n    system: SystemModel;\r\n    systemUpdated: (system: SystemModel) => void;\r\n}\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    fabSpace: {\r\n        height: theme.spacing(2) + 40\r\n    }\r\n}));\r\n\r\nconst HazardPopulation: React.FC<Props> = (props) => {\r\n    const classes = useStyle();\r\n\r\n    const [isSummarySelected, setIsSummarySelected] = useState(false);\r\n    const [selectedVictim, setSelectedVictim] = useState<NodeSingular | null>(null);\r\n\r\n    const cyRef = useRef<Core>();\r\n\r\n    const addHazard = (hazard: Hazard) => props.systemUpdated({\r\n        ...props.system,\r\n        ...{\r\n            hazards: props.system.hazards.concat(hazard),\r\n            nextHazardId: props.system.nextHazardId + 1\r\n        }\r\n    });\r\n    \r\n    const editHazard = (hazard: Hazard) => props.systemUpdated({\r\n        ...props.system,\r\n        ...{ hazards: props.system.hazards.map(h => {\r\n            if(h.id === hazard.id) {\r\n                return hazard;\r\n            }\r\n            return h;\r\n        })}\r\n    });\r\n\r\n    const removeHazard = (id: number) => props.systemUpdated({\r\n        ...props.system,\r\n        ...{ hazards: props.system.hazards.filter(e => e.id !== id) }\r\n    });\r\n\r\n    const findNode = (id: string) => {\r\n        if (!cyRef.current) {\r\n            return null;\r\n        }\r\n        const ele = cyRef.current.$(`#${id}`);\r\n        if (ele.isNode()) {\r\n            return ele;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    if (selectedVictim) {\r\n        const mishapVictim = getSystemObject(selectedVictim);\r\n        if (!mishapVictim) {\r\n            throw new Error('Selected node does not represent a mishap victim');\r\n        }\r\n        return <VictimHazards\r\n            node={selectedVictim}\r\n            hazards={props.system.hazards.filter(e => e.mishapVictim.id === mishapVictim.id)}\r\n            nextHazardId={props.system.nextHazardId}\r\n            hazardCreated={addHazard}\r\n            hazardEdited={editHazard}\r\n            hazardDeleted={removeHazard}\r\n            close={() => setSelectedVictim(null)}\r\n        />;\r\n    }\r\n\r\n    if (isSummarySelected) {\r\n        return (\r\n            <React.Fragment>\r\n                <TableView\r\n                    hazards={props.system.hazards}\r\n                    mishapVictims={props.system.roles.filter(e => isMishapVictim(e))}\r\n                    getNode={findNode}\r\n                    hazardCreated={addHazard}\r\n                    hazardEdited={editHazard}\r\n                    hazardDeleted={removeHazard}\r\n                    nextHazardId={props.system.nextHazardId}\r\n                />\r\n                <div className={classes.fabSpace} />\r\n                <CornerFab onClick={() => setIsSummarySelected(false)}>\r\n                    <BubbleChart />\r\n                    Graph View\r\n                </CornerFab>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GraphView\r\n                system={props.system}\r\n                victimSelected={setSelectedVictim}\r\n                cyInitialized={cy => cyRef.current = cy}\r\n            />\r\n            <CornerFab onClick={() => setIsSummarySelected(true)}>\r\n                <TableChart />\r\n                Table View\r\n            </CornerFab>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default HazardPopulation;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { Typography, IconButton, TextField, makeStyles } from '@material-ui/core';\r\nimport { Edit, Done, Clear } from '@material-ui/icons';\r\n\r\ninterface Props {\r\n    name: string;\r\n    nameUpdated: (name: string) => void;\r\n}\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    input: {\r\n        '& .MuiInput-input': {\r\n            color: theme.palette.common.white,\r\n        }\r\n    },\r\n    buttonGutter: {\r\n        paddingLeft: theme.spacing(1),\r\n    }\r\n}));\r\n\r\nconst ProjectName: React.FC<Props> = (props) => {\r\n    const classes = useStyle();\r\n\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [name, setName] = useState(props.name);\r\n\r\n    const inputRef = useRef<HTMLInputElement>();\r\n\r\n    useEffect(() => {\r\n        setName(props.name);\r\n    }, [props.name]);\r\n\r\n    const cancelEdit = () => {\r\n        setName(props.name);\r\n        setIsEditing(false);\r\n        inputRef.current = undefined;\r\n    };\r\n\r\n    const confirmEdit = (ev: React.FormEvent<HTMLFormElement>) => {\r\n        ev.preventDefault();\r\n        setIsEditing(false);\r\n        props.nameUpdated(name);\r\n        inputRef.current = undefined;\r\n    };\r\n\r\n    const initInput = (input: HTMLInputElement | null) => {\r\n        if (input && !inputRef.current) {\r\n            input.select();\r\n            inputRef.current = input;\r\n        }\r\n    }\r\n\r\n    if (isEditing) {\r\n        return (\r\n            <form onReset={cancelEdit} onSubmit={confirmEdit} >\r\n                <TextField\r\n                    className={classes.input}\r\n                    type='text'\r\n                    required\r\n                    autoFocus\r\n                    onChange={ev => setName(ev.target.value)}\r\n                    value={name}\r\n                    inputRef={ref => initInput(ref)}\r\n                />\r\n                <IconButton type='submit' size='small' className={classes.buttonGutter} >\r\n                    <Done />\r\n                </IconButton>\r\n                <IconButton type='reset' size='small' >\r\n                    <Clear />\r\n                </IconButton>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Typography variant=\"h6\">\r\n            {name}\r\n            <IconButton\r\n                size='small'\r\n                onClick={() => setIsEditing(true)}\r\n                title='Edit project name'\r\n                className={classes.buttonGutter}\r\n            >\r\n                <Edit />\r\n            </IconButton>\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default ProjectName;\r\n","import React, { useState } from 'react';\r\nimport Hazard from '../../../entities/hazard-population/hazard';\r\nimport { TableRow, TableCell, Button } from '@material-ui/core';\r\nimport HazardId from '../../hazard-population/hazard-id';\r\nimport { HazardCategory } from '../../../entities/hazard-description-categorization/hazard-category';\r\nimport CategorizationWizard from './categorization-wizard';\r\n\r\ninterface Props {\r\n    hazard: Hazard;\r\n    hazardUpdated: (hazard: Hazard) => void;\r\n}\r\n\r\nconst OchStep1TableRow: React.FC<Props> = (props) => {\r\n\r\n    const [isCategorizing, setIsCategorizing] = useState(false);\r\n\r\n    const updateCategory = (category: HazardCategory) => {\r\n        setIsCategorizing(false);\r\n        props.hazardUpdated({ ...props.hazard, ...{ category: category } });\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow>\r\n                <TableCell>\r\n                    <HazardId hazard={props.hazard} />\r\n                </TableCell>\r\n                <TableCell>{props.hazard.description}</TableCell>\r\n                <TableCell>\r\n                    {props.hazard.category ? props.hazard.category : '-'}\r\n                </TableCell>\r\n                <TableCell>\r\n                    <Button variant='outlined' onClick={() => setIsCategorizing(true)}>\r\n                        Categorize\r\n                </Button>\r\n                </TableCell>\r\n            </TableRow>\r\n            {isCategorizing ? \r\n                <TableRow>\r\n                    <TableCell colSpan={4}>\r\n                        <CategorizationWizard\r\n                            cancel={() => setIsCategorizing(false)}\r\n                            complete={updateCategory}\r\n                        />\r\n                    </TableCell>\r\n                </TableRow>\r\n                :\r\n                undefined}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default OchStep1TableRow;\r\n","import React from 'react';\r\nimport Hazard from '../../../entities/hazard-population/hazard';\r\nimport { TableContainer, TableBody, TableRow, Table, TableHead, TableCell } from '@material-ui/core';\r\nimport OchStep1TableRow from './table-row';\r\n\r\ninterface Props {\r\n    hazards: Hazard[];\r\n    systemUpdated: (system: { hazards: Hazard[] }) => void;\r\n}\r\n\r\nconst OchStep1: React.FC<Props> = (props) => {\r\n\r\n    const updateHazard = (hazard: Hazard) => {\r\n        props.systemUpdated({ hazards: props.hazards.map(e => e.id === hazard.id ? hazard : e) });\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableContainer>\r\n                <Table size='small'>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>\r\n                                ID\r\n                             </TableCell>\r\n                            <TableCell>\r\n                                Hazard Description\r\n                             </TableCell>\r\n                            <TableCell>\r\n                                Category\r\n                             </TableCell>\r\n                            <TableCell />\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {props.hazards.length === 0 ?\r\n                            <TableRow>\r\n                                <TableCell colSpan={4}>\r\n                                    No hazards identified\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            :\r\n                            props.hazards.map((hazard, index) => (\r\n                                <OchStep1TableRow\r\n                                    key={index}\r\n                                    hazard={hazard}\r\n                                    hazardUpdated={updateHazard}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default OchStep1;\r\n","import React, { useState } from 'react';\r\nimport { useBeforeunload } from 'react-beforeunload';\r\nimport 'typeface-roboto';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Toolbar, AppBar, Grid, Drawer } from '@material-ui/core';\r\n\r\nimport ErrorBoundary from './components/error-boundary';\r\nimport { SystemModel } from './entities/system-model';\r\nimport Meny from './components/meny/meny';\r\nimport ProgressSteps from './components/meny/progress-steps';\r\nimport { getFirstStepId, flowSteps } from './entities/meny/flow';\r\nimport MishapVictimIdentification from './components/mishap-victim-identification/mishap-victim-identification';\r\nimport SdfStep1 from './components/system-description/sdf-step-1';\r\nimport SdfStep2 from './components/system-description/sdf-step-2';\r\nimport SdfStep3 from './components/system-description/sdf-step-3';\r\nimport SdfStep4 from './components/system-description/sdf-step-4';\r\nimport HazardPopulation from './components/hazard-population/hazard-population';\r\nimport ProjectName from './components/project-name';\r\nimport OchStep1 from './components/hazard-description-categorization/och-step-1/och-step-1';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: theme.spacing(0, 1),\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n    },\r\n    appTitle: {\r\n        textAlign: 'center'\r\n    },\r\n}));\r\n\r\nconst defaultModel = {\r\n    projectName: 'Hazard Ontology',\r\n    currentStep: getFirstStepId(),\r\n    lastCompletedStep: getFirstStepId(),\r\n    kinds: [],\r\n    roles: [],\r\n    relators: [],\r\n    systemObjectConnections: [],\r\n    subsystems: [],\r\n    hazards: [],\r\n    nextHazardId: 1\r\n};\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const [systemModel, setSystemModel] = useState<SystemModel>(defaultModel);\r\n    const [hasUnsavedChanges, setHasUnsaveChanges] = useState(false);\r\n\r\n    useBeforeunload((ev) => {\r\n        if (hasUnsavedChanges) {\r\n            ev.preventDefault();\r\n        }\r\n    });\r\n\r\n    const openFile = (model: SystemModel) => {\r\n        setSystemModel(defaultModel); // reset state first to prevent collisions with opened model\r\n        setSystemModel(model);\r\n        setHasUnsaveChanges(false);\r\n    };\r\n\r\n    const saveFile = () => {\r\n        setHasUnsaveChanges(false);\r\n        return systemModel;\r\n    };\r\n\r\n    const updateSystemModel = <T extends {}>(model: T, needsSaving: boolean = true) => {\r\n        if (needsSaving) {\r\n            setHasUnsaveChanges(true);\r\n        }\r\n        setSystemModel({ ...systemModel, ...model });\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    const getMainContent = () => {\r\n        switch (systemModel.currentStep) {\r\n            case flowSteps.SDF_1:\r\n                return <SdfStep1\r\n                    system={systemModel}\r\n                    systemUpdated={updateSystemModel}\r\n                />\r\n            case flowSteps.SDF_2:\r\n                return <SdfStep2\r\n                    system={systemModel}\r\n                    systemUpdated={updateSystemModel}\r\n                />\r\n            case flowSteps.SDF_3:\r\n                return <SdfStep3\r\n                    system={systemModel}\r\n                    systemUpdated={updateSystemModel}\r\n                />\r\n            case flowSteps.SDF_4:\r\n                return <SdfStep4\r\n                    system={systemModel}\r\n                    systemUpdated={updateSystemModel}\r\n                />\r\n            case flowSteps.OHI_2:\r\n                return <MishapVictimIdentification\r\n                    system={systemModel}\r\n                    possibleHarmsUpdated={updateSystemModel}\r\n                />;\r\n            case flowSteps.OHI_3:\r\n                return <HazardPopulation\r\n                    system={systemModel}\r\n                    systemUpdated={updateSystemModel}\r\n                />;\r\n            case flowSteps.OCH_1:\r\n                return <OchStep1\r\n                    hazards={systemModel.hazards}\r\n                    systemUpdated={updateSystemModel}\r\n                />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <CssBaseline />\r\n\r\n            <div className={classes.root}>\r\n                <AppBar\r\n                    position=\"fixed\"\r\n                    className={classes.appBar}\r\n                >\r\n                    <Toolbar variant=\"dense\">\r\n                        <Grid container justify=\"space-evenly\">\r\n                            <Grid item xs>\r\n                                <Meny\r\n                                    openFile={openFile}\r\n                                    saveFile={saveFile}\r\n                                    hasUnsavedChanges={hasUnsavedChanges}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={6} className={classes.appTitle}>\r\n                                <ProjectName\r\n                                    name={systemModel.projectName}\r\n                                    nameUpdated={(projectName) => updateSystemModel({ projectName })}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs>\r\n                                &nbsp;\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    className={classes.drawerOpen}\r\n                    classes={{\r\n                        paper: classes.drawerOpen\r\n                    }}\r\n                >\r\n                    <div className={classes.toolbar}></div>\r\n\r\n                    <ProgressSteps\r\n                        progress={systemModel}\r\n                        progressUpdated={updateSystemModel}\r\n                    />\r\n                </Drawer>\r\n\r\n                <main className={classes.content}>\r\n                    <div className={classes.toolbar} />\r\n                    {getMainContent()}\r\n                </main>\r\n            </div>\r\n        </ErrorBoundary>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}