{"version":3,"sources":["components/error-boundary.tsx","store/modal-dialog/actions.ts","store/modal-dialog/types.ts","store/system-model/actions.ts","store/system-model/types.ts","components/meny/open-file-button.tsx","components/meny/download-file-button.tsx","entities/meny/flow-step-id.ts","store/unsaved-changes/actions.ts","store/unsaved-changes/types.ts","components/meny/new-file-button.tsx","components/meny/meny.tsx","entities/meny/flow.ts","entities/system-description/object-types.ts","components/meny/help-text.tsx","components/meny/progress-steps.tsx","components/shared/corner-card.tsx","components/mishap-victim-identification/victim-harms.tsx","styles/graph-style.ts","entities/graph/graph-element.ts","entities/graph/collapse-api.ts","components/graph/graph-container.tsx","components/graph/graph.tsx","entities/system-description/system-description-entity.ts","entities/graph/graph-elements-factory.ts","entities/system-description/role.ts","entities/graph/graph-elements-factory-mishap-victims.ts","components/mishap-victim-identification/graph-view.tsx","components/mishap-victim-identification/harms-table-row.tsx","components/mishap-victim-identification/select-role-table-row.tsx","components/shared/corner-button-primary.tsx","components/mishap-victim-identification/table-view.tsx","components/shared/corner-fab.tsx","components/mishap-victim-identification/mishap-victim-identification.tsx","entities/system-model.ts","components/system-description/toolbar-buttons.tsx","components/system-description/node-editor.tsx","components/graph/node-popper.tsx","components/system-description/delete-element-button.tsx","entities/graph/element-utilities.ts","entities/hazard-population/hazard.ts","components/system-description/delete-connection-button.tsx","entities/hazard-description-categorization/hazard-category.ts","components/hazard-description-categorization/och-step-1/categorization-wizard.tsx","components/system-description/sdf-step-base.tsx","components/system-description/delete-system-object-button.tsx","components/system-description/delete-subsystem-button.tsx","components/system-description/edit-node-button.tsx","components/system-description/subsystem-collapse-button.tsx","components/graph/node-actions.tsx","components/system-description/sdf-step-1.tsx","components/system-description/sdf-step-2.tsx","components/system-description/sdf-step-3.tsx","components/system-description/sdf-step-4.tsx","components/hazard-population/hazard-id.tsx","components/shared/table-cell-small.ts","components/hazard-population/hazard-row.tsx","components/hazard-population/hazards-table.tsx","components/hazard-population/hazard-create-details.tsx","components/hazard-population/hazard-create.tsx","components/hazard-population/victim-hazards.tsx","components/hazard-population/graph-view.tsx","components/hazard-population/table-view.tsx","components/hazard-population/hazard-population.tsx","components/project-name.tsx","components/confirmation-dialog.tsx","components/hazard-description-categorization/och-step-1/table-row.tsx","components/hazard-description-categorization/och-step-1/och-step-1.tsx","App.tsx","store/system-model/reducers/hazards-reducer.ts","store/system-model/reducers/next-hazard-id-reducer.ts","store/system-model/reducers/subsystems-reducer.ts","store/system-model/reducers/connections-reducer.ts","store/system-model/reducers/system-object-reducer.ts","store/system-model/reducers/kinds-reducer.ts","store/system-model/reducers/roles-reducer.ts","store/system-model/reducers/relators-reducer.ts","store/system-model/system-model-reducer.ts","store/modal-dialog/reducers.ts","store/index.ts","store/unsaved-changes/reducers.ts","styles/app-theme.ts","index.tsx"],"names":["ErrorBoundary","props","state","error","this","setState","message","children","Component","showConfirmationDialog","contentText","onYes","onNo","undefined","type","payload","confirmDiscardModel","createBaseCrudAction","unsavedChanges","updateHazard","hazard","deleteHazard","updateSubsystem","subsystem","deleteSystemObject","systemObject","resetModel","addPossibleHarm","mishapVictim","harm","removePossibleHarm","hazards","dispatch","removeHarmAction","possibleHarms","length","affectedHazards","filter","e","id","forEach","h","mapDispatch","resetSystemModel","setSystemModel","model","connector","connect","hasUnsavedChanges","useStyles","makeStyles","inlineBlock","display","hidden","classes","formRef","useRef","inputRef","openSelectFileDialog","current","click","handleFileError","ev","target","Error","processFile","data","result","JSON","parse","reset","window","FileReader","FileList","ref","className","onChange","files","file","reader","onload","onerror","readAsText","readFile","accept","IconButton","title","size","color","component","onClick","FolderOpen","disabled","FlowStepId","saveChanges","systemModel","serialized","stringify","fileName","projectName","Date","toISOString","replace","element","document","createElement","setAttribute","encodeURIComponent","style","body","appendChild","removeChild","Badge","variant","invisible","SaveAlt","InsertDriveFileOutlined","Meny","Fragment","getFirstStepId","SDF_1","getFlowStepOrder","step","SDF_2","SDF_3","SDF_4","OHI_2","OHI_3","OCH_1","ObjectTypes","flow","OHI","label","OHI_1","helpText","OCH","OCH_2","OCH_3","SARE","SARE_1","SARE_2","SARE_3","CM","theme","typography","padding","appSpacing","standard","maxWidth","HelpText","useState","popoverAnchor","setPopoverAnchor","isOpen","setIsOpen","useEffect","open","edge","highlighted","Help","HelpOutline","Popover","anchorEl","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Typography","dangerouslySetInnerHTML","__html","htmlContent","paddingLeft","spacing","phase","bold","fontWeight","setCurentStep","currentStep","lastCompletedStep","List","dense","map","stage","key","ListItem","ListItemIcon","Chip","ListItemText","primary","disableTypography","renderSteps","steps","paddingClass","disablePadding","stepOrder","isInFlow","isCurrent","isEnabled","helpOpenedOnFirstVisit","button","ListItemSecondaryAction","Divider","root","position","bottom","right","zIndex","graphHelp","minWidth","CornerCard","Card","CardContent","harmAdded","harmDeleted","emptyContent","renderHarmItem","item","index","role","deletePossibleHarm","Delete","renderAddItem","action","onSubmit","form","currentTarget","elements","namedItem","value","preventDefault","createMishapVictim","TextField","required","autoFocus","margin","name","fullWidth","placeholder","autoComplete","Add","selectedRole","gutterBottom","sort","a","b","localeCompare","concat","renderContent","graphStyle","selector","kind","toString","relator","isSystemObjectData","isSubsystemData","options","animate","cueEnabled","getCollapseApi","cy","expandCollapse","useStyle","overflow","top","mixins","toolbar","minHeight","left","drawerWidth","GraphContainer","scrollHeight","scrollWidth","cytoscape","use","popper","Graph","containerSize","height","width","initCytoscape","bind","addEventListeners","resizeCanvas","handleNodeMoved","setInitialCanvasSize","collapseApi","maxX","maxY","graphContainerStyle","graph","cursor","cursorStyle","stylesheet","userZoomingEnabled","userPanningEnabled","boundingBox","nodes","renderedBoundingBox","Math","max","y2","x2","event","node","x","y","nodeMoved","ele","isNode","on","isCollapsed","collapse","mouseEnteredNode","mouseLeftNode","nodeClicked","zoom","graphClicked","useCollapseApi","initCollapseApi","React","withTheme","isSystemObject","entity","isSubsystem","GraphElementsFactory","system","mapSystemDescriptionEntities","getAllNodes","systemObjectConnections","entities","mapSystemObject","mapConnection","mapSubsystem","kinds","relators","roles","subsystems","object","hookSystemObject","group","parent","posX","posY","connection","hookConnection","source","pannable","isOriented","hookSubsystem","isRole","obj","isMishapVictim","GraphElementsFactoryMishapVictims","grabbable","push","systemDescription","getRoleFromEvent","mouseEntered","mouseLeft","selectRole","clearRoleSelection","selectedRoleId","isMouseOverRole","mapSystemDescription","find","isDefaultPrevented","chip","marginRight","TableRow","TableCell","scope","align","onDelete","deleteHarm","formControl","SelectRoleTableRow","FormControl","InputLabel","Select","labelId","roleId","roleSelected","MenuItem","colSpan","marginLeft","marginTop","marginBottom","fabOverlap","CornerButtonPrimary","Button","newlyAdded","setNewlyAdded","isSelectingRole","setIsSelectingRole","existingMishapVictims","some","n","newlyAddedMishapVictims","mishapVictims","rolesToSelect","r","TableContainer","Table","TableHead","TableBody","fab","graphAction","CornerFab","Fab","MishapVictimIdentification","isGraphView","setIsGraphView","TableChart","BubbleChart","createObjectId","prefix","getTime","ToolbarButtons","buttons","icon","text","selectEmpty","NodeEditor","parentEditor","setEntity","subsystemsAvailable","entityParent","shrink","displayEmpty","Backdrop","Dialog","entityUpdated","onReset","editCancelled","DialogContent","defaultValue","DialogActions","nodeAction","NodePopper","createRef","setPopper","destroyPopper","useCallback","off","scheduleUpdate","destroy","popperObj","content","placement","DeleteElementButton","getSystemObject","getRole","getConnection","isConnectionData","isKindInHazard","hazardElementEnvObj","mishapVictimEnvObj","isRoleInHazard","hazardElement","isRelatorInHazard","exposure","getIsSystemObjectInHazard","HazardCategory","IntermediateCategory","connectionDeleted","confirm","isTargetInHazard","subsystemCreated","subsystemUpdated","connectionCreated","systemObjectRenamed","systemObjectCreated","systemObjectUpdated","DEFAULT_POSITION","showNodeActions","hideNodeActions","createConnection","completeEditEntity","updateNodePosition","validateConnection","preventOverlap","cancelEditEntity","renderConnectionActions","isConnectionValid","actionButtonsPlacement","elementDisplayPopper","nodeConnecting","elementActions","actionElement","isEdge","renderSystemObjectActions","renderSubsystemActions","nodeConnectingDone","toolbarButtons","objectEditing","tryCreateConnection","elementDisplayPopperChanged","edgesWith","parentPosition","i","childNode","childData","childObject","objectEditingDone","allNodes","existingEntity","positionOverride","parentId","adjustedPosition","nodePosition","otherNodes","every","systemObjectDeleted","isObjectInHazard","subsystemDeleted","deleteSubsystemWithChildren","checkHazardsAndDelete","isChildless","Edit","newStateCollapsed","expand","json","pan","ExpandMore","ExpandLess","base","NodeActions","SdfStep1","startCreatingKind","startCreatingRole","startCreatingSubsystem","Link","sourceData","targetData","SdfStep2","SdfStep3","startCreatingRelator","SdfStep4","existingConnection","sourceObj","targetObj","HazardId","TableCellSmall","withStyles","createStyles","sizeSmall","HazardsRow","isEditable","setIsEditable","harmTruthmaker","setHarmTruthmaker","description","setDescription","isEmpty","string","helperText","hazardEdited","editHazard","Save","hazardDeleted","actions","selectedMishapVictim","divide","paddingRight","select","HazardCreateDetails","template","hazardElementEnvObjs","envObj","setEnvObj","selectOptions","nextHazardId","hazardCreated","multiline","rowsMax","StyledTableRow","backgroundColor","palette","grey","header","setTemplate","possibleHazards","setPossibleHazards","getEntityPair","takeSource","victimKinds","incomers","outgoers","hazardRoles","hazardElementsEnvObjs","hazardKinds","j","k","findPossibleHazards","Grid","container","xs","tableGutter","fabSpace","VictimHazards","join","close","isVictimPointed","setIsVictimPointed","getMishapVictimFromEvent","checkVictimPointed","victimSelected","cyInitialized","mishapVictimId","setMishapVictimId","mishapVictimNode","setMishapVictimNode","getNode","HazardPopulation","isSummarySelected","setIsSummarySelected","selectedVictim","setSelectedVictim","cyRef","$","nameUpdated","input","common","white","buttonGutter","isEditing","setIsEditing","setName","initInput","Done","Clear","dialog","modalDialog","disableBackdropClick","disableEscapeKeyDown","DialogContentText","CategorizationWizard","question","notSet","category","setCategory","instructions","situation","complete","initiatingCondition","mishap","initiatingEvent","CardHeader","cancel","Close","CardActions","OchStep1TableRow","isCategorizing","setIsCategorizing","hazardUpdated","appBar","drawer","drawerOpen","alignItems","justifyContent","flexGrow","appTitle","textAlign","useBeforeunload","CssBaseline","AppBar","Toolbar","justify","Drawer","paper","getMainContent","hazardsReducer","transform","getHazardTransform","nextHazardIdReducer","subsystemReducer","connectionReducer","objectId","systemObjectReducer","objectType","kindsReducer","rolesReducer","relatorsReducer","initialState","rootReducer","combineReducers","defaultTheme","createMuiTheme","appTheme","store","createStore","ReactDOM","render","ThemeProvider","getElementById"],"mappings":"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","file":"static/js/main.5258c84d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\ninterface State {\r\n    error?: Error\r\n}\r\n\r\ninterface Props {}\r\n\r\nclass ErrorBoundary extends Component<Props, State> {\r\n    constructor(props: Props) {\r\n      super(props);\r\n      this.state = {};\r\n    }\r\n\r\n    static getDerivedStateFromError(error: Error) {\r\n      // Update state so the next render will show the fallback UI.\r\n      return { error: error };\r\n    }\r\n  \r\n    componentDidCatch(error: Error) {\r\n      this.setState({ error });\r\n    }\r\n  \r\n    render() {\r\n      if (this.state.error) {\r\n        return <h1>{'ERROR: ' + this.state.error.message}</h1>;\r\n      }\r\n      return this.props.children;\r\n    }\r\n  }\r\n\r\n  export default ErrorBoundary;\r\n","import { SHOW_CONFIRMATION_DIALOG, ModalDialogActionTypes, HIDE_CONFIRMATION_DIALOG } from \"./types\";\r\n\r\nexport function showConfirmationDialog(\r\n    contentText: string,\r\n    onYes: () => void,\r\n    onNo: (() => void) | undefined = undefined\r\n): ModalDialogActionTypes {\r\n    return {\r\n        type: SHOW_CONFIRMATION_DIALOG,\r\n        payload: { contentText, onYes, onNo }\r\n    };\r\n}\r\n\r\nexport function hideConfirmationDialog(): ModalDialogActionTypes {\r\n    return {\r\n        type: HIDE_CONFIRMATION_DIALOG\r\n    };\r\n}\r\n\r\nexport function confirmDiscardModel(onYes: () => void) {\r\n    return showConfirmationDialog('You have unsaved changes that will be lost. Continue ?', onYes);\r\n}\r\n","import DialogConfirmation from \"../../entities/dialog-confirmation\";\r\n\r\nexport const SHOW_CONFIRMATION_DIALOG = 'SHOW_CONFIRMATION_DIALOG'\r\nexport const HIDE_CONFIRMATION_DIALOG = 'HIDE_CONFIRMATION_DIALOG'\r\n\r\ninterface ShowConfirmationDialogAction {\r\n    type: typeof SHOW_CONFIRMATION_DIALOG;\r\n    payload: DialogConfirmation;\r\n}\r\n\r\ninterface HideConfirmationDialogAction {\r\n    type: typeof HIDE_CONFIRMATION_DIALOG;\r\n}\r\n\r\nexport type ModalDialogActionTypes = ShowConfirmationDialogAction | HideConfirmationDialogAction\r\n","import { Action, Dispatch } from 'redux';\r\nimport { SystemModelActionTypes, CREATE_HAZARD, UPDATE_HAZARD, DELETE_HAZARD, LOAD_MODEL, RESET_MODEL, UPDATE_FLOW_STEP, ADD_POSSIBLE_HARM, REMOVE_POSSIBLE_HARM, CREATE_SUBSYSTEM, UPDATE_SUBSYSTEM, DELETE_SUBSYSTEM, CREATE_CONNECTION, DELETE_CONNECTION, CREATE_SYSTEM_OBJECT, UPDATE_SYSTEM_OBJECT, DELETE_SYSTEM_OBJECT, RENAME_SYSTEM_OBJECT, UPDATE_PROJECT_NAME } from \"./types\";\r\nimport Hazard from \"../../entities/hazard-population/hazard\";\r\nimport { SystemModel } from \"../../entities/system-model\";\r\nimport { MishapVictim } from \"../../entities/system-description/role\";\r\nimport { showConfirmationDialog } from \"../modal-dialog/actions\";\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport Connection from '../../entities/system-description/connection';\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport { FlowStepId } from '../../entities/meny/flow-step-id';\r\n\r\nfunction createBaseCrudAction<T extends string, P>(type: T, payload: P) {\r\n    return {\r\n        type,\r\n        payload,\r\n        unsavedChanges: true\r\n    };\r\n}\r\n\r\nexport function createHazard(hazard: Hazard): SystemModelActionTypes {\r\n    return createBaseCrudAction(CREATE_HAZARD, hazard);\r\n}\r\n\r\nexport function updateHazard(hazard: Hazard): SystemModelActionTypes {\r\n    return createBaseCrudAction(UPDATE_HAZARD, hazard);\r\n}\r\n\r\nexport function deleteHazard(hazard: Hazard): SystemModelActionTypes {\r\n    return createBaseCrudAction(DELETE_HAZARD, hazard);\r\n}\r\n\r\nexport function createSubsystem(subsystem: Subsystem): SystemModelActionTypes {\r\n    return createBaseCrudAction(CREATE_SUBSYSTEM, subsystem);\r\n}\r\n\r\nexport function updateSubsystem(subsystem: Subsystem): SystemModelActionTypes {\r\n    return createBaseCrudAction(UPDATE_SUBSYSTEM, subsystem);\r\n}\r\n\r\nexport function deleteSubsystem(subsystem: Subsystem): SystemModelActionTypes {\r\n    return createBaseCrudAction(DELETE_SUBSYSTEM, subsystem);\r\n}\r\n\r\nexport function createConnection(connection: Connection): SystemModelActionTypes {\r\n    return createBaseCrudAction(CREATE_CONNECTION, connection);\r\n}\r\n\r\nexport function deleteConnection(connection: Connection, target: SystemObject): SystemModelActionTypes {\r\n    return createBaseCrudAction(DELETE_CONNECTION, { connection, target });\r\n}\r\n\r\nexport function createSystemObject(systemObject: SystemObject): SystemModelActionTypes {\r\n    return createBaseCrudAction(CREATE_SYSTEM_OBJECT, systemObject);\r\n}\r\n\r\nexport function updateSystemObject(systemObject: SystemObject): SystemModelActionTypes {\r\n    return createBaseCrudAction(UPDATE_SYSTEM_OBJECT, systemObject);\r\n}\r\n\r\nexport function deleteSystemObject(systemObject: SystemObject): SystemModelActionTypes {\r\n    return createBaseCrudAction(DELETE_SYSTEM_OBJECT, systemObject);\r\n}\r\n\r\nexport function renameSystemObject(systemObject: SystemObject): SystemModelActionTypes {\r\n    return createBaseCrudAction(RENAME_SYSTEM_OBJECT, systemObject);\r\n}\r\n\r\nexport function loadModel(model: SystemModel): SystemModelActionTypes {\r\n    return {\r\n        type: LOAD_MODEL,\r\n        payload: model\r\n    };\r\n}\r\n\r\nexport function resetModel(): SystemModelActionTypes {\r\n    return {\r\n        type: RESET_MODEL\r\n    };\r\n}\r\n\r\nexport function updateFlowStep(step: FlowStepId): SystemModelActionTypes {\r\n    return {\r\n        type: UPDATE_FLOW_STEP,\r\n        payload: step\r\n    };\r\n}\r\n\r\nexport function addPossibleHarm(mishapVictim: MishapVictim, harm: string): SystemModelActionTypes {\r\n    return createBaseCrudAction(ADD_POSSIBLE_HARM, { mishapVictim, harm });\r\n}\r\n\r\nexport function removePossibleHarm(\r\n    mishapVictim: MishapVictim,\r\n    harm: string,\r\n    hazards: Hazard[],\r\n    dispatch: Dispatch<Action>\r\n) {\r\n    const removeHarmAction = createBaseCrudAction(REMOVE_POSSIBLE_HARM, { mishapVictim, harm });\r\n\r\n    if (mishapVictim.possibleHarms.length === 1) {\r\n        const affectedHazards = hazards.filter(e => e.mishapVictim.id === mishapVictim.id);\r\n        if (affectedHazards.length > 0) {\r\n            dispatch(showConfirmationDialog(\r\n                'This mishap victim has hazard(s) associated with it. If you delete the only possible harm it will no longer be a mishap victim and all it\\'s hazards will be deleted. Continue?',\r\n                () => {\r\n                    dispatch(removeHarmAction);\r\n                    affectedHazards.forEach((h) => dispatch(deleteHazard(h)));\r\n                }\r\n            ));\r\n            return;\r\n        }\r\n    }\r\n\r\n    dispatch(removeHarmAction);\r\n}\r\n\r\nexport function updateProjectName(name: string): SystemModelActionTypes {\r\n    return createBaseCrudAction(UPDATE_PROJECT_NAME, name);\r\n}\r\n","import Hazard from '../../entities/hazard-population/hazard'\r\nimport { SystemModel } from '../../entities/system-model'\r\nimport { MishapVictim } from '../../entities/system-description/role'\r\nimport Subsystem from '../../entities/system-description/subsystem'\r\nimport Connection from '../../entities/system-description/connection'\r\nimport SystemObject from '../../entities/system-description/system-object'\r\nimport { FlowStepId } from '../../entities/meny/flow-step-id'\r\n\r\nexport const CREATE_HAZARD = 'CREATE_HAZARD'\r\nexport const DELETE_HAZARD = 'DELETE_HAZARD'\r\nexport const UPDATE_HAZARD = 'UPDATE_HAZARD'\r\nexport const LOAD_MODEL = 'LOAD_MODEL'\r\nexport const RESET_MODEL = 'RESET_MODEL'\r\nexport const UPDATE_FLOW_STEP = 'UPDATE_FLOW_STEP'\r\nexport const ADD_POSSIBLE_HARM = 'ADD_POSSIBLE_HARM'\r\nexport const REMOVE_POSSIBLE_HARM = 'REMOVE_POSSIBLE_HARM'\r\nexport const CREATE_SUBSYSTEM = 'CREATE_SUBSYSTEM'\r\nexport const DELETE_SUBSYSTEM = 'DELETE_SUBSYSTEM'\r\nexport const UPDATE_SUBSYSTEM = 'UPDATE_SUBSYSTEM'\r\nexport const CREATE_CONNECTION = 'CREATE_CONNECTION'\r\nexport const DELETE_CONNECTION = 'DELETE_CONNECTION'\r\nexport const CREATE_SYSTEM_OBJECT = 'CREATE_SYSTEM_OBJECT'\r\nexport const DELETE_SYSTEM_OBJECT = 'DELETE_SYSTEM_OBJECT'\r\nexport const UPDATE_SYSTEM_OBJECT = 'UPDATE_SYSTEM_OBJECT'\r\nexport const RENAME_SYSTEM_OBJECT = 'RENAME_SYSTEM_OBJECT'\r\nexport const UPDATE_PROJECT_NAME = 'UPDATE_PROJECT_NAME'\r\n\r\n\r\ninterface CrudActionBase<T, P> {\r\n    type: T;\r\n    payload: P;\r\n    unsavedChanges: boolean;\r\n}\r\n\r\ninterface CreateHazardAction extends CrudActionBase<typeof CREATE_HAZARD, Hazard> { }\r\n\r\ninterface DeleteHazardAction extends CrudActionBase<typeof DELETE_HAZARD, Hazard> { }\r\n\r\ninterface UpdateHazardAction extends CrudActionBase<typeof UPDATE_HAZARD, Hazard> { }\r\n\r\ninterface CreateSubsystemAction extends CrudActionBase<typeof CREATE_SUBSYSTEM, Subsystem> { }\r\n\r\ninterface DeleteSubsystemAction extends CrudActionBase<typeof DELETE_SUBSYSTEM, Subsystem> { }\r\n\r\ninterface UpdateSubsystemAction extends CrudActionBase<typeof UPDATE_SUBSYSTEM, Subsystem> { }\r\n\r\ninterface CreateConnectionAction extends CrudActionBase<typeof CREATE_CONNECTION, Connection> { }\r\n\r\ninterface DeleteConnectionAction extends CrudActionBase<typeof DELETE_CONNECTION, {\r\n    connection: Connection,\r\n    target: SystemObject\r\n}> { }\r\n\r\ninterface CreateSystemObjectAction extends CrudActionBase<typeof CREATE_SYSTEM_OBJECT, SystemObject> { }\r\n\r\ninterface DeleteSystemObjectAction extends CrudActionBase<typeof DELETE_SYSTEM_OBJECT, SystemObject> { }\r\n\r\ninterface UpdateSystemObjectAction extends CrudActionBase<typeof UPDATE_SYSTEM_OBJECT, SystemObject> { }\r\n\r\ninterface RenameSystemObjectAction extends CrudActionBase<typeof RENAME_SYSTEM_OBJECT, SystemObject> { }\r\n\r\ninterface LoadModelAction {\r\n    type: typeof LOAD_MODEL,\r\n    payload: SystemModel\r\n}\r\n\r\ninterface ResetModelAction {\r\n    type: typeof RESET_MODEL;\r\n}\r\n\r\ninterface UpdateFlowStepAction {\r\n    type: typeof UPDATE_FLOW_STEP;\r\n    payload: FlowStepId\r\n}\r\n\r\ninterface AddPossibleHarmAction extends CrudActionBase<\r\n        typeof ADD_POSSIBLE_HARM,\r\n        { mishapVictim: MishapVictim, harm: string }\r\n    > { }\r\n\r\ninterface RemovePossibleHarmAction extends CrudActionBase<\r\n    typeof REMOVE_POSSIBLE_HARM,\r\n    { mishapVictim: MishapVictim, harm: string }\r\n    > { }\r\n\r\ninterface UpdateProjectName extends CrudActionBase<typeof UPDATE_PROJECT_NAME, string> { }\r\n\r\nexport type SystemModelActionTypes = CreateHazardAction | DeleteHazardAction | UpdateHazardAction |\r\n    LoadModelAction | ResetModelAction | UpdateFlowStepAction |\r\n    AddPossibleHarmAction | RemovePossibleHarmAction | UpdateProjectName |\r\n    CreateSubsystemAction | UpdateSubsystemAction | DeleteSubsystemAction |\r\n    CreateConnectionAction | DeleteConnectionAction | RenameSystemObjectAction |\r\n    CreateSystemObjectAction | DeleteSystemObjectAction | UpdateSystemObjectAction\r\n","import React, { useRef } from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { RootState } from '../../store';\r\nimport { IconButton, makeStyles } from '@material-ui/core';\r\nimport { FolderOpen } from '@material-ui/icons';\r\nimport { resetModel, loadModel } from '../../store/system-model/actions';\r\nimport { confirmDiscardModel } from '../../store/modal-dialog/actions';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    hasUnsavedChanges: state.unsavedChanges\r\n});\r\n\r\nconst mapDispatch = {\r\n    resetSystemModel: resetModel,\r\n    setSystemModel: loadModel,\r\n    confirmDiscardModel: confirmDiscardModel\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    inlineBlock: {\r\n        display: 'inline-block'\r\n    },\r\n    hidden: {\r\n        display: 'none'\r\n    }\r\n}));\r\n\r\nconst OpenFileButton: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n    const formRef = useRef<HTMLFormElement | null>();\r\n    const inputRef = useRef<HTMLInputElement | null>();\r\n\r\n    const openSelectFileDialog = () => {\r\n        if (inputRef.current) {\r\n            inputRef.current.click();\r\n        }\r\n    };\r\n\r\n    const confirmOpenFile = () => {\r\n        if (!props.hasUnsavedChanges) {\r\n            openSelectFileDialog();\r\n        } else {\r\n            props.confirmDiscardModel(openSelectFileDialog);\r\n        }\r\n    };\r\n\r\n    const readFile = (files: FileList | null) => {\r\n        if (files === null || files.length !== 1) {\r\n            return;\r\n        }\r\n        const file = files[0];\r\n        if (file.type !== 'application/json') {\r\n            throw new Error('File type not supported');\r\n        }\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = processFile;\r\n        reader.onerror = handleFileError;\r\n        reader.readAsText(file, 'utf-8');\r\n    };\r\n\r\n    const handleFileError = (ev: ProgressEvent<FileReader>) => {\r\n        let message = 'Error reading a file';\r\n        if (ev.target && ev.target.error) {\r\n            message = ev.target.error.message;\r\n        }\r\n        throw new Error(message);\r\n    };\r\n\r\n    const processFile = (ev: ProgressEvent<FileReader>) => {\r\n        if (!ev.target) {\r\n            throw new Error('Error reading a file');\r\n        }\r\n\r\n        const data = ev.target.result as string;\r\n        const model = JSON.parse(data);\r\n        if (formRef.current) {\r\n            formRef.current.reset();\r\n        }\r\n\r\n        props.resetSystemModel();\r\n        props.setSystemModel(model);\r\n    };\r\n\r\n    if (window.FileReader && window.FileList) {\r\n        return (\r\n            <form\r\n                ref={(ref) => formRef.current = ref}\r\n                className={classes.inlineBlock}\r\n            >\r\n                <input\r\n                    ref={(ref) => inputRef.current = ref}\r\n                    className={classes.hidden}\r\n                    type='file'\r\n                    onChange={(ev) => readFile(ev.target.files)}\r\n                    accept='.json'\r\n                />\r\n                <IconButton\r\n                    title='Open Project File'\r\n                    size='small'\r\n                    color='inherit'\r\n                    component='span'\r\n                    onClick={confirmOpenFile}\r\n                >\r\n                    <FolderOpen />\r\n                </IconButton>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div title='File API not supported' className={classes.inlineBlock}>\r\n            <IconButton size='small' color='inherit' disabled={true}>\r\n                <FolderOpen />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connector(OpenFileButton);\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { RootState } from '../../store';\r\nimport { IconButton, Badge } from '@material-ui/core';\r\nimport { SaveAlt } from '@material-ui/icons';\r\nimport { saveChanges } from '../../store/unsaved-changes/actions';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    systemModel: state.systemModel,\r\n    hasUnsavedChanges: state.unsavedChanges\r\n});\r\n\r\nconst mapDispatch = {\r\n    saveChanges: saveChanges\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nconst DownloadFileButton: React.FC<Props> = (props) => {\r\n\r\n    const downloadFile = () => {\r\n        const data = props.systemModel;\r\n        const serialized = JSON.stringify(data, null, '\\t');\r\n        const fileName = `${data.projectName} ${new Date().toISOString().replace(/:/g, '_')}.json`;\r\n\r\n        var element = document.createElement('a');\r\n        element.setAttribute('href', 'data:application/json;charset=utf-8,' + encodeURIComponent(serialized));\r\n        element.setAttribute('download', fileName);\r\n        element.style.display = 'none';\r\n        document.body.appendChild(element);\r\n\r\n        element.click();\r\n        document.body.removeChild(element);\r\n\r\n        props.saveChanges();\r\n    };\r\n\r\n    return (\r\n        <IconButton\r\n            size='small'\r\n            title={props.hasUnsavedChanges ? 'Download Project - You have unsaved changes' : 'Download Project'}\r\n            color='inherit'\r\n            onClick={downloadFile}\r\n        >\r\n            <Badge variant='dot' color='secondary' invisible={!props.hasUnsavedChanges}>\r\n                <SaveAlt />\r\n            </Badge>\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default connector(DownloadFileButton);\r\n","export enum FlowStepId {\r\n    OHI = 'OHI',\r\n    OHI_1 = 'OHI-1',\r\n    SDF_1 = 'SDF-1',\r\n    SDF_2 = 'SDF-2',\r\n    SDF_3 = 'SDF-3',\r\n    SDF_4 = 'SDF-4',\r\n    OHI_2 = 'OHI-2',\r\n    OHI_3 = 'OHI-3',\r\n    OCH = 'OCH',\r\n    OCH_1 = 'OCH-1',\r\n    OCH_2 = 'OCH-2',\r\n    OCH_3 = 'OCH-3',\r\n    SARE = 'SARE',\r\n    SARE_1 = 'SARE-1',\r\n    SARE_2 = 'SARE-2',\r\n    SARE_3 = 'SARE-3',\r\n    CM = 'CM'\r\n}","import { UnsavedChangesActionType, SAVE_CHANGES } from './types';\r\n\r\nexport function saveChanges(): UnsavedChangesActionType {\r\n    return {\r\n        type: SAVE_CHANGES\r\n    };\r\n}\r\n","export const SAVE_CHANGES = 'SAVE_CHANGES'\r\n\r\ninterface SaveChangesAction {\r\n    type: typeof SAVE_CHANGES;\r\n}\r\n\r\nexport type UnsavedChangesActionType = SaveChangesAction\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { RootState } from '../../store';\r\nimport { confirmDiscardModel } from '../../store/modal-dialog/actions';\r\nimport { resetModel } from '../../store/system-model/actions';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { InsertDriveFileOutlined } from '@material-ui/icons';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    hasUnsavedChanges: state.unsavedChanges\r\n});\r\n\r\nconst mapDispatch = {\r\n    confirmDiscardModel: confirmDiscardModel,\r\n    resetModel: resetModel\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nconst NewFileButton: React.FC<Props> = (props) => {\r\n\r\n    const setNewProject = () => {\r\n        if (!props.hasUnsavedChanges) {\r\n            props.resetModel();\r\n        } else {\r\n            props.confirmDiscardModel(props.resetModel);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <IconButton\r\n            size='small'\r\n            title='New Project'\r\n            color='inherit'\r\n            onClick={setNewProject}\r\n        >\r\n            <InsertDriveFileOutlined />\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default connector(NewFileButton);\r\n","import React from 'react';\r\n\r\nimport OpenFileButton from './open-file-button';\r\nimport DownloadFileButton from './download-file-button';\r\nimport NewFileButton from './new-file-button';\r\n\r\nconst Meny: React.FC = () => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <NewFileButton />\r\n            <OpenFileButton />\r\n            <DownloadFileButton />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Meny\r\n","import { FlowStepId } from \"./flow-step-id\";\r\n\r\nexport const OUT_OF_FLOW = -1;\r\n\r\nexport function getFirstStepId() {\r\n    return FlowStepId.SDF_1;\r\n};\r\n\r\nexport function getFlowStepOrder(step: FlowStepId): number {\r\n    switch (step) {\r\n        case FlowStepId.SDF_1:\r\n            return 1;\r\n        case FlowStepId.SDF_2:\r\n            return 2;\r\n        case FlowStepId.SDF_3:\r\n            return 3;\r\n        case FlowStepId.SDF_4:\r\n            return 4;\r\n        case FlowStepId.OHI_2:\r\n            return 5;\r\n        case FlowStepId.OHI_3:\r\n            return 6;\r\n        case FlowStepId.OCH_1:\r\n            return 7;\r\n        default:\r\n            return OUT_OF_FLOW;\r\n    }\r\n};\r\n\r\nexport const flow = [\r\n    {\r\n        id: FlowStepId.OHI, label: 'Identify Hazards', children: [\r\n            {\r\n                id: FlowStepId.OHI_1, label: 'Modelling', children: [\r\n                    { id: FlowStepId.SDF_1, label: 'Step 1', helpText: 'Identify the <i>kind</i> and <i>role</i> objects explicitly presented in the system description.' },\r\n                    { id: FlowStepId.SDF_2, label: 'Step 2', helpText: 'For each <i>kind</i> object obtained in SDF-Step&nbsp;1, identify all the roles it can play, considering the system description.' },\r\n                    { id: FlowStepId.SDF_3, label: 'Step 3', helpText: 'For each <i>role</i> object obtained in SDF-Step&nbsp;1 and SDF-Step&nbsp;2, identify the relator that connects this role, and specify all the other roles connected by the identified relator, considering the system description and the analysts&apos; expertise.' },\r\n                    { id: FlowStepId.SDF_4, label: 'Step 4', helpText: 'For each <i>role</i> object obtained in SDF-Step&nbsp;1, SDF-Step&nbsp;2 and SDF-Step&nbsp;3, identify all the <i>kind</i> objects that can play the role, considering the system description.' },\r\n                ]\r\n            },\r\n            {\r\n                id: FlowStepId.OHI_2, label: 'Identify Victims', helpText: 'Go through all the <i>roles</i> presented in the HO-style model and analyze if the roles are not supposed to but have the potential to encounter harms. Furthermore, the analysts continue with identifying possible harms that can affect the victims, including but not limited to, physical damages, chemical injuries, fatal illness, explosion, etc.'\r\n            },\r\n            {\r\n                id: FlowStepId.OHI_3, label: 'Identify Hazards', helpText: 'Identify the hazardous situations that are likely to harm the identified mishap victims. Occurrence of a mishap is the manifestation of the <i>harm truthmaker</i> dispositions that characterize the <i>hazard element</i> roles in a hazardous situation. '\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        id: FlowStepId.OCH, label: 'Identify Causes', children: [\r\n            {\r\n                id: FlowStepId.OCH_1, label: 'Categorize', helpText: 'Categorize all the hazard descriptions into four categories, in terms of <b>Hazard</b>, <b>Initiating Condition</b>, <b>Initiating Event</b>, and/or <b>Mishap</b> based on the set of heuristic questions.'\r\n            },\r\n            {\r\n                id: FlowStepId.OCH_2, label: 'Expand', children: []\r\n            },\r\n            {\r\n                id: FlowStepId.OCH_3, label: 'Identify Causes', children: []\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        id: FlowStepId.SARE, label: 'Safety Requirements', children: [\r\n            {\r\n                id: FlowStepId.SARE_1, label: 'Evaluate Severity', children: []\r\n            },\r\n            {\r\n                id: FlowStepId.SARE_2, label: 'Evaluate Probability', children: []\r\n            },\r\n            {\r\n                id: FlowStepId.SARE_3, label: 'Safety Requirements', children: []\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        id: FlowStepId.CM, label: 'Control Mitigation', children: []\r\n    }\r\n];\r\n","export enum ObjectTypes {\r\n    kind = 'kind',\r\n    role = 'role',\r\n    relator = 'relator'\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { IconButton, Popover, Typography, makeStyles } from '@material-ui/core';\r\nimport { Help, HelpOutline } from '@material-ui/icons';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    highlighted?: boolean;\r\n    htmlContent: string;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    typography: {\r\n        padding: theme.appSpacing.standard,\r\n        maxWidth: '320px'\r\n    }\r\n}));\r\n\r\nconst HelpText: React.FC<Props> = (props: Props) => {\r\n    const classes = useStyles();\r\n\r\n    const [popoverAnchor, setPopoverAnchor] = useState<Element | null>(null);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const handleClose = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    // can be opened both from parent component and from itself\r\n    useEffect(() => {\r\n        setIsOpen(props.open);\r\n    }, [props.open]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <IconButton ref={(ref) => setPopoverAnchor(ref)} edge=\"end\" onClick={() => setIsOpen(true)}>\r\n                {props.highlighted ? <Help /> : <HelpOutline />}\r\n            </IconButton>\r\n            <Popover\r\n                open={isOpen}\r\n                anchorEl={popoverAnchor}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'center',\r\n                    horizontal: 'right',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'center',\r\n                    horizontal: 'left',\r\n                }}\r\n            >\r\n                <Typography variant='body2' className={classes.typography} dangerouslySetInnerHTML={{ __html: props.htmlContent }}></Typography>\r\n            </Popover>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default HelpText;\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { List, ListItem, ListItemText, Chip, makeStyles, ListItemIcon, Divider, ListItemSecondaryAction } from '@material-ui/core';\r\nimport { FlowStep } from '../../entities/meny/flow-step';\r\nimport { flow, OUT_OF_FLOW, getFlowStepOrder } from '../../entities/meny/flow';\r\nimport HelpText from './help-text';\r\nimport { RootState } from '../../store';\r\nimport { updateFlowStep } from '../../store/system-model/actions';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    label: {\r\n        paddingLeft: theme.spacing(1)\r\n    },\r\n    phase: {\r\n        paddingLeft: theme.spacing(4)\r\n    },\r\n    step: {\r\n        paddingLeft: theme.spacing(8)\r\n    },\r\n    bold: {\r\n        fontWeight: 'bold'\r\n    }\r\n}));\r\n\r\nconst mapState = (state: RootState) => ({\r\n    currentStep: state.systemModel.currentStep,\r\n    lastCompletedStep: state.systemModel.lastCompletedStep\r\n})\r\n\r\nconst mapDispatch = {\r\n    setCurentStep: updateFlowStep\r\n}\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nconst ProgressSteps: React.FC<Props> = (props: Props) => {\r\n    const classes = useStyles();\r\n\r\n    const renderSteps = (steps: FlowStep[], paddingClass: string) => (\r\n        <List disablePadding dense>\r\n            {steps.map((step: FlowStep) => {\r\n                const stepOrder = getFlowStepOrder(step.id);\r\n                const isInFlow = stepOrder !== OUT_OF_FLOW;\r\n                const isCurrent = isInFlow && step.id === props.currentStep;\r\n                const isEnabled = !isInFlow ||\r\n                    stepOrder <= getFlowStepOrder(props.lastCompletedStep) + 1;\r\n                const helpOpenedOnFirstVisit = step.id === props.currentStep &&\r\n                    step.id === props.lastCompletedStep;\r\n\r\n                return (\r\n                    <React.Fragment key={step.id}>\r\n                        <ListItem\r\n                            className={paddingClass}\r\n                            button\r\n                            disabled={!isEnabled}\r\n                            onClick={() => isInFlow && props.setCurentStep(step.id)}\r\n                        >\r\n                            <ListItemIcon>\r\n                                <Chip\r\n                                    size=\"small\"\r\n                                    disabled={!isEnabled}\r\n                                    label={step.id}\r\n                                    color={isCurrent ? 'secondary' : 'primary'}\r\n                                    variant={isInFlow ? 'default' : 'outlined'}\r\n                                />\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={step.label} className={classes.label} />\r\n                            {step.helpText ? (\r\n                                <ListItemSecondaryAction>\r\n                                    <HelpText\r\n                                        open={helpOpenedOnFirstVisit}\r\n                                        highlighted={isCurrent}\r\n                                        htmlContent={step.helpText}\r\n                                    />\r\n                                </ListItemSecondaryAction>)\r\n                                : ''\r\n                            }\r\n                        </ListItem>\r\n                        {step.children ? renderSteps(step.children, classes.step) : ''}\r\n                    </React.Fragment>\r\n                );\r\n            })}\r\n        </List>\r\n    );\r\n\r\n    return (\r\n        <List dense>\r\n            {flow.map(stage => (\r\n                <React.Fragment key={stage.id}>\r\n                    <ListItem>\r\n                        <ListItemIcon>\r\n                            <Chip label={stage.id} variant='outlined' color='primary' />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                            primary={stage.label}\r\n                            disableTypography\r\n                            className={`${classes.label} ${classes.bold}`}\r\n                        />\r\n                    </ListItem>\r\n                    {renderSteps(stage.children, classes.phase)}\r\n                    <Divider />\r\n                </React.Fragment>\r\n            ))}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default connector(ProgressSteps);\r\n","import React from 'react';\r\nimport { Card, makeStyles, CardContent } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        position: 'fixed',\r\n        bottom: theme.appSpacing.standard,\r\n        right: theme.appSpacing.standard,\r\n        zIndex: theme.zIndex.graphHelp,\r\n        minWidth: 200,\r\n    }\r\n}));\r\n\r\nconst CornerCard: React.FC = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardContent>\r\n                {props.children}\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default CornerCard;\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { Action, Dispatch } from 'redux';\r\nimport { Typography, ListItem, ListItemText, ListItemSecondaryAction, IconButton, TextField, List } from '@material-ui/core';\r\n\r\nimport { Delete, Add } from '@material-ui/icons';\r\nimport Role, { MishapVictim } from '../../entities/system-description/role';\r\nimport CornerCard from '../shared/corner-card';\r\nimport { addPossibleHarm, removePossibleHarm } from '../../store/system-model/actions';\r\nimport { RootState } from '../../store';\r\nimport Hazard from '../../entities/hazard-population/hazard';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    hazards: state.systemModel.hazards\r\n});\r\n\r\nconst mapDispatch = (dispatch: Dispatch<Action>) => ({\r\n    harmAdded: (mishapVictim: MishapVictim, harm: string) =>\r\n        dispatch(addPossibleHarm(mishapVictim, harm)),\r\n    harmDeleted: (mishapVictim: MishapVictim, harm: string, hazards: Hazard[]) =>\r\n        removePossibleHarm(mishapVictim, harm, hazards, dispatch)\r\n});\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {\r\n    selectedRole: Role | undefined;\r\n};\r\n\r\nconst VictimHarms: React.FC<Props> = (props: Props) => {\r\n\r\n    const createMishapVictim = (ev: React.FormEvent<HTMLFormElement>, role: Role) => {\r\n        const form = ev.currentTarget;\r\n        const harm = (form.elements.namedItem(\"harm\") as HTMLInputElement).value;\r\n        form.reset();\r\n        ev.preventDefault();\r\n        props.harmAdded(role, harm);\r\n    };\r\n\r\n    const deletePossibleHarm = (role: Role, harm: string) => {\r\n        props.harmDeleted(role, harm, props.hazards);\r\n    };\r\n\r\n    const emptyContent = (\r\n            <Typography>\r\n                Click on a role to see or add possible harms\r\n            </Typography>\r\n        );\r\n\r\n    const renderHarms = (role: Role) => {\r\n        return role.possibleHarms\r\n            .sort((a, b) => a.localeCompare(b))\r\n            .map((harm, index) => renderHarmItem(harm, index, role))\r\n            .concat(renderAddItem(role));\r\n    };\r\n\r\n    const renderHarmItem = (item: string, index: number, role: Role) => (\r\n        <ListItem key={index}>\r\n            <ListItemText primary={item} />\r\n            <ListItemSecondaryAction>\r\n                <IconButton edge=\"end\" title=\"Delete\" onClick={() => deletePossibleHarm(role, item)}>\r\n                    <Delete />\r\n                </IconButton>\r\n            </ListItemSecondaryAction>\r\n        </ListItem>\r\n    );\r\n\r\n    const renderAddItem = (role: Role) => (\r\n        <ListItem key=\"-1\">\r\n            <form action='#' onSubmit={(ev) => createMishapVictim(ev, role)}>\r\n                <TextField\r\n                    required\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    type=\"text\"\r\n                    name=\"harm\"\r\n                    fullWidth\r\n                    placeholder=\"Add New\"\r\n                    autoComplete=\"off\"\r\n                />\r\n                <ListItemSecondaryAction>\r\n                    <IconButton type=\"submit\" edge=\"end\" title=\"Add\">\r\n                        <Add />\r\n                    </IconButton>\r\n                </ListItemSecondaryAction>\r\n            </form>\r\n        </ListItem>\r\n    );\r\n\r\n    const renderContent = () => {\r\n        if (!props.selectedRole) {\r\n            return emptyContent;\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    Mishap Victim\r\n                </Typography>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    {props.selectedRole.name}\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">\r\n                    Possible Harms\r\n                </Typography>\r\n                <List dense>\r\n                    {renderHarms(props.selectedRole)}\r\n                </List>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <CornerCard>\r\n            {renderContent()}\r\n        </CornerCard>\r\n    );\r\n};\r\n\r\nexport default connector(VictimHarms);\r\n","import { ObjectTypes } from '../entities/system-description/object-types';\r\n\r\nconst graphStyle = [\r\n    {\r\n        selector: 'node',\r\n        style: {\r\n            'background-color': '#fff',\r\n            'border-width': 1,\r\n            'border-style': 'solid',\r\n            'border-color': '#000',\r\n            'shape': 'round-rectangle',\r\n            'label': 'data(label)',\r\n            'height': 'label',\r\n            'width': 'label',\r\n            'text-valign': 'center',\r\n            'text-halign': 'center',\r\n            'text-wrap': 'wrap',\r\n            'text-max-width': '130px',\r\n            'font-size': 11,\r\n            'padding': '5px'\r\n        }\r\n    },\r\n    {\r\n        selector: 'edge',\r\n        style: {\r\n            'width': 2,\r\n            'curve-style': 'taxi',\r\n            'label': 'data(label)',\r\n            'font-size': 11\r\n        }\r\n    },\r\n    {\r\n        selector: '.subsystem',\r\n        style: {\r\n            'shape': 'rectangle',\r\n            'text-valign': 'top',\r\n            'text-max-width': '300px'\r\n        }\r\n    },\r\n    {\r\n        selector: `.${ObjectTypes.kind.toString()}`,\r\n        style: {\r\n            'background-color': '#8282ff',\r\n            'color': '#fff'\r\n        }\r\n    },\r\n    {\r\n        selector: `.${ObjectTypes.role.toString()}`,\r\n        style: {\r\n            'background-color': '#818181',\r\n            'color': '#fff'\r\n        }\r\n    },\r\n    {\r\n        selector: `.${ObjectTypes.relator.toString()}`,\r\n        style: {\r\n            'background-color': '#fff',\r\n            'color': '#000'\r\n        }\r\n    },\r\n    {\r\n        selector: '.arrow-edge',\r\n        style: {\r\n            'target-arrow-shape': 'chevron'\r\n        }\r\n    },\r\n    {\r\n        selector: '.faded',\r\n        style: {\r\n            'opacity': 0.6\r\n        }\r\n    },\r\n    {\r\n        selector: '.mishap-victim',\r\n        style: {\r\n            'background-color': '#ff0',\r\n            'color': '#000'\r\n        }\r\n    }\r\n];\r\n\r\nexport default graphStyle;\r\n","import SystemObject from \"../system-description/system-object\";\r\nimport Subsystem from \"../system-description/subsystem\";\r\nimport Connection from \"../system-description/connection\";\r\n\r\nexport interface Data {\r\n    id: string;\r\n    label: string;\r\n}\r\n\r\nexport interface SystemObjectData extends Data {\r\n    systemObject: SystemObject;\r\n    parent?: string;\r\n}\r\n\r\nexport interface SubsystemData extends Data {\r\n    subsystem: Subsystem;\r\n}\r\n\r\nexport interface ConnectionData extends Data {\r\n    source: string;\r\n    target: string;\r\n    connection: Connection;\r\n}\r\n\r\nexport interface GraphElement<TData extends Data> {\r\n    group: 'nodes' | 'edges';\r\n    data: TData;\r\n    position?: GraphElementPosition;\r\n    classes?: string[];\r\n    grabbable?: boolean,\r\n    pannable?: boolean;\r\n}\r\n\r\nexport interface GraphElementPosition {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport function isSystemObjectData(data: Data): data is SystemObjectData {\r\n    return 'systemObject' in data;\r\n}\r\n\r\nexport function isSubsystemData(data: Data): data is SubsystemData {\r\n    return 'subsystem' in data;\r\n}\r\n\r\nexport function isConnectionData(data: Data): data is ConnectionData {\r\n    return 'connection' in data;\r\n}\r\n","import { NodeSingular } from \"cytoscape\";\r\n\r\nconst options = {\r\n    animate: false,\r\n    cueEnabled: false\r\n};\r\n\r\nexport interface CollapseApi {\r\n    collapse: (node: NodeSingular) => void;\r\n    expand: (node: NodeSingular) => void;\r\n}\r\n\r\nexport function initCollapseApi(cy: any) {\r\n    cy.expandCollapse(options);\r\n}\r\n\r\nexport function getCollapseApi(cy: any): CollapseApi {\r\n    return cy.expandCollapse('get');\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\ninterface Props {\r\n    size?: (height: number, width: number) => void;\r\n}\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    root: {\r\n        position: 'fixed',\r\n        overflow: 'auto',\r\n        top: theme.mixins.toolbar.minHeight,\r\n        right: 0,\r\n        bottom: 0,\r\n        left: theme.appSpacing.drawerWidth\r\n    }\r\n}));\r\n\r\nconst GraphContainer: React.FC<Props> = (props) => {\r\n    const classes = useStyle();\r\n\r\n    const extractSize = (ref: HTMLDivElement | null) => {\r\n        if (ref && props.size) {\r\n            props.size(ref.scrollHeight, ref.scrollWidth);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root} ref={extractSize}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GraphContainer;\r\n","import React from 'react';\r\nimport cytoscape, { Core, EventObject, Singular, NodeSingular } from 'cytoscape';\r\nimport CytoscapeComponent from 'react-cytoscapejs';\r\nimport expandCollapse from 'cytoscape-expand-collapse';\r\nimport popper from 'cytoscape-popper';\r\nimport { withTheme, Theme } from '@material-ui/core/styles';\r\n\r\nimport style from '../../styles/graph-style';\r\nimport { GraphElement, isSubsystemData } from '../../entities/graph/graph-element';\r\nimport { initCollapseApi, CollapseApi, getCollapseApi } from '../../entities/graph/collapse-api';\r\nimport GraphContainer from './graph-container';\r\n\r\ncytoscape.use(popper);\r\nexpandCollapse(cytoscape);\r\n\r\ninterface Props {\r\n    elements: GraphElement<any>[];\r\n    cursorStyle: string;\r\n    useCollapseApi?: boolean;\r\n    mouseEnteredNode: (ev: EventObject) => void;\r\n    mouseLeftNode: (ev: EventObject) => void;\r\n    nodeClicked: (ev: EventObject) => void;\r\n    graphClicked?: (ev: EventObject) => void;\r\n    nodeMoved?: (ev: EventObject) => void;\r\n    cy?: (cy: Core) => void;\r\n    theme: Theme;\r\n}\r\n\r\ninterface State {\r\n    cy: Core | null;\r\n    collapseApi: CollapseApi | null;\r\n    maxX: number;\r\n    maxY: number;\r\n}\r\n\r\nclass Graph extends React.Component<Props, State> {\r\n\r\n    private containerSize = {\r\n        height: 0,\r\n        width: 0\r\n    };\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.initCytoscape = this.initCytoscape.bind(this);\r\n        this.addEventListeners = this.addEventListeners.bind(this);\r\n        this.resizeCanvas = this.resizeCanvas.bind(this);\r\n        this.handleNodeMoved = this.handleNodeMoved.bind(this);\r\n        this.setInitialCanvasSize = this.setInitialCanvasSize.bind(this);\r\n\r\n        this.state = {\r\n            cy: null,\r\n            collapseApi: null,\r\n            maxX: this.containerSize.width,\r\n            maxY: this.containerSize.height\r\n        };\r\n    }\r\n\r\n    render() {\r\n        // if cytoscape is not initialized yet it is impossible to render elements, so first init empty cytoscape \r\n        const elements = this.state.cy ? this.props.elements : [];\r\n        const graphContainerStyle = {\r\n            width: this.state.maxX,\r\n            height: this.state.maxY,\r\n            zIndex: this.props.theme.zIndex.graph,\r\n            cursor: this.props.cursorStyle\r\n        };\r\n\r\n        return (\r\n            <GraphContainer size={this.setInitialCanvasSize}>\r\n                <CytoscapeComponent\r\n                    elements={elements}\r\n                    style={graphContainerStyle}\r\n                    stylesheet={style}\r\n                    userZoomingEnabled={false}\r\n                    userPanningEnabled={false}\r\n                    cy={this.initCytoscape} />\r\n            </GraphContainer>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            ...this.state,\r\n            ...{ maxX: this.containerSize.width, maxY: this.containerSize.height }\r\n        });\r\n    }\r\n\r\n    private setInitialCanvasSize(height: number, width: number) {\r\n        this.containerSize = { height, width };\r\n    }\r\n\r\n    private resizeCanvas() {\r\n        if (this.state.cy) {\r\n            const boundingBox = this.state.cy.nodes().renderedBoundingBox({});\r\n            const height = Math.max(boundingBox.y2, this.state.maxY);\r\n            const width = Math.max(boundingBox.x2, this.state.maxX);\r\n            if (height !== this.state.maxY || width !== this.state.maxX) {\r\n                this.setState({ ...this.state, ...{ maxX: width, maxY: height } });\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleNodeMoved(event: EventObject) {\r\n        const node: NodeSingular = event.target.element();\r\n        const position = node.position();\r\n        // prevent a node from being dragged beyond left and top border\r\n        if (position.x < 0 || position.y < 0) {\r\n            node.position({\r\n                ...position,\r\n                ...{ x: Math.max(position.x, 0), y: Math.max(position.y, 0) }\r\n            });\r\n        }\r\n\r\n        this.props.nodeMoved?.(event);\r\n    }\r\n\r\n    private addEventListeners(event: EventObject) {\r\n        const ele: Singular = event.target.element();\r\n        if (ele.isNode()) {\r\n            ele.on('dragfree', this.handleNodeMoved);\r\n\r\n            const data = ele.data();\r\n            if (this.state.collapseApi && isSubsystemData(data) && data.subsystem.isCollapsed) {\r\n                this.state.collapseApi.collapse(ele);\r\n            }\r\n        }\r\n        ele.on('mouseover', this.props.mouseEnteredNode);\r\n        ele.on('mouseout', this.props.mouseLeftNode);\r\n        ele.on('click', this.props.nodeClicked);\r\n    }\r\n\r\n    private initCytoscape(cy: Core) {\r\n        if (this.props.cy) {\r\n            this.props.cy(cy);\r\n        }\r\n\r\n        // this method must run only once\r\n        if (this.state.cy) {\r\n            return;\r\n        }\r\n        cy.zoom(1.1); // hack to fix blurring\r\n        cy.on('add', this.addEventListeners);\r\n        cy.on('click', (ev) => this.props.graphClicked && this.props.graphClicked(ev));\r\n        cy.on('render', this.resizeCanvas);\r\n\r\n        let collapseApi = null;\r\n        if (this.props.useCollapseApi) {\r\n            initCollapseApi(cy);\r\n            collapseApi = getCollapseApi(cy);\r\n        }\r\n\r\n        this.setState({ ...this.state, ...{ cy, collapseApi } });\r\n    }\r\n}\r\n\r\nexport default withTheme(Graph);\r\n","import SystemObject from \"./system-object\";\r\nimport Connection from \"./connection\";\r\nimport Subsystem from \"./subsystem\";\r\n\r\nexport type SystemDescriptionEntity = Connection | SystemObject | Subsystem;\r\n\r\nexport function isSystemObject(entity: SystemDescriptionEntity): entity is SystemObject {\r\n    return 'type' in entity;\r\n}\r\n\r\nexport function isConnection(entity: SystemDescriptionEntity): entity is Connection {\r\n    return 'source' in entity;\r\n}\r\n\r\nexport function isSubsystem(entity: SystemDescriptionEntity): entity is Subsystem {\r\n    return !('source' in entity) && !('type' in entity);\r\n}\r\n","import { SystemDescriptionEntity, isSystemObject, isConnection, isSubsystem } from \"../system-description/system-description-entity\";\r\nimport SystemObject from \"../system-description/system-object\";\r\nimport { GraphElement, SystemObjectData, ConnectionData, SubsystemData, Data } from \"./graph-element\";\r\nimport Connection from \"../system-description/connection\";\r\nimport Subsystem from \"../system-description/subsystem\";\r\nimport { SystemDescription } from \"../system-model\";\r\n\r\nexport default class GraphElementsFactory {\r\n\r\n    mapSystemDescription(system: SystemDescription) {\r\n        return this.mapSystemDescriptionEntities(\r\n            (this.getAllNodes(system) as SystemDescriptionEntity[])\r\n                .concat(system.systemObjectConnections)\r\n        );\r\n    }\r\n\r\n    mapSystemDescriptionEntities(entities: SystemDescriptionEntity[]): GraphElement<Data>[] {\r\n        return entities.map((e) => {\r\n            if (isSystemObject(e)) return this.mapSystemObject(e);\r\n            if (isConnection(e)) return this.mapConnection(e);\r\n            if (isSubsystem(e)) return this.mapSubsystem(e);\r\n            throw new Error('Unknown entity type');\r\n        });\r\n    }\r\n\r\n    getAllNodes(system: SystemDescription): (SystemObject | Subsystem)[] {\r\n        return (system.kinds as (SystemObject | Subsystem)[])\r\n            .concat(system.relators)\r\n            .concat(system.roles)\r\n            .concat(system.subsystems);\r\n    }\r\n\r\n    protected hookSystemObject(element: GraphElement<SystemObjectData>) {\r\n        return element;\r\n    }\r\n\r\n    protected hookConnection(element: GraphElement<ConnectionData>) {\r\n        return element;\r\n    }\r\n\r\n    protected hookSubsystem(element: GraphElement<SubsystemData>) {\r\n        return element;\r\n    }\r\n\r\n    private mapSystemObject(object: SystemObject): GraphElement<SystemObjectData> {\r\n        return this.hookSystemObject({\r\n            group: 'nodes',\r\n            data: {\r\n                id: object.id,\r\n                label: `<<${object.type.toString()}>>\\n${object.name}`,\r\n                systemObject: object,\r\n                parent: object.parent\r\n            },\r\n            position: {\r\n                x: object.posX, y: object.posY\r\n            },\r\n            classes: [object.type.toString()]\r\n        });\r\n    }\r\n\r\n    private mapConnection(connection: Connection): GraphElement<ConnectionData> {\r\n        return this.hookConnection({\r\n            group: 'edges',\r\n            data: {\r\n                id: connection.id,\r\n                label: connection.label ? connection.label : '',\r\n                source: connection.source,\r\n                target: connection.target,\r\n                connection: connection\r\n            },\r\n            pannable: true,\r\n            classes: connection.isOriented ? ['arrow-edge'] : []\r\n        });\r\n    }\r\n\r\n    private mapSubsystem(subsystem: Subsystem): GraphElement<SubsystemData> {\r\n        return this.hookSubsystem({\r\n            group: 'nodes',\r\n            data: {\r\n                id: subsystem.id,\r\n                label: subsystem.name,\r\n                subsystem: subsystem\r\n            },\r\n            position: {\r\n                x: subsystem.posX, y: subsystem.posY\r\n            },\r\n            classes: ['subsystem']\r\n        });\r\n    }\r\n}\r\n","import SystemObject from \"./system-object\";\r\nimport { ObjectTypes } from \"./object-types\";\r\n\r\ninterface Role extends SystemObject {\r\n    possibleHarms: string[];\r\n}\r\n\r\nexport interface MishapVictim extends Role {\r\n}\r\n\r\nexport function isRole(obj: SystemObject): obj is Role {\r\n    return obj.type === ObjectTypes.role;\r\n}\r\n\r\nexport function isMishapVictim(obj: SystemObject): obj is MishapVictim {\r\n    return isRole(obj) && obj.possibleHarms.length > 0;\r\n}\r\n\r\nexport default Role;\r\n","import GraphElementsFactory from \"./graph-elements-factory\";\r\nimport { GraphElement, SystemObjectData, ConnectionData, SubsystemData } from \"./graph-element\";\r\nimport { isRole, isMishapVictim } from \"../system-description/role\";\r\n\r\nexport default class GraphElementsFactoryMishapVictims extends GraphElementsFactory {\r\n\r\n    hookSystemObject(element: GraphElement<SystemObjectData>) {\r\n        if (!isRole(element.data.systemObject)) {\r\n            element.classes = [element.data.systemObject.type.toString(), 'faded'];\r\n        } else if (isMishapVictim(element.data.systemObject)) {\r\n            element.classes = ['mishap-victim'];\r\n        }\r\n        element.grabbable = false;\r\n        return element;\r\n    }\r\n\r\n    hookConnection(element: GraphElement<ConnectionData>) {\r\n        const classes = ['faded'];\r\n        if (element.data.connection.isOriented) {\r\n            classes.push('arrow-edge');\r\n        }\r\n        element.classes = classes;\r\n        return element;\r\n    }\r\n\r\n    hookSubsystem(element: GraphElement<SubsystemData>) {\r\n        element.grabbable = false;\r\n        return element;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { EventObject, Singular } from 'cytoscape';\r\n\r\nimport VictimHarms from './victim-harms';\r\nimport Graph from '../graph/graph';\r\nimport GraphElementsFactoryMishapVictims from '../../entities/graph/graph-elements-factory-mishap-victims';\r\nimport { isSystemObjectData } from '../../entities/graph/graph-element';\r\nimport Role, { isRole } from '../../entities/system-description/role';\r\nimport { RootState } from '../../store';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    systemDescription: state.systemModel\r\n})\r\n\r\nconst connector = connect(mapState);\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\ninterface State {\r\n    selectedRoleId: string;\r\n    isMouseOverRole: boolean;\r\n}\r\n\r\nclass GraphView extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.getRoleFromEvent = this.getRoleFromEvent.bind(this);\r\n        this.mouseEntered = this.mouseEntered.bind(this);\r\n        this.mouseLeft = this.mouseLeft.bind(this);\r\n        this.selectRole = this.selectRole.bind(this);\r\n        this.clearRoleSelection = this.clearRoleSelection.bind(this);\r\n\r\n        this.state = {\r\n            selectedRoleId: '',\r\n            isMouseOverRole: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const elementsFactory = new GraphElementsFactoryMishapVictims();\r\n        const elements = elementsFactory.mapSystemDescription(this.props.systemDescription);\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Graph\r\n                    elements={elements}\r\n                    cursorStyle={this.state.isMouseOverRole ? 'pointer' : 'default'}\r\n                    graphClicked={this.clearRoleSelection}\r\n                    mouseEnteredNode={this.mouseEntered}\r\n                    mouseLeftNode={this.mouseLeft}\r\n                    nodeClicked={this.selectRole}\r\n                />\r\n                <VictimHarms\r\n                    selectedRole={this.props.systemDescription.roles\r\n                        .find(e => e.id === this.state.selectedRoleId)}\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private getRoleFromEvent(event: EventObject): Role | undefined {\r\n        const ele: Singular = event.target.element();\r\n        const data = ele.data();\r\n        if (isSystemObjectData(data) && isRole(data.systemObject)) {\r\n            return data.systemObject;\r\n        }\r\n    }\r\n\r\n    private mouseEntered(event: EventObject) {\r\n        if (this.getRoleFromEvent(event)) {\r\n            this.setState({ ...this.state, ...{ isMouseOverRole: true } });\r\n        }\r\n    }\r\n\r\n    private mouseLeft(event: EventObject) {\r\n        if (this.getRoleFromEvent(event)) {\r\n            this.setState({ ...this.state, ...{ isMouseOverRole: false } });\r\n        }\r\n    }\r\n\r\n    private selectRole(event: EventObject) {\r\n        const role = this.getRoleFromEvent(event);\r\n        if (role) {\r\n            event.preventDefault();\r\n            this.setState({ ...this.state, ...{ selectedRoleId: role.id } });\r\n        }\r\n    }\r\n\r\n    private clearRoleSelection(event: EventObject) {\r\n        if (!event.isDefaultPrevented()) {\r\n            this.setState({ ...this.state, ...{ selectedRoleId: '' } });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connector(GraphView);\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { Action, Dispatch } from 'redux';\r\nimport { TableRow, TableCell, Chip, TextField, IconButton, makeStyles } from '@material-ui/core';\r\n\r\nimport { Add } from '@material-ui/icons';\r\nimport Role, { MishapVictim } from '../../entities/system-description/role';\r\nimport { addPossibleHarm, removePossibleHarm } from '../../store/system-model/actions';\r\nimport { RootState } from '../../store';\r\nimport Hazard from '../../entities/hazard-population/hazard';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    hazards: state.systemModel.hazards\r\n});\r\n\r\nconst mapDispatch = (dispatch: Dispatch<Action>) => ({\r\n    harmAdded: (mishapVictim: MishapVictim, harm: string) =>\r\n        dispatch(addPossibleHarm(mishapVictim, harm)),\r\n    harmDeleted: (mishapVictim: MishapVictim, harm: string, hazards: Hazard[]) =>\r\n        removePossibleHarm(mishapVictim, harm, hazards, dispatch)\r\n});\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {\r\n    role: Role;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    chip: {\r\n        marginRight: theme.spacing(1),\r\n    }\r\n}));\r\n\r\nconst HarmsTableRow: React.FC<Props> = (props: Props) => {\r\n    const classes = useStyles();\r\n\r\n    const addHarm = (ev: React.FormEvent<HTMLFormElement>) => {\r\n        const form = ev.currentTarget;\r\n        const harm = (form.elements.namedItem(\"harm\") as HTMLInputElement).value;\r\n        form.reset();\r\n        ev.preventDefault();\r\n        props.harmAdded(props.role, harm);\r\n    };\r\n\r\n    const deleteHarm = (harm: string) => {\r\n        props.harmDeleted(props.role, harm, props.hazards);\r\n    };\r\n\r\n    return (\r\n        <TableRow>\r\n            <TableCell component='th' scope='row'>\r\n                {props.role.name}\r\n            </TableCell>\r\n            <TableCell align='left'>\r\n                {props.role.possibleHarms\r\n                    .sort((a, b) => a.localeCompare(b))\r\n                    .map((harm, index) =>\r\n                        <Chip\r\n                            className={classes.chip}\r\n                            key={index}\r\n                            label={harm}\r\n                            variant='outlined'\r\n                            onDelete={() => deleteHarm(harm)}\r\n                        />)}\r\n            </TableCell>\r\n            <TableCell align='right'>\r\n                <form action='#' onSubmit={addHarm}>\r\n                    <TextField\r\n                        required\r\n                        autoFocus\r\n                        margin='dense'\r\n                        type='text'\r\n                        name='harm'\r\n                        placeholder='Add Harm'\r\n                        autoComplete='off'\r\n                    />\r\n                    <IconButton size='small' type='submit' edge='end' title='Add'>\r\n                        <Add />\r\n                    </IconButton>\r\n                </form>\r\n            </TableCell>\r\n        </TableRow>\r\n    );\r\n};\r\n\r\nexport default connector(HarmsTableRow);\r\n","import React from 'react';\r\nimport { TableRow, TableCell, FormControl, InputLabel, Select, MenuItem, makeStyles } from '@material-ui/core';\r\nimport Role from '../../entities/system-description/role';\r\n\r\ninterface Props {\r\n    roles: Role[];\r\n    roleSelected: (role: Role) => void;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    }\r\n}));\r\n\r\nconst SelectRoleTableRow: React.FC<Props> = (props: Props) => {\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        const roleId = event.target.value as string;\r\n        props.roleSelected(props.roles.find(e => e.id === roleId) as Role);\r\n    };\r\n\r\n    return (\r\n        <TableRow>\r\n            <TableCell>\r\n                <FormControl className={classes.formControl}>\r\n                    <InputLabel id='label-select-role'>Select role</InputLabel>\r\n                    <Select\r\n                        labelId='label-select-role'\r\n                        onChange={handleChange}\r\n                        value=''\r\n                    >\r\n                        {\r\n                            props.roles\r\n                                .sort((a, b) => a.name.localeCompare(b.name))\r\n                                .map(e => <MenuItem key={e.id} value={e.id}>{e.name}</MenuItem>)\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n            </TableCell>\r\n            <TableCell colSpan={2}>\r\n            </TableCell>\r\n        </TableRow>\r\n    );\r\n};\r\n\r\nexport default SelectRoleTableRow;\r\n","import React from 'react';\r\nimport { makeStyles, Button } from '@material-ui/core';\r\n\r\ninterface Props {\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    button: {\r\n        marginLeft: theme.appSpacing.standard,\r\n        marginTop: theme.appSpacing.standard,\r\n        marginBottom: theme.appSpacing.fabOverlap\r\n    },\r\n}));\r\n\r\nconst CornerButtonPrimary: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Button\r\n            className={classes.button}\r\n            variant='contained'\r\n            color='primary'\r\n            onClick={props.onClick}\r\n            disabled={props.disabled}\r\n        >\r\n            {props.children}\r\n        </Button>\r\n    );\r\n};\r\n\r\nexport default CornerButtonPrimary;\r\n","import React, { useState } from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { TableContainer, Table, TableHead, TableRow, TableCell, TableBody } from '@material-ui/core';\r\n\r\nimport HarmsTableRow from './harms-table-row';\r\nimport SelectRoleTableRow from './select-role-table-row';\r\nimport Role, { isMishapVictim } from '../../entities/system-description/role';\r\nimport CornerButtonPrimary from '../shared/corner-button-primary';\r\nimport { RootState } from '../../store';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    roles: state.systemModel.roles\r\n})\r\n\r\nconst connector = connect(mapState);\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nconst TableView: React.FC<Props> = (props: Props) => {\r\n\r\n    const [newlyAdded, setNewlyAdded] = useState<string[]>([]);\r\n    const [isSelectingRole, setIsSelectingRole] = useState(false);\r\n\r\n    const addNewRole = (role: Role) => {\r\n        setNewlyAdded(newlyAdded.concat(role.id));\r\n        setIsSelectingRole(false);\r\n    };\r\n\r\n    const existingMishapVictims = props.roles\r\n        .filter(e => isMishapVictim(e) && !newlyAdded.some(n => n === e.id))\r\n        .sort((a, b) => a.name.localeCompare(b.name));\r\n    // sorting - existing alphabeticaly, newly added in order of adding\r\n    const newlyAddedMishapVictims = props.roles.filter(e => newlyAdded.some(n => n === e.id));\r\n    const mishapVictims = existingMishapVictims.concat(newlyAddedMishapVictims);\r\n\r\n    const rolesToSelect = props.roles.filter(r => !mishapVictims.some(e => e.id === r.id));\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableContainer>\r\n                <Table size='small'>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Mishap Victims</TableCell>\r\n                            <TableCell align='left'>Possible Harms</TableCell>\r\n                            <TableCell align='right'>&nbsp;</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {!isSelectingRole && mishapVictims.length === 0 ?\r\n                            <TableRow>\r\n                                <TableCell align='center' colSpan={3}>\r\n                                    No mishap victims identified\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            :\r\n                            mishapVictims.map(e => (\r\n                                <HarmsTableRow\r\n                                    key={e.id}\r\n                                    role={e}\r\n                                />\r\n                            ))}\r\n                        {isSelectingRole ?\r\n                            <SelectRoleTableRow roles={rolesToSelect} roleSelected={addNewRole} />\r\n                            :\r\n                            undefined}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <CornerButtonPrimary\r\n                onClick={() => { !isSelectingRole && setIsSelectingRole(true) }}\r\n                disabled={rolesToSelect.length === 0}\r\n            >\r\n                {rolesToSelect.length === 0 ?\r\n                    'All mishap victims have been identified' :\r\n                    'Add new mishap victim'}\r\n            </CornerButtonPrimary>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default connector(TableView);\r\n","import React from 'react';\r\nimport { makeStyles, Fab } from '@material-ui/core';\r\n\r\ninterface Props {\r\n    onClick: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    fab: {\r\n        position: 'fixed',\r\n        marginBottom: theme.spacing(2),\r\n        marginLeft: theme.spacing(2),\r\n        bottom: 0,\r\n        zIndex: theme.zIndex.graphAction,\r\n    }\r\n}));\r\n\r\nconst CornerFab: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Fab variant='extended'\r\n            className={classes.fab}\r\n            size='medium'\r\n            onClick={props.onClick}\r\n        >\r\n            {props.children}\r\n        </Fab>\r\n    );\r\n};\r\n\r\nexport default CornerFab;\r\n","import React, { useState } from 'react';\r\nimport GraphView from './graph-view';\r\nimport { TableChart, BubbleChart } from '@material-ui/icons';\r\nimport TableView from './table-view';\r\nimport CornerFab from '../shared/corner-fab';\r\n\r\nconst MishapVictimIdentification: React.FC = () => {\r\n    const [isGraphView, setIsGraphView] = useState(true);\r\n\r\n    if (isGraphView) {\r\n        return (\r\n            <React.Fragment>\r\n                <CornerFab onClick={() => setIsGraphView(false)} >\r\n                    <TableChart />\r\n                    Table View\r\n                </CornerFab>\r\n                <GraphView />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CornerFab onClick={() => setIsGraphView(true)} >\r\n                <BubbleChart />\r\n                Graph View\r\n            </CornerFab>\r\n            <TableView />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default MishapVictimIdentification;\r\n","import SystemObject from \"./system-description/system-object\";\r\nimport Connection from \"./system-description/connection\";\r\nimport Subsystem from \"./system-description/subsystem\";\r\nimport Role from \"./system-description/role\";\r\nimport Hazard from \"./hazard-population/hazard\";\r\nimport { FlowStepId } from \"./meny/flow-step-id\";\r\n\r\nexport interface SystemDescription {\r\n    kinds: SystemObject[];\r\n    roles: Role[];\r\n    relators: SystemObject[];\r\n    systemObjectConnections: Connection[];\r\n    subsystems: Subsystem[];\r\n    hazards: Hazard[];\r\n}\r\n\r\nexport interface SystemModel extends SystemDescription {\r\n    projectName: string;\r\n    currentStep: FlowStepId;\r\n    lastCompletedStep: FlowStepId;\r\n    nextHazardId: number;\r\n};\r\n\r\nexport function createObjectId(prefix: string) {\r\n    return `${prefix}-${new Date().getTime()}`;\r\n}\r\n","import React from 'react';\r\nimport { makeStyles, Fab } from '@material-ui/core';\r\n\r\ninterface ButtonDescription {\r\n    icon: JSX.Element;\r\n    text: string;\r\n    action: () => void;\r\n}\r\n\r\ninterface Props {\r\n    buttons: ButtonDescription[];\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        position: 'fixed',\r\n        bottom: theme.appSpacing.standard,\r\n        zIndex: theme.zIndex.graphAction\r\n    },\r\n    fab: {\r\n        marginLeft: theme.appSpacing.standard,\r\n    }\r\n}));\r\n\r\nconst ToolbarButtons: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {props.buttons.map((e, index) => (\r\n                <Fab\r\n                    key={index}\r\n                    className={classes.fab}\r\n                    size='small'\r\n                    color='primary'\r\n                    variant='extended'\r\n                    onClick={e.action}\r\n                >\r\n                    {e.icon}\r\n                    {e.text}\r\n                </Fab>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToolbarButtons;\r\n","import React, { useState } from 'react';\r\nimport { Dialog, Backdrop, DialogActions, Button, TextField, DialogContent, FormControl, InputLabel, Select, MenuItem, makeStyles } from '@material-ui/core';\r\n\r\nimport { isSystemObject } from '../../entities/system-description/system-description-entity';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport SystemObject from '../../entities/system-description/system-object';\r\n\r\ninterface Props {\r\n    entity: SystemObject | Subsystem;\r\n    subsystemsAvailable: Subsystem[];\r\n    entityUpdated: (entity: SystemObject | Subsystem) => void;\r\n    editCancelled: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    formControl: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst NodeEditor: React.FC<Props> = (props: Props) => {\r\n\r\n    const [entity, setEntity] = useState(props.entity);\r\n\r\n    const classes = useStyles();\r\n\r\n    const defaultParent = \"\";\r\n\r\n    let parentEditor;\r\n    if (isSystemObject(entity)) {\r\n        const subsystems = props.subsystemsAvailable\r\n            .sort((a, b) => a.name.localeCompare(b.name))\r\n            .map(e => <MenuItem key={e.id} value={e.id}>{e.name}</MenuItem>);\r\n\r\n        let entityParent = defaultParent;\r\n        if (entity.parent) {\r\n            entityParent = entity.parent;\r\n        }\r\n\r\n        const updateParent = (ev: React.ChangeEvent<{ value: unknown }>) => {\r\n            let parent: string | undefined;\r\n            if (ev.target.value !== defaultParent) {\r\n                parent = ev.target.value as string;\r\n            }\r\n            setEntity({ ...entity, ...{ parent: parent } });\r\n        };\r\n\r\n        parentEditor = (\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel shrink id=\"label-subsystem\">\r\n                    Subsystem\r\n                </InputLabel>\r\n                <Select\r\n                    labelId=\"label-subsystem\"\r\n                    value={entityParent}\r\n                    onChange={updateParent}\r\n                    displayEmpty\r\n                    disabled={subsystems.length === 0}\r\n                    className={classes.selectEmpty}\r\n                >\r\n                    <MenuItem key=\"-1\" value={defaultParent}>\r\n                        <em>None</em>\r\n                    </MenuItem>\r\n                    {subsystems}\r\n                </Select>\r\n            </FormControl>\r\n        );\r\n    }\r\n\r\n    const updateName = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n        setEntity({ ...entity, ...{ name: ev.target.value } });\r\n    };\r\n\r\n    const submitEntity = (ev: React.FormEvent) => {\r\n        props.entityUpdated(entity);\r\n        ev.preventDefault();\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Backdrop open={!!props.entity} />\r\n            <Dialog open={!!props.entity}>\r\n                <form autoComplete=\"off\" onSubmit={submitEntity} onReset={() => props.editCancelled()}>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            required\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"Name\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            defaultValue={entity.name}\r\n                            onChange={updateName}\r\n                        />\r\n                        {parentEditor}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\">OK</Button>\r\n                        <Button type=\"reset\" color=\"primary\">Cancel</Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default NodeEditor;\r\n","import React, { createRef, useState, useEffect, useCallback } from 'react';\r\nimport { Singular } from 'cytoscape';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Popper from 'popper.js';\r\n\r\ninterface Props {\r\n    element: Singular;\r\n    placement?: Popper.Placement\r\n}\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    popper: {\r\n        zIndex: theme.zIndex.nodeAction\r\n    }\r\n}));\r\n\r\nconst EVENT_POSITION = 'position';\r\nconst EVENT_MOUSEUP = 'mouseup';\r\n\r\nconst NodePopper: React.FC<Props> = (props) => {\r\n    const root = createRef<HTMLDivElement>();\r\n    const [popper, setPopper] = useState<Popper | null>(null);\r\n\r\n    const destroyPopper = useCallback(() => {\r\n        if (popper) {\r\n            props.element.off(EVENT_POSITION, undefined, popper.scheduleUpdate);\r\n            props.element.off(EVENT_MOUSEUP, undefined, destroyPopper);\r\n            popper.destroy();\r\n            setPopper(null);\r\n        }\r\n    }, [popper, props.element]);\r\n\r\n    useEffect(() => {\r\n        if (root.current && !popper) {\r\n            const popperObj = (props.element as any).popper({\r\n                content: () => root.current,\r\n                popper: {\r\n                    placement: props.placement ? props.placement : 'top'\r\n                }\r\n            });\r\n            props.element.on(EVENT_POSITION, popperObj.scheduleUpdate);\r\n            props.element.on(EVENT_MOUSEUP, destroyPopper); // otherwise the popper will dislocate on mouseup\r\n            setPopper(popperObj);\r\n        }\r\n\r\n        return destroyPopper;\r\n    }, [root, popper, props.element, props.placement, destroyPopper]);\r\n\r\n    const classes = useStyle();\r\n\r\n    return <div ref={root} className={classes.popper}>{props.children}</div>;\r\n};\r\n\r\nexport default NodePopper;\r\n","import React from 'react';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\n\r\ninterface Props {\r\n    click: () => void;\r\n}\r\n\r\nconst DeleteElementButton: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n        <IconButton\r\n            size='small'\r\n            title=\"Delete\"\r\n            onClick={props.click}\r\n        >\r\n            <Delete />\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default DeleteElementButton;\r\n","import { NodeSingular, EdgeSingular } from \"cytoscape\";\r\nimport { isSystemObjectData, isConnectionData } from \"./graph-element\";\r\nimport { isRole } from \"../system-description/role\";\r\n\r\nexport function getSystemObject(ele: NodeSingular | EdgeSingular) {\r\n    const data = ele.data();\r\n    if (isSystemObjectData(data)) {\r\n        return data.systemObject;\r\n    }\r\n}\r\n\r\nexport function getRole(ele: NodeSingular | EdgeSingular) {\r\n    const systemObject = getSystemObject(ele);\r\n    if (systemObject && isRole(systemObject)) {\r\n        return systemObject;\r\n    }\r\n}\r\n\r\nexport function getConnection(ele: NodeSingular | EdgeSingular) {\r\n    const data = ele.data();\r\n    if (isConnectionData(data)) {\r\n        return data.connection;\r\n    }\r\n}\r\n","import { HazardCategory } from \"../hazard-description-categorization/hazard-category\";\r\nimport SystemObject from \"../system-description/system-object\";\r\nimport { ObjectTypes } from \"../system-description/object-types\";\r\n\r\ninterface NameIdPair {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport default interface Hazard {\r\n    id: number;\r\n    harmTruthmaker: string;\r\n    description: string;\r\n    mishapVictim: NameIdPair;\r\n    mishapVictimEnvObj: NameIdPair;\r\n    exposure: NameIdPair;\r\n    hazardElement: NameIdPair;\r\n    hazardElementEnvObj: NameIdPair;\r\n    category?: HazardCategory;\r\n}\r\n\r\nexport function isKindInHazard(kind: SystemObject, hazard: Hazard) {\r\n    return hazard.hazardElementEnvObj.id === kind.id ||\r\n        hazard.mishapVictimEnvObj.id === kind.id;\r\n}\r\n\r\nexport function isRoleInHazard(role: SystemObject, hazard: Hazard) {\r\n    return hazard.mishapVictim.id === role.id ||\r\n        hazard.hazardElement.id === role.id;\r\n}\r\n\r\nexport function isRelatorInHazard(relator: SystemObject, hazard: Hazard) {\r\n    return hazard.exposure.id === relator.id;\r\n}\r\n\r\nexport function getIsSystemObjectInHazard(entity: SystemObject) {\r\n    switch (entity.type) {\r\n        case ObjectTypes.kind:\r\n            return (hazard: Hazard) => isKindInHazard(entity, hazard);\r\n        case ObjectTypes.relator:\r\n            return (hazard: Hazard) => isRelatorInHazard(entity, hazard);\r\n        case ObjectTypes.role:\r\n            return (hazard: Hazard) => isRoleInHazard(entity, hazard);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { EdgeSingular } from 'cytoscape';\r\nimport { deleteConnection } from '../../store/system-model/actions';\r\nimport Connection from '../../entities/system-description/connection';\r\nimport DeleteElementButton from './delete-element-button';\r\nimport { getSystemObject } from '../../entities/graph/element-utilities';\r\nimport { showConfirmationDialog } from '../../store/modal-dialog/actions';\r\nimport { RootState } from '../../store';\r\nimport { getIsSystemObjectInHazard } from '../../entities/hazard-population/hazard';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    hazards: state.systemModel.hazards\r\n});\r\n\r\nconst mapDispatch = {\r\n    connectionDeleted: deleteConnection,\r\n    confirm: showConfirmationDialog\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {\r\n    connection: Connection,\r\n    element: EdgeSingular,\r\n    onClick: () => void\r\n}\r\n\r\nconst DeleteConnectionButton: React.FC<Props> = (props) => {\r\n\r\n    const deleteConnection = () => {\r\n        props.onClick();\r\n        const target = getSystemObject(props.element.target());\r\n        if (target) {\r\n            const isTargetInHazard = getIsSystemObjectInHazard(target);\r\n            if (props.hazards.some(isTargetInHazard)) {\r\n                props.confirm(\r\n                    'This connection takes part in one or more hazards. If you delete it those hazards will be deleted as well. Continue?',\r\n                    () => props.connectionDeleted(props.connection, target)\r\n                );\r\n            } else {\r\n                props.connectionDeleted(props.connection, target)\r\n            }\r\n        }\r\n    };\r\n\r\n    return <DeleteElementButton click={deleteConnection} />;\r\n};\r\n\r\nexport default connector(DeleteConnectionButton);\r\n","export enum HazardCategory {\r\n    hazard = 'Hazard',\r\n    initiatingCondition = 'Initiating Condition',\r\n    initiatingEvent = 'Initiating Event',\r\n    mishap = 'Mishap'\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Card, CardHeader, IconButton, Button, Typography, CardContent, CardActions } from '@material-ui/core';\r\nimport { Close } from '@material-ui/icons';\r\nimport { HazardCategory } from '../../../entities/hazard-description-categorization/hazard-category';\r\n\r\ninterface Props {\r\n    cancel: () => void;\r\n    complete: (category: HazardCategory) => void;\r\n}\r\n\r\nenum IntermediateCategory {\r\n    notSet,\r\n    situation,\r\n    event\r\n}\r\n\r\nconst CategorizationWizard: React.FC<Props> = (props) => {\r\n\r\n    const [category, setCategory] = useState(IntermediateCategory.notSet);\r\n\r\n    let question: string;\r\n    let instructions: JSX.Element | null = null;\r\n    let actions: JSX.Element;\r\n\r\n    switch (category) {\r\n        case IntermediateCategory.notSet:\r\n            question = 'Is the hazard description describing a situation (state of affairs) or an event?';\r\n            instructions = (\r\n                <React.Fragment>\r\n                    <p>\r\n                        Note that\r\n                    </p>\r\n                    <p>\r\n                        1) if a hazard description describes that some event is supposed to occur but\r\n                        does not, then the hazard description is regarded as a generic <b>situation</b> that\r\n                        will not trigger the specific event, such as \"the brake command is not issued\",\r\n                    </p>\r\n                    <p>\r\n                        and\r\n                    </p>\r\n                    <p>\r\n                        2) if a hazard description describes a repetitive and continuous behavior, it \r\n                        can be regarded as a <b>situation</b>, such as \"a train is running on the track\".\r\n                    </p>\r\n                </React.Fragment>\r\n            );\r\n            actions = (\r\n                <React.Fragment>\r\n                    <Button\r\n                        size='small'\r\n                        variant='outlined'\r\n                        onClick={() => setCategory(IntermediateCategory.situation)}\r\n                    >\r\n                        Situation\r\n                    </Button>\r\n                    <Button\r\n                        size='small'\r\n                        variant='outlined'\r\n                        onClick={() => setCategory(IntermediateCategory.event)}\r\n                    >\r\n                        Event\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n            break;\r\n        case IntermediateCategory.situation:\r\n            question = 'Can the situation trigger mishaps when some dispositions in the situation are manifested ?';\r\n            actions = (\r\n                <React.Fragment>\r\n                    <Button\r\n                        size='small'\r\n                        variant='outlined'\r\n                        onClick={() => props.complete(HazardCategory.hazard)}\r\n                    >\r\n                        Yes &mdash; Hazard\r\n                    </Button>\r\n                    <Button\r\n                        size='small'\r\n                        variant='outlined'\r\n                        onClick={() => props.complete(HazardCategory.initiatingCondition)}\r\n                    >\r\n                        No &mdash; Initiating Condition\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n            break;\r\n        case IntermediateCategory.event:\r\n            question = 'Can the event bring about severe injuries of people or damages to the environment?';\r\n            actions = (\r\n                <React.Fragment>\r\n                    <Button\r\n                        size='small'\r\n                        variant='outlined'\r\n                        onClick={() => props.complete(HazardCategory.mishap)}\r\n                    >\r\n                        Yes &mdash; Mishap\r\n                    </Button>\r\n                    <Button\r\n                        size='small'\r\n                        variant='outlined'\r\n                        onClick={() => props.complete(HazardCategory.initiatingEvent)}\r\n                    >\r\n                        No &mdash; Initiating Event\r\n                    </Button>\r\n                </React.Fragment>\r\n            );\r\n            break;\r\n        default:\r\n            throw new Error('Unknown intermediate category');\r\n    }\r\n\r\n    return (\r\n        <Card variant='outlined'>\r\n            <CardHeader\r\n                action={\r\n                    <IconButton size='small' onClick={props.cancel}>\r\n                        <Close />\r\n                    </IconButton>\r\n                }\r\n                title={question}\r\n            />\r\n            {\r\n                instructions ?\r\n                    <CardContent>\r\n                        <Typography variant='body2' component='div'>\r\n                            {instructions}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    :\r\n                    undefined\r\n            }\r\n            <CardActions>\r\n                {actions}\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default CategorizationWizard;\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport Popper from 'popper.js';\r\nimport { NodeSingular, EventObject, Singular, EdgeSingular } from 'cytoscape';\r\n\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport GraphElementsFactory from '../../entities/graph/graph-elements-factory';\r\nimport Graph from '../graph/graph';\r\nimport NodeEditor from './node-editor';\r\nimport { isSystemObject, isSubsystem } from '../../entities/system-description/system-description-entity';\r\nimport { isSystemObjectData, isSubsystemData, GraphElementPosition } from '../../entities/graph/graph-element';\r\nimport NodePopper from '../graph/node-popper';\r\nimport Connection from '../../entities/system-description/connection';\r\nimport DeleteConnectionButton from './delete-connection-button';\r\nimport { createSubsystem, updateSubsystem, createConnection, renameSystemObject, createSystemObject, updateSystemObject } from '../../store/system-model/actions';\r\nimport { getConnection } from '../../entities/graph/element-utilities';\r\nimport { RootState } from '../../store';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    system: state.systemModel\r\n});\r\n\r\nconst mapDispatch = {\r\n    subsystemCreated: createSubsystem,\r\n    subsystemUpdated: updateSubsystem,\r\n    connectionCreated: createConnection,\r\n    systemObjectRenamed: renameSystemObject,\r\n    systemObjectCreated: createSystemObject,\r\n    systemObjectUpdated: updateSystemObject\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {\r\n    objectEditing?: SystemObject | Subsystem | null;\r\n    objectEditingDone?: () => void;\r\n    nodeConnecting: NodeSingular | null;\r\n    nodeConnectingDone: () => void;\r\n    tryCreateConnection: (source: NodeSingular, target: NodeSingular) => Connection | null;\r\n    toolbarButtons?: JSX.Element;\r\n    elementDisplayPopper: Singular | null;\r\n    elementDisplayPopperChanged: (element: Singular | null) => void;\r\n    renderSystemObjectActions: (object: SystemObject, element: NodeSingular) => JSX.Element;\r\n    renderSubsystemActions: (subsystem: Subsystem, element: NodeSingular) => JSX.Element;\r\n}\r\n\r\ninterface State {\r\n    isConnectionValid: boolean;\r\n}\r\n\r\nexport interface StepState {\r\n    objectEditing: SystemObject | Subsystem | null;\r\n    nodeConnecting: NodeSingular | null;\r\n    elementDisplayPopper: Singular | null;\r\n}\r\n\r\nconst DEFAULT_POSITION = {\r\n    x: 100, y: 50\r\n};\r\n\r\nclass SdfStepBase extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.showNodeActions = this.showNodeActions.bind(this);\r\n        this.hideNodeActions = this.hideNodeActions.bind(this);\r\n        this.createConnection = this.createConnection.bind(this);\r\n        this.completeEditEntity = this.completeEditEntity.bind(this);\r\n        this.updateNodePosition = this.updateNodePosition.bind(this);\r\n        this.validateConnection = this.validateConnection.bind(this);\r\n        this.preventOverlap = this.preventOverlap.bind(this);\r\n        this.cancelEditEntity = this.cancelEditEntity.bind(this);\r\n        this.renderConnectionActions = this.renderConnectionActions.bind(this);\r\n\r\n        this.state = {\r\n            isConnectionValid: false\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const elementsFactory = new GraphElementsFactory();\r\n        const elements = elementsFactory.mapSystemDescription(this.props.system);\r\n\r\n        let actionButtonsPlacement: Popper.Placement = 'top';\r\n        if (this.props.elementDisplayPopper && this.props.elementDisplayPopper.isNode()) {\r\n            if (isSystemObjectData(this.props.elementDisplayPopper.data())) {\r\n                actionButtonsPlacement = 'top-start';\r\n            } else {\r\n                actionButtonsPlacement = 'bottom-start';\r\n            }\r\n        }\r\n\r\n        let cursorStyle = 'default';\r\n        if (this.props.nodeConnecting) {\r\n            if (this.state.isConnectionValid) {\r\n                cursorStyle = 'pointer';\r\n            } else {\r\n                cursorStyle = 'not-allowed';\r\n            }\r\n        }\r\n\r\n        let elementActions = <React.Fragment></React.Fragment>;\r\n        const actionElement = this.props.elementDisplayPopper;\r\n        if (actionElement) {\r\n            if (actionElement.isEdge()) {\r\n                elementActions = this.renderConnectionActions(actionElement);\r\n            } else if (actionElement.isNode()) {\r\n                const data = actionElement.data();\r\n                if (isSystemObjectData(data)) {\r\n                    elementActions = this.props.renderSystemObjectActions(data.systemObject, actionElement);\r\n                } else if (isSubsystemData(data)) {\r\n                    elementActions = this.props.renderSubsystemActions(data.subsystem, actionElement);\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Graph\r\n                    elements={elements}\r\n                    cursorStyle={cursorStyle}\r\n                    graphClicked={this.props.nodeConnectingDone}\r\n                    nodeClicked={this.createConnection}\r\n                    mouseEnteredNode={this.showNodeActions}\r\n                    mouseLeftNode={this.hideNodeActions}\r\n                    nodeMoved={this.updateNodePosition}\r\n                    useCollapseApi={true}\r\n                />\r\n                {this.props.toolbarButtons}\r\n                {\r\n                    this.props.elementDisplayPopper ?\r\n                        <NodePopper\r\n                            element={this.props.elementDisplayPopper}\r\n                            placement={actionButtonsPlacement}\r\n                        >\r\n                            {elementActions}\r\n                        </NodePopper>\r\n                        :\r\n                        undefined\r\n                }\r\n                {\r\n                    this.props.objectEditing ?\r\n                        <NodeEditor\r\n                            entity={this.props.objectEditing}\r\n                            subsystemsAvailable={this.props.system.subsystems}\r\n                            entityUpdated={this.completeEditEntity}\r\n                            editCancelled={this.cancelEditEntity}\r\n                        />\r\n                        :\r\n                        undefined\r\n                }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private renderConnectionActions(element: EdgeSingular) {\r\n        if (this.props.tryCreateConnection(element.source(), element.target())) {\r\n\r\n            const connection = getConnection(element);\r\n            if (connection) {\r\n                return <DeleteConnectionButton\r\n                    connection={connection}\r\n                    element={element}\r\n                    onClick={() => this.props.elementDisplayPopperChanged(null)}\r\n                />;\r\n            }\r\n        }\r\n\r\n        return <React.Fragment></React.Fragment>;\r\n    }\r\n\r\n    private showNodeActions(event: EventObject) {\r\n        // triggered twice for element in subsystem which breaks popper\r\n        if (this.props.elementDisplayPopper) {\r\n            return;\r\n        }\r\n\r\n        let isConnectionValid = false;\r\n        const ele = event.target as Singular;\r\n        if (ele.isNode()) {\r\n            isConnectionValid = !!this.validateConnection(ele);\r\n        }\r\n\r\n        this.setState({ ...this.state, ...{ isConnectionValid: isConnectionValid } });\r\n        this.props.elementDisplayPopperChanged(event.target);\r\n    }\r\n\r\n    private hideNodeActions() {\r\n        this.setState({ ...this.state, ...{ isConnectionValid: false } });\r\n        this.props.elementDisplayPopperChanged(null);\r\n    }\r\n\r\n    private createConnection(event: EventObject) {\r\n        const target = event.target as Singular;\r\n        if (target.isNode()) {\r\n            const connection = this.validateConnection(target);\r\n            if (connection) {\r\n                this.props.connectionCreated(connection);\r\n            }\r\n        }\r\n        this.props.nodeConnectingDone();\r\n    }\r\n\r\n    private validateConnection(target: NodeSingular) {\r\n        if (!this.props.nodeConnecting ||\r\n            this.props.nodeConnecting === target ||\r\n            this.props.nodeConnecting.edgesWith(target).length !== 0\r\n        ) {\r\n            return null;\r\n        }\r\n        return this.props.tryCreateConnection(this.props.nodeConnecting, target);\r\n    }\r\n\r\n    private updateNodePosition(event: EventObject) {\r\n        const node = event.target as NodeSingular;\r\n        const position = node.position();\r\n        const data = node.data();\r\n        if (isSystemObjectData(data)) {\r\n            const systemObject = data.systemObject;\r\n            this.props.systemObjectUpdated(\r\n                { ...systemObject, ...{ posX: position.x, posY: position.y } });\r\n            if (data.parent && node.parent().length > 0) {\r\n                // save position of parent subsystem as it changes when its children move\r\n                const parent = this.props.system.subsystems.find(e => e.id === data.parent);\r\n                if (parent) {\r\n                    const parentPosition = node.parent()[0].position();\r\n                    this.props.subsystemUpdated(\r\n                        { ...parent, ...{ posX: parentPosition.x, posY: parentPosition.y } });\r\n                }\r\n            }\r\n\r\n        } else if (isSubsystemData(data)) {\r\n            const subsystem = data.subsystem;\r\n            this.props.subsystemUpdated({ ...subsystem, ...{ posX: position.x, posY: position.y } });\r\n            // update position of children nodes\r\n            for (var i = 0; i < node.children().length; i++) {\r\n                const childNode = node.children()[i];\r\n                const childData = childNode.data();\r\n                if (isSystemObjectData(childData)) {\r\n                    const childObject = childData.systemObject;\r\n                    const position = childNode.position();\r\n                    this.props.systemObjectUpdated(\r\n                        { ...childObject, ...{ posX: position.x, posY: position.y } });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private cancelEditEntity() {\r\n        this.props.objectEditingDone && this.props.objectEditingDone();\r\n    }\r\n\r\n    private completeEditEntity(entity: SystemObject | Subsystem) {\r\n        const allNodes = new GraphElementsFactory().getAllNodes(this.props.system);\r\n        const existingEntity = allNodes.find(e => e.id === entity.id);\r\n\r\n        if (existingEntity) {\r\n            if (isSystemObject(entity) && isSystemObject(existingEntity)) {\r\n                let positionOverride = null;\r\n                let parentId: string | undefined = undefined;\r\n                if (entity.parent && (!existingEntity.parent || existingEntity.parent !== entity.parent)) {\r\n                    const parent = this.props.system.subsystems.find(e => e.id === entity.parent);\r\n                    if (parent) {\r\n                        positionOverride = { x: parent.posX, y: parent.posY };\r\n                        parentId = parent.id;\r\n                    }\r\n                } else if (!entity.parent && existingEntity.parent) {\r\n                    positionOverride = DEFAULT_POSITION;\r\n                }\r\n\r\n                if (positionOverride) {\r\n                    const adjustedPosition = this.preventOverlap(positionOverride, allNodes, parentId);\r\n                    entity.posX = adjustedPosition.x;\r\n                    entity.posY = adjustedPosition.y;\r\n                }\r\n\r\n                if (entity.name !== existingEntity.name) {\r\n                    this.props.systemObjectRenamed(entity);\r\n                }\r\n            }\r\n\r\n            if (isSubsystem(entity)) {\r\n                this.props.subsystemUpdated(entity);\r\n            } else {\r\n                this.props.systemObjectUpdated(entity);\r\n            }\r\n\r\n        } else {\r\n            let nodePosition = DEFAULT_POSITION;\r\n            let parentId: string | undefined;\r\n            if (isSystemObject(entity) && entity.parent) {\r\n                const parent = this.props.system.subsystems.find(e => e.id === entity.parent);\r\n                if (parent) {\r\n                    nodePosition = { x: parent.posX, y: parent.posY };\r\n                    parentId = parent.id;\r\n                }\r\n            }\r\n            const adjustedPosition = this.preventOverlap(nodePosition, allNodes, parentId);\r\n            entity.posX = adjustedPosition.x;\r\n            entity.posY = adjustedPosition.y;\r\n\r\n            if (isSubsystem(entity)) {\r\n                this.props.subsystemCreated(entity);\r\n            } else {\r\n                this.props.systemObjectCreated(entity);\r\n            }\r\n        }\r\n\r\n        this.props.objectEditingDone && this.props.objectEditingDone();\r\n    };\r\n\r\n    private preventOverlap(\r\n        position: GraphElementPosition,\r\n        otherNodes: (SystemObject | Subsystem)[],\r\n        parentId?: string\r\n    ): GraphElementPosition {\r\n        if (otherNodes.every(e => (e.posX !== position.x && e.posY !== position.y) || e.id === parentId)) {\r\n            return position;\r\n        }\r\n        return this.preventOverlap({ x: position.x + 20, y: position.y + 20 }, otherNodes);\r\n    }\r\n}\r\n\r\nexport default connector(SdfStepBase)\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { deleteSystemObject } from '../../store/system-model/actions';\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport DeleteElementButton from './delete-element-button';\r\nimport { showConfirmationDialog } from '../../store/modal-dialog/actions';\r\nimport { RootState } from '../../store';\r\nimport { getIsSystemObjectInHazard } from '../../entities/hazard-population/hazard';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    hazards: state.systemModel.hazards\r\n});\r\n\r\nconst mapDispatch = {\r\n    systemObjectDeleted: deleteSystemObject,\r\n    confirm: showConfirmationDialog\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {\r\n    systemObject: SystemObject,\r\n    onClick: () => void\r\n}\r\n\r\nconst DeleteSystemObjectButton: React.FC<Props> = (props) => {\r\n\r\n    const deleteObject = () => {\r\n        props.onClick();\r\n        const isObjectInHazard = getIsSystemObjectInHazard(props.systemObject);\r\n        if (props.hazards.some(isObjectInHazard)) {\r\n            props.confirm(\r\n                'This object takes part in one or more hazards. If you delete it those hazards will be deleted as well. Continue?',\r\n                () => props.systemObjectDeleted(props.systemObject));\r\n        } else {\r\n            props.systemObjectDeleted(props.systemObject);\r\n        }\r\n    };\r\n\r\n    return <DeleteElementButton click={deleteObject} />;\r\n};\r\n\r\nexport default connector(DeleteSystemObjectButton);\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { NodeSingular } from 'cytoscape';\r\nimport { deleteSystemObject, deleteSubsystem } from '../../store/system-model/actions';\r\nimport { getSystemObject } from '../../entities/graph/element-utilities';\r\nimport DeleteElementButton from './delete-element-button';\r\nimport { showConfirmationDialog } from '../../store/modal-dialog/actions';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport { RootState } from '../../store';\r\nimport { getIsSystemObjectInHazard } from '../../entities/hazard-population/hazard';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    hazards: state.systemModel.hazards\r\n});\r\n\r\nconst mapDispatch = {\r\n    subsystemDeleted: deleteSubsystem,\r\n    systemObjectDeleted: deleteSystemObject,\r\n    confirm: showConfirmationDialog\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {\r\n    subsystem: Subsystem,\r\n    element: NodeSingular,\r\n    onClick: () => void\r\n}\r\n\r\nconst DeleteSubsystemButton: React.FC<Props> = (props) => {\r\n\r\n    const deleteSubsystemWithChildren = (children: (SystemObject | undefined)[]) => {\r\n        children.forEach(e => e && props.systemObjectDeleted(e));\r\n        props.subsystemDeleted(props.subsystem);\r\n    };\r\n\r\n    const checkHazardsAndDelete = () => {\r\n        const children = props.element.children().map(e => getSystemObject(e));\r\n        const hasHazardsAssociated = children.some(e => {\r\n            if (!e) {\r\n                return false;\r\n            }\r\n            const isObjectInHazard = getIsSystemObjectInHazard(e);\r\n            return props.hazards.some(isObjectInHazard);\r\n        });\r\n\r\n        if (!hasHazardsAssociated) {\r\n            deleteSubsystemWithChildren(children);\r\n        } else {\r\n            props.confirm(\r\n                'Some of the subsystem\\'s child objects take part in one ore more hazards. If you delete the subsystem those hazards will be removed as well. Continue?',\r\n                () => deleteSubsystemWithChildren(children)\r\n            );\r\n        }\r\n    };\r\n\r\n    const deleteSubsystem = () => {\r\n        props.onClick();\r\n        if (props.element.isChildless()) {\r\n            props.subsystemDeleted(props.subsystem);\r\n        } else {\r\n            props.confirm(\r\n                'All the objects in the subsystem will be removed as well. Continue?',\r\n                checkHazardsAndDelete\r\n            );\r\n        }\r\n    };\r\n\r\n    return <DeleteElementButton click={deleteSubsystem} />;\r\n};\r\n\r\nexport default connector(DeleteSubsystemButton);\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { RootState } from '../../store';\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport { showConfirmationDialog } from '../../store/modal-dialog/actions';\r\nimport { getIsSystemObjectInHazard } from '../../entities/hazard-population/hazard';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Edit } from '@material-ui/icons';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport { isSubsystem } from '../../entities/system-description/system-description-entity';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    hazards: state.systemModel.hazards\r\n});\r\n\r\nconst mapDispatch = {\r\n    confirm: showConfirmationDialog\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {\r\n    node: SystemObject | Subsystem;\r\n    onClick: () => void;\r\n}\r\n\r\nconst EditNodeButton: React.FC<Props> = (props) => {\r\n\r\n    const handleClick = () => {\r\n        if (isSubsystem(props.node)) {\r\n            props.onClick();\r\n        } else {\r\n            const isObjectInHazard = getIsSystemObjectInHazard(props.node);\r\n            if (props.hazards.some(isObjectInHazard)) {\r\n                props.confirm(\r\n                    'This object takes part in one or more hazards. If you edit it those hazards will be affected. Continue?',\r\n                    props.onClick);\r\n            } else {\r\n                props.onClick();\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <IconButton\r\n            size='small'\r\n            title='Edit'\r\n            onClick={handleClick}\r\n        >\r\n            <Edit />\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default connector(EditNodeButton);\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { NodeSingular } from 'cytoscape';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { ExpandMore, ExpandLess } from '@material-ui/icons';\r\nimport { getCollapseApi } from '../../entities/graph/collapse-api';\r\nimport { updateSubsystem } from '../../store/system-model/actions';\r\n\r\nconst mapDispatch = {\r\n    subsystemUpdated: updateSubsystem,\r\n};\r\n\r\nconst connector = connect(null, mapDispatch);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {\r\n    node: NodeSingular;\r\n    subsystem: Subsystem;\r\n}\r\n\r\nconst SubsystemCollapseButton: React.FC<Props> = (props) => {\r\n\r\n    const toggleCollapsedState = () => {\r\n        const cy = props.node.cy();\r\n        const collapseApi = getCollapseApi(cy);\r\n        const newStateCollapsed = !props.subsystem.isCollapsed;\r\n        if (newStateCollapsed) {\r\n            collapseApi.collapse(props.node);\r\n        } else {\r\n            collapseApi.expand(props.node);\r\n        }\r\n        // collapsing tool messes up everything\r\n        cy.json(cy.json()); // force redraw\r\n        cy.zoom(1.1); // restore position\r\n        cy.pan({ x: 0, y: 0 });\r\n\r\n        props.subsystemUpdated({ ...props.subsystem, ...{ isCollapsed: newStateCollapsed } });\r\n    };\r\n\r\n    return (\r\n        <IconButton\r\n            title={props.subsystem.isCollapsed ? 'Expand' : 'Collapse'}\r\n            onClick={toggleCollapsedState}\r\n            size='small'\r\n        >\r\n            {props.subsystem.isCollapsed ? <ExpandMore /> : <ExpandLess />}\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default connector(SubsystemCollapseButton);\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\ninterface Props {\r\n    placement: 'top' | 'bottom';\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    base: {\r\n        position: 'relative',\r\n        left: '-5px'\r\n    },\r\n    top: {\r\n        top: '-5px'\r\n    },\r\n    bottom: {\r\n        top: '5px'\r\n    }\r\n}));\r\n\r\nconst NodeActions: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={`${classes.base} ${classes[props.placement]}`}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NodeActions;\r\n","import React from 'react';\r\nimport { NodeSingular } from 'cytoscape';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Add, Link } from '@material-ui/icons';\r\n\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport { createObjectId } from '../../entities/system-model';\r\nimport ToolbarButtons from './toolbar-buttons';\r\nimport { ObjectTypes } from '../../entities/system-description/object-types';\r\nimport { isSystemObjectData } from '../../entities/graph/graph-element';\r\nimport SdfStepBase, { StepState } from './sdf-step-base';\r\nimport DeleteSystemObjectButton from './delete-system-object-button';\r\nimport DeleteSubsystemButton from './delete-subsystem-button';\r\nimport EditNodeButton from './edit-node-button';\r\nimport SubsystemCollapseButton from './subsystem-collapse-button';\r\nimport NodeActions from '../graph/node-actions';\r\n\r\nexport default class SdfStep1 extends React.Component<{}, StepState> {\r\n\r\n    constructor(props: Readonly<{}>) {\r\n        super(props);\r\n\r\n        this.tryCreateConnection = this.tryCreateConnection.bind(this);\r\n        this.startCreatingKind = this.startCreatingKind.bind(this);\r\n        this.startCreatingRole = this.startCreatingRole.bind(this);\r\n        this.startCreatingSubsystem = this.startCreatingSubsystem.bind(this);\r\n        this.renderSystemObjectActions = this.renderSystemObjectActions.bind(this);\r\n        this.renderSubsystemActions = this.renderSubsystemActions.bind(this);\r\n\r\n        this.state = {\r\n            nodeConnecting: null,\r\n            objectEditing: null,\r\n            elementDisplayPopper: null\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const toolbarButtons = <ToolbarButtons buttons={[\r\n            {\r\n                icon: <Add />,\r\n                text: 'Kind',\r\n                action: this.startCreatingKind\r\n            },\r\n            {\r\n                icon: <Add />,\r\n                text: 'Role',\r\n                action: this.startCreatingRole\r\n            },\r\n            {\r\n                icon: <Add />,\r\n                text: 'Subsystem',\r\n                action: this.startCreatingSubsystem\r\n            },\r\n        ]} />;\r\n\r\n        return (\r\n            <SdfStepBase\r\n                elementDisplayPopper={this.state.elementDisplayPopper}\r\n                elementDisplayPopperChanged={(ele) => this.setState({\r\n                    ...this.state, ...{ elementDisplayPopper: ele }\r\n                })}\r\n                nodeConnecting={this.state.nodeConnecting}\r\n                nodeConnectingDone={() => this.setState({ ...this.state, ...{ nodeConnecting: null } })}\r\n                objectEditing={this.state.objectEditing}\r\n                objectEditingDone={() => this.setState({ ...this.state, ...{ objectEditing: null } })}\r\n                toolbarButtons={toolbarButtons}\r\n                tryCreateConnection={this.tryCreateConnection}\r\n                renderSubsystemActions={this.renderSubsystemActions}\r\n                renderSystemObjectActions={this.renderSystemObjectActions}\r\n            />\r\n        );\r\n    }\r\n\r\n    private renderSystemObjectActions(object: SystemObject, element: NodeSingular) {\r\n        if (object.type === ObjectTypes.kind) {\r\n            return (\r\n                <NodeActions placement='top'>\r\n                    <IconButton\r\n                        size='small'\r\n                        title='Connect to containing kind'\r\n                        onClick={() => this.setState({ ...this.state, ...{ nodeConnecting: element } })}\r\n                    >\r\n                        <Link />\r\n                    </IconButton>\r\n                    <EditNodeButton\r\n                        node={object}\r\n                        onClick={() => this.setState({\r\n                            ...this.state, ...{ objectEditing: object, elementDisplayPopper: null }\r\n                        })}\r\n                    />\r\n                    <DeleteSystemObjectButton\r\n                        systemObject={object}\r\n                        onClick={() => this.setState({ ...this.state, ...{ elementDisplayPopper: null } })}\r\n                    />\r\n                </NodeActions>\r\n            );\r\n        }\r\n        if (object.type === ObjectTypes.role) {\r\n            return (\r\n                <NodeActions placement='top'>\r\n                    <EditNodeButton\r\n                        node={object}\r\n                        onClick={() => this.setState({\r\n                            ...this.state, ...{ objectEditing: object, elementDisplayPopper: null }\r\n                        })}\r\n                    />\r\n                    <DeleteSystemObjectButton\r\n                        systemObject={object}\r\n                        onClick={() => this.setState({ ...this.state, ...{ elementDisplayPopper: null } })}\r\n                    />\r\n                </NodeActions>\r\n            );\r\n        }\r\n        return <React.Fragment></React.Fragment>;\r\n    }\r\n\r\n    private renderSubsystemActions(subsystem: Subsystem, element: NodeSingular) {\r\n        return (\r\n            <NodeActions placement='bottom'>\r\n                <SubsystemCollapseButton\r\n                    node={element}\r\n                    subsystem={subsystem}\r\n                />\r\n                <EditNodeButton\r\n                    node={subsystem}\r\n                    onClick={() => this.setState({\r\n                        ...this.state, ...{ objectEditing: subsystem, elementDisplayPopper: null }\r\n                    })}\r\n                />\r\n                <DeleteSubsystemButton\r\n                    element={element}\r\n                    subsystem={subsystem}\r\n                    onClick={() => this.setState({ ...this.state, ...{ elementDisplayPopper: null } })}\r\n                />\r\n            </NodeActions>\r\n        );\r\n    }\r\n\r\n    private tryCreateConnection(source: NodeSingular, target: NodeSingular) {\r\n        const sourceData = source.data();\r\n        const targetData = target.data();\r\n        if (isSystemObjectData(sourceData) && isSystemObjectData(targetData) &&\r\n            sourceData.systemObject.type === ObjectTypes.kind &&\r\n            targetData.systemObject.type === ObjectTypes.kind\r\n        ) {\r\n            return {\r\n                id: createObjectId('connection'),\r\n                source: sourceData.systemObject.id,\r\n                target: targetData.systemObject.id,\r\n                label: 'ispartof',\r\n                isOriented: true\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private startCreatingKind() {\r\n        if (!this.state.objectEditing) {\r\n            const obj = {\r\n                id: createObjectId('kind'),\r\n                name: \"\",\r\n                type: ObjectTypes.kind,\r\n                posX: 0,\r\n                posY: 0\r\n            };\r\n            this.setState({ ...this.state, ...{ objectEditing: obj } });\r\n        }\r\n    };\r\n\r\n    private startCreatingRole() {\r\n        if (!this.state.objectEditing) {\r\n            const obj = {\r\n                id: createObjectId('role'),\r\n                name: \"\",\r\n                type: ObjectTypes.role,\r\n                posX: 0,\r\n                posY: 0,\r\n                possibleHarms: []\r\n            };\r\n            this.setState({ ...this.state, ...{ objectEditing: obj } });\r\n        }\r\n    };\r\n\r\n    private startCreatingSubsystem() {\r\n        if (!this.state.objectEditing) {\r\n            const subsystem = {\r\n                id: createObjectId('subsystem'),\r\n                name: \"\",\r\n                posX: 0,\r\n                posY: 0,\r\n                isCollapsed: false\r\n            };\r\n            this.setState({ ...this.state, ...{ objectEditing: subsystem } });\r\n        }\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { NodeSingular } from 'cytoscape';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Link } from '@material-ui/icons';\r\n\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport { createObjectId } from '../../entities/system-model';\r\nimport { ObjectTypes } from '../../entities/system-description/object-types';\r\nimport { isSystemObjectData } from '../../entities/graph/graph-element';\r\nimport SdfStepBase, { StepState } from './sdf-step-base';\r\nimport SubsystemCollapseButton from './subsystem-collapse-button';\r\nimport NodeActions from '../graph/node-actions';\r\n\r\nexport default class SdfStep2 extends React.Component<{}, StepState> {\r\n\r\n    constructor(props: Readonly<{}>) {\r\n        super(props);\r\n\r\n        this.tryCreateConnection = this.tryCreateConnection.bind(this);\r\n        this.renderSystemObjectActions = this.renderSystemObjectActions.bind(this);\r\n        this.renderSubsystemActions = this.renderSubsystemActions.bind(this);\r\n\r\n        this.state = {\r\n            nodeConnecting: null,\r\n            objectEditing: null,\r\n            elementDisplayPopper: null\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <SdfStepBase\r\n                elementDisplayPopper={this.state.elementDisplayPopper}\r\n                elementDisplayPopperChanged={(ele) => this.setState({\r\n                    ...this.state, ...{ elementDisplayPopper: ele }\r\n                })}\r\n                nodeConnecting={this.state.nodeConnecting}\r\n                nodeConnectingDone={() => this.setState({ ...this.state, ...{ nodeConnecting: null } })}\r\n                tryCreateConnection={this.tryCreateConnection}\r\n                renderSubsystemActions={this.renderSubsystemActions}\r\n                renderSystemObjectActions={this.renderSystemObjectActions}\r\n            />\r\n        );\r\n    }\r\n\r\n    private renderSystemObjectActions(object: SystemObject, element: NodeSingular) {\r\n        if (object.type !== ObjectTypes.kind) {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n\r\n        return (\r\n            <NodeActions placement='top'>\r\n                <IconButton\r\n                    size='small'\r\n                    title='Connect to role'\r\n                    onClick={() => this.setState({ ...this.state, ...{ nodeConnecting: element } })}\r\n                >\r\n                    <Link />\r\n                </IconButton>\r\n            </NodeActions>\r\n        );\r\n    }\r\n\r\n    private renderSubsystemActions(subsystem: Subsystem, element: NodeSingular) {\r\n        return <NodeActions placement='bottom'>\r\n            <SubsystemCollapseButton\r\n                node={element}\r\n                subsystem={subsystem}\r\n            />\r\n        </NodeActions>;\r\n    }\r\n\r\n    private tryCreateConnection(source: NodeSingular, target: NodeSingular) {\r\n        const sourceData = source.data();\r\n        const targetData = target.data();\r\n        if (isSystemObjectData(sourceData) && sourceData.systemObject.type === ObjectTypes.kind &&\r\n            isSystemObjectData(targetData) && targetData.systemObject.type === ObjectTypes.role\r\n        ) {\r\n            return {\r\n                id: createObjectId('connection'),\r\n                source: sourceData.systemObject.id,\r\n                target: targetData.systemObject.id,\r\n                label: 'play',\r\n                isOriented: true\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { NodeSingular } from 'cytoscape';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Add, Link } from '@material-ui/icons';\r\n\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport { createObjectId } from '../../entities/system-model';\r\nimport ToolbarButtons from './toolbar-buttons';\r\nimport { ObjectTypes } from '../../entities/system-description/object-types';\r\nimport { isSystemObjectData } from '../../entities/graph/graph-element';\r\nimport SdfStepBase, { StepState } from './sdf-step-base';\r\nimport DeleteSystemObjectButton from './delete-system-object-button';\r\nimport SubsystemCollapseButton from './subsystem-collapse-button';\r\nimport NodeActions from '../graph/node-actions';\r\nimport EditNodeButton from './edit-node-button';\r\n\r\nexport default class SdfStep3 extends React.Component<{}, StepState> {\r\n\r\n    constructor(props: Readonly<{}>) {\r\n        super(props);\r\n\r\n        this.tryCreateConnection = this.tryCreateConnection.bind(this);\r\n        this.startCreatingRelator = this.startCreatingRelator.bind(this);\r\n        this.renderSystemObjectActions = this.renderSystemObjectActions.bind(this);\r\n        this.renderSubsystemActions = this.renderSubsystemActions.bind(this);\r\n\r\n        this.state = {\r\n            nodeConnecting: null,\r\n            objectEditing: null,\r\n            elementDisplayPopper: null\r\n        };\r\n    }\r\n\r\n    render() {\r\n        const toolbarButtons = <ToolbarButtons buttons={[\r\n            {\r\n                icon: <Add />,\r\n                text: 'Relator',\r\n                action: this.startCreatingRelator\r\n            }]} />;\r\n\r\n        return (\r\n            <SdfStepBase\r\n                elementDisplayPopper={this.state.elementDisplayPopper}\r\n                elementDisplayPopperChanged={(ele) => this.setState({\r\n                    ...this.state, ...{ elementDisplayPopper: ele }\r\n                })}\r\n                nodeConnecting={this.state.nodeConnecting}\r\n                nodeConnectingDone={() => this.setState({ ...this.state, ...{ nodeConnecting: null } })}\r\n                objectEditing={this.state.objectEditing}\r\n                objectEditingDone={() => this.setState({ ...this.state, ...{ objectEditing: null } })}\r\n                toolbarButtons={toolbarButtons}\r\n                tryCreateConnection={this.tryCreateConnection}\r\n                renderSubsystemActions={this.renderSubsystemActions}\r\n                renderSystemObjectActions={this.renderSystemObjectActions}\r\n            />\r\n        );\r\n    }\r\n\r\n    private renderSystemObjectActions(object: SystemObject, element: NodeSingular) {\r\n        if (object.type === ObjectTypes.relator) {\r\n            return (\r\n                <NodeActions placement='top'>\r\n                    <IconButton\r\n                        size='small'\r\n                        title='Connect to role'\r\n                        onClick={() => this.setState({ ...this.state, ...{ nodeConnecting: element } })}\r\n                    >\r\n                        <Link />\r\n                    </IconButton>\r\n                    <EditNodeButton\r\n                        node={object}\r\n                        onClick={() => this.setState({\r\n                            ...this.state, ...{ objectEditing: object, elementDisplayPopper: null }\r\n                        })}\r\n                    />\r\n                    <DeleteSystemObjectButton\r\n                        systemObject={object}\r\n                        onClick={() => this.setState({ ...this.state, ...{ elementDisplayPopper: null } })}\r\n                    />\r\n                </NodeActions>);\r\n        }\r\n        if (object.type === ObjectTypes.role) {\r\n            return (\r\n                <NodeActions placement='top'>\r\n                    <IconButton\r\n                        size='small'\r\n                        title='Connect to relator'\r\n                        onClick={() => this.setState({ ...this.state, ...{ nodeConnecting: element } })}\r\n                    >\r\n                        <Link />\r\n                    </IconButton>\r\n                </NodeActions>\r\n            );\r\n        }\r\n        return <React.Fragment></React.Fragment>;\r\n    }\r\n\r\n    private renderSubsystemActions(subsystem: Subsystem, element: NodeSingular) {\r\n        return <NodeActions placement='bottom'>\r\n            <SubsystemCollapseButton\r\n                node={element}\r\n                subsystem={subsystem}\r\n            />\r\n        </NodeActions>;\r\n    }\r\n\r\n    private tryCreateConnection(source: NodeSingular, target: NodeSingular) {\r\n        const sourceData = source.data();\r\n        const targetData = target.data();\r\n        if (isSystemObjectData(sourceData) && isSystemObjectData(targetData)) {\r\n            // connection goes from role to relator, this is important for hazard population\r\n            if (sourceData.systemObject.type === ObjectTypes.role &&\r\n                targetData.systemObject.type === ObjectTypes.relator\r\n            ) {\r\n                return {\r\n                    id: createObjectId('connection'),\r\n                    source: sourceData.systemObject.id,\r\n                    target: targetData.systemObject.id,\r\n                    label: '',\r\n                    isOriented: false\r\n                };\r\n            }\r\n            // swap ends if ends are wrong\r\n            if (sourceData.systemObject.type === ObjectTypes.relator &&\r\n                targetData.systemObject.type === ObjectTypes.role) {\r\n                return {\r\n                    id: createObjectId('connection'),\r\n                    source: targetData.systemObject.id,\r\n                    target: sourceData.systemObject.id,\r\n                    label: '',\r\n                    isOriented: false\r\n                };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private startCreatingRelator() {\r\n        if (!this.state.objectEditing) {\r\n            const obj = {\r\n                id: createObjectId(ObjectTypes.relator.toString()),\r\n                name: \"\",\r\n                type: ObjectTypes.relator,\r\n                posX: 0,\r\n                posY: 0\r\n            };\r\n            this.setState({ ...this.state, ...{ objectEditing: obj } });\r\n        }\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { NodeSingular } from 'cytoscape';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Link } from '@material-ui/icons';\r\n\r\nimport SystemObject from '../../entities/system-description/system-object';\r\nimport Subsystem from '../../entities/system-description/subsystem';\r\nimport { createObjectId } from '../../entities/system-model';\r\nimport { ObjectTypes } from '../../entities/system-description/object-types';\r\nimport SdfStepBase, { StepState } from './sdf-step-base';\r\nimport SubsystemCollapseButton from './subsystem-collapse-button';\r\nimport { getConnection, getSystemObject } from '../../entities/graph/element-utilities';\r\nimport NodeActions from '../graph/node-actions';\r\n\r\nexport default class SdfStep4 extends React.Component<{}, StepState> {\r\n\r\n    constructor(props: Readonly<{}>) {\r\n        super(props);\r\n\r\n        this.tryCreateConnection = this.tryCreateConnection.bind(this);\r\n        this.renderSystemObjectActions = this.renderSystemObjectActions.bind(this);\r\n        this.renderSubsystemActions = this.renderSubsystemActions.bind(this);\r\n\r\n        this.state = {\r\n            nodeConnecting: null,\r\n            objectEditing: null,\r\n            elementDisplayPopper: null\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <SdfStepBase\r\n                elementDisplayPopper={this.state.elementDisplayPopper}\r\n                elementDisplayPopperChanged={(ele) => this.setState({\r\n                    ...this.state, ...{ elementDisplayPopper: ele }\r\n                })}\r\n                nodeConnecting={this.state.nodeConnecting}\r\n                nodeConnectingDone={() => this.setState({ ...this.state, ...{ nodeConnecting: null } })}\r\n                tryCreateConnection={this.tryCreateConnection}\r\n                renderSubsystemActions={this.renderSubsystemActions}\r\n                renderSystemObjectActions={this.renderSystemObjectActions}\r\n            />\r\n        );\r\n    }\r\n\r\n    private renderSystemObjectActions(object: SystemObject, element: NodeSingular) {\r\n        if (object.type !== ObjectTypes.role) {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n\r\n        return (\r\n            <NodeActions placement='top'>\r\n                <IconButton\r\n                    size='small'\r\n                    title='Connect to kind'\r\n                    onClick={() => this.setState({ ...this.state, ...{ nodeConnecting: element } })}\r\n                >\r\n                    <Link />\r\n                </IconButton>\r\n            </NodeActions>\r\n        );\r\n    }\r\n\r\n    private renderSubsystemActions(subsystem: Subsystem, element: NodeSingular) {\r\n        return <NodeActions placement='bottom'>\r\n            <SubsystemCollapseButton\r\n                node={element}\r\n                subsystem={subsystem}\r\n            />\r\n        </NodeActions>;\r\n    }\r\n\r\n    private tryCreateConnection(source: NodeSingular, target: NodeSingular) {\r\n        // in this step we create reversed connection from role to kind\r\n        // still in data model the connection goes from kind to role\r\n        // so there is difference in creating a new connection with handling an existing one\r\n        const existingConnection = source.edgesWith(target);\r\n        if (existingConnection.length > 0) {\r\n            const connection = getConnection(existingConnection[0]);\r\n            if (connection) {\r\n                return connection;\r\n            }\r\n        }\r\n\r\n        const sourceObj = getSystemObject(source);\r\n        const targetObj = getSystemObject(target);\r\n        if (sourceObj && sourceObj.type === ObjectTypes.role &&\r\n            targetObj && targetObj.type === ObjectTypes.kind\r\n        ) {\r\n            return {\r\n                id: createObjectId('connection'),\r\n                source: targetObj.id,\r\n                target: sourceObj.id,\r\n                label: 'play',\r\n                isOriented: true\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Hazard from '../../entities/hazard-population/hazard';\r\n\r\ninterface Props {\r\n    hazard: Hazard;\r\n}\r\n\r\nconst HazardId: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n        <React.Fragment>H{props.hazard.id}</React.Fragment>\r\n    );\r\n};\r\n\r\nexport default HazardId;\r\n","import { TableCell, withStyles, createStyles } from '@material-ui/core';\r\n\r\nconst TableCellSmall = withStyles(theme =>\r\n    createStyles({\r\n        sizeSmall: {\r\n            padding: theme.spacing(1)\r\n        }\r\n    })\r\n)(TableCell);\r\n\r\nexport default TableCellSmall;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { TableRow, TextField, IconButton } from '@material-ui/core';\r\nimport { Delete, Edit, Save } from '@material-ui/icons';\r\nimport Hazard from '../../entities/hazard-population/hazard';\r\nimport HazardId from './hazard-id';\r\nimport TableCellSmall from '../shared/table-cell-small';\r\n\r\ninterface Props {\r\n    hazard: Hazard;\r\n    hazardEdited: (hazard: Hazard) => void;\r\n    hazardDeleted: (hazard: Hazard) => void;\r\n}\r\n\r\nconst HazardsRow: React.FC<Props> = (props) => {\r\n\r\n    const [isEditable, setIsEditable] = useState(false);\r\n    const [harmTruthmaker, setHarmTruthmaker] = useState(props.hazard.harmTruthmaker);\r\n    const [description, setDescription] = useState(props.hazard.description);\r\n\r\n    const isEmpty = (string: String) => {\r\n        if(!string || string.length === 0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    const editHazard = () => {\r\n\r\n        if(!isEmpty(harmTruthmaker) || !isEmpty(description)) {\r\n            if(harmTruthmaker !== props.hazard.harmTruthmaker ||\r\n                description !== props.hazard.description) {\r\n                    const hazard = {\r\n                        ...props.hazard,\r\n                        harmTruthmaker: harmTruthmaker,\r\n                        description: description\r\n                    };\r\n            \r\n                    props.hazardEdited(hazard);\r\n            }\r\n            \r\n\r\n            setIsEditable(false);\r\n        }\r\n    };\r\n\r\n    const deleteHazard = () => {\r\n        setIsEditable(false);\r\n\r\n        props.hazardDeleted(props.hazard);\r\n    };\r\n\r\n    return ( \r\n        <TableRow>\r\n            <TableCellSmall>\r\n                <HazardId hazard={props.hazard} />\r\n            </TableCellSmall>\r\n            <TableCellSmall>\r\n                {props.hazard.mishapVictim.name}\r\n                <br />\r\n                ({props.hazard.mishapVictimEnvObj.name})\r\n            </TableCellSmall>\r\n            <TableCellSmall>{props.hazard.exposure.name}</TableCellSmall>\r\n            <TableCellSmall>\r\n                {props.hazard.hazardElement.name}\r\n                <br />\r\n                ({props.hazard.hazardElementEnvObj.name})\r\n            </TableCellSmall>\r\n            <TableCellSmall>\r\n                {isEditable\r\n                ? <TextField\r\n                required\r\n                autoFocus\r\n                defaultValue={props.hazard.harmTruthmaker}\r\n                margin='none'\r\n                type='text'\r\n                onChange={(ev) => setHarmTruthmaker(ev.target.value)}\r\n                error={isEmpty(harmTruthmaker)}\r\n                helperText={isEmpty(harmTruthmaker) ? 'Required field' : ' '}\r\n                autoComplete='off'\r\n                />\r\n                : props.hazard.harmTruthmaker}\r\n            </TableCellSmall>\r\n            <TableCellSmall>\r\n                {isEditable\r\n                ? <TextField\r\n                required\r\n                defaultValue={props.hazard.description}\r\n                margin='none'\r\n                fullWidth\r\n                type='text'\r\n                onChange={(ev) => setDescription(ev.target.value)}\r\n                error={isEmpty(description)}\r\n                helperText={isEmpty(description) ? 'Required field' : ' '}\r\n                autoComplete='off'\r\n                />\r\n                : props.hazard.description}\r\n            </TableCellSmall>\r\n            <TableCellSmall>\r\n                {isEditable \r\n                ? <IconButton size='small' onClick={() => editHazard()}><Save /></IconButton>\r\n                : <IconButton size='small' onClick={() => setIsEditable(true)}><Edit /></IconButton>\r\n                }\r\n                <IconButton\r\n                    size='small'\r\n                    onClick={deleteHazard}\r\n                >\r\n                    <Delete />\r\n                </IconButton>\r\n            </TableCellSmall>\r\n        </TableRow>\r\n    );\r\n};\r\n\r\nexport default HazardsRow;","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { TableContainer, Table, TableRow, TableCell, TableBody, TableHead, makeStyles } from '@material-ui/core';\r\nimport HazardsRow from './hazard-row';\r\nimport { RootState } from '../../store';\r\nimport { updateHazard, deleteHazard } from '../../store/system-model/actions';\r\nimport { MishapVictim } from '../../entities/system-description/role';\r\nimport TableCellSmall from '../shared/table-cell-small';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    hazards: state.systemModel.hazards\r\n})\r\n\r\nconst mapDispatch = {\r\n    hazardEdited: updateHazard,\r\n    hazardDeleted: deleteHazard\r\n}\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {\r\n    selectedMishapVictim?: MishapVictim\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    id: {\r\n        width: '7%'\r\n    },\r\n    mishapVictim: {\r\n        width: '15%'\r\n    },\r\n    exposure: {\r\n        width: '10%'\r\n    },\r\n    hazardElement: {\r\n        width: '15%'\r\n    },\r\n    harmTruthmaker: {\r\n        width: '15%'\r\n    },\r\n    actions: {\r\n        width: '10%'\r\n    }\r\n}));\r\n\r\n\r\nconst HazardsTable: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    let hazards = props.hazards;\r\n    const mishapVictim = props.selectedMishapVictim;\r\n    if (mishapVictim) {\r\n        hazards = hazards.filter(e => e.mishapVictim.id === mishapVictim.id);\r\n    }\r\n\r\n    return (\r\n        <TableContainer>\r\n            <Table size='small'>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCellSmall className={classes.id}>\r\n                            ID\r\n                        </TableCellSmall>\r\n                        <TableCellSmall className={classes.mishapVictim}>\r\n                            Mishap Victim<br />(Env Obj)\r\n                        </TableCellSmall>\r\n                        <TableCellSmall className={classes.exposure}>\r\n                            Exposure\r\n                        </TableCellSmall>\r\n                        <TableCellSmall className={classes.hazardElement}>\r\n                            Hazard Element<br />(Env Obj)\r\n                        </TableCellSmall>\r\n                        <TableCellSmall className={classes.harmTruthmaker}>\r\n                            Harm TruthMaker\r\n                        </TableCellSmall>\r\n                        <TableCellSmall>\r\n                            Hazard Description\r\n                        </TableCellSmall>\r\n                        <TableCellSmall className={classes.actions} />\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {hazards.length === 0 ?\r\n                        <TableRow>\r\n                            <TableCell colSpan={7} align='center'>\r\n                                No hazards identified\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        :\r\n                        hazards\r\n                            .sort((a, b) => a.id - b.id)\r\n                            .map((hazard, index) => (\r\n                                <HazardsRow \r\n                                    hazard={hazard}\r\n                                    key={index}\r\n                                    hazardEdited={props.hazardEdited}\r\n                                    hazardDeleted={props.hazardDeleted}\r\n                                />\r\n                            ))\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default connector(HazardsTable);\r\n","import React, { useState } from 'react';\r\nimport { MenuItem, TableRow, TableCell, FormControl, Select, InputLabel, TextField, IconButton, makeStyles } from '@material-ui/core';\r\nimport { Add } from '@material-ui/icons';\r\nimport { PossibleHazard } from '../../entities/hazard-population/possible-hazard';\r\nimport Hazard from '../../entities/hazard-population/hazard';\r\n\r\ninterface Props {\r\n    template: PossibleHazard;\r\n    nextHazardId: number;\r\n    hazardCreated: (hazard: Hazard) => void;\r\n}\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    divide: {\r\n        paddingRight: theme.appSpacing.standard\r\n    },\r\n    select: {\r\n        width: '220px'\r\n    }\r\n}));\r\n\r\nconst HazardCreateDetails: React.FC<Props> = (props) => {\r\n    const classes = useStyle();\r\n\r\n    let hazardElementEnvObj = '';\r\n    if (props.template.hazardElementEnvObjs.length === 1) {\r\n        hazardElementEnvObj = props.template.hazardElementEnvObjs[0].object.id;\r\n    }\r\n    const [envObj, setEnvObj] = useState(hazardElementEnvObj);\r\n    const [harmTruthmaker, setHarmTruthmaker] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const createHazard = (ev: React.FormEvent<HTMLFormElement>) => {\r\n        const form = ev.currentTarget;\r\n        form.reset();\r\n        ev.preventDefault();\r\n        const hazardElementEnvObj = props.template.hazardElementEnvObjs\r\n            .find(e => e.object.id === envObj);\r\n        if (!hazardElementEnvObj) {\r\n            return;\r\n        }\r\n\r\n        const hazard = {\r\n            id: props.nextHazardId,\r\n            harmTruthmaker,\r\n            description,\r\n            mishapVictim: {\r\n                id: props.template.mishapVictim.id,\r\n                name: props.template.mishapVictim.name\r\n            },\r\n            mishapVictimEnvObj: {\r\n                id: props.template.mishapVictimEnvObj.object.id,\r\n                name: props.template.mishapVictimEnvObj.object.name\r\n            },\r\n            exposure: {\r\n                id: props.template.exposure.object.id,\r\n                name: props.template.exposure.object.name\r\n            },\r\n            hazardElement: {\r\n                id: props.template.hazardElement.object.id,\r\n                name: props.template.hazardElement.object.name\r\n            },\r\n            hazardElementEnvObj: {\r\n                id: hazardElementEnvObj.object.id,\r\n                name: hazardElementEnvObj.object.name\r\n            }\r\n        };\r\n        props.hazardCreated(hazard);\r\n    };\r\n\r\n    let selectOptions = props.template.hazardElementEnvObjs\r\n        .sort((a, b) => a.object.name.localeCompare(b.object.name))\r\n        .map((item, index) => (\r\n            <MenuItem key={index} value={item.object.id}>\r\n                {item.object.name}\r\n            </MenuItem>));\r\n    if (props.template.hazardElementEnvObjs.length === 0) {\r\n        selectOptions = [(<MenuItem key={-1} value='' disabled>Nothing found</MenuItem>)];\r\n    }\r\n\r\n    return (\r\n        <TableRow>\r\n            <TableCell colSpan={3}>\r\n                <form action='#' onSubmit={createHazard}>\r\n                    <FormControl className={classes.divide}>\r\n                        <TextField\r\n                            required\r\n                            autoFocus\r\n                            margin='none'\r\n                            type='text'\r\n                            onChange={(ev) => setHarmTruthmaker(ev.target.value)}\r\n                            label='Harm Truthmaker'\r\n                            autoComplete='off'\r\n                            multiline\r\n                            rowsMax={4}\r\n                        />\r\n                    </FormControl>\r\n                    <FormControl className={classes.divide}>\r\n                        <TextField\r\n                            required\r\n                            margin='none'\r\n                            type='text'\r\n                            onChange={(ev) => setDescription(ev.target.value)}\r\n                            label='Hazard Description'\r\n                            autoComplete='off'\r\n                            multiline\r\n                            rowsMax={4}\r\n                        />\r\n                    </FormControl>\r\n                    <FormControl className={classes.select}>\r\n                        <InputLabel id='label-select-env-obj'>\r\n                            Hazard Evement Env Obj\r\n                            </InputLabel>\r\n                        <Select\r\n                            required\r\n                            margin='none'\r\n                            labelId='label-select-env-obj'\r\n                            value={hazardElementEnvObj}\r\n                            onChange={(ev) => setEnvObj(ev.target.value as string)}\r\n                        >\r\n                            {selectOptions}\r\n                        </Select>\r\n                    </FormControl>\r\n                    <IconButton type='submit' edge='end' title='Create'>\r\n                        <Add />\r\n                    </IconButton>\r\n                </form>\r\n            </TableCell>\r\n        </TableRow>\r\n    );\r\n};\r\n\r\nexport default HazardCreateDetails;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { TableRow, TableCell, TableContainer, Table, TableHead, TableBody, withStyles, createStyles, Theme, Grid, Typography, makeStyles } from '@material-ui/core';\r\nimport { NodeSingular, EdgeSingular, SingularElementReturnValue } from 'cytoscape';\r\n\r\nimport { PossibleHazard, ConnectionToObject } from '../../entities/hazard-population/possible-hazard';\r\nimport HazardCreateDetails from './hazard-create-details';\r\nimport { getRole, getSystemObject, getConnection } from '../../entities/graph/element-utilities';\r\nimport { isMishapVictim, MishapVictim } from '../../entities/system-description/role';\r\nimport { RootState } from '../../store';\r\nimport { createHazard } from '../../store/system-model/actions';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    nextHazardId: state.systemModel.nextHazardId\r\n})\r\n\r\nconst mapDispatch = {\r\n    hazardCreated: createHazard,\r\n}\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {\r\n    node: NodeSingular\r\n}\r\n\r\nconst StyledTableRow = withStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: theme.palette.grey[200],\r\n            cursor: 'pointer'\r\n        }\r\n    })\r\n)(TableRow);\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    header: {\r\n        marginLeft: theme.appSpacing.standard\r\n    }\r\n}));\r\n\r\n\r\nconst HazardCreate: React.FC<Props> = (props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [template, setTemplate] = useState<PossibleHazard | null>(null);\r\n    const [possibleHazards, setPossibleHazards] = useState<PossibleHazard[]>([]);\r\n\r\n    useEffect(() => {\r\n        const mishapVictim = getRole(props.node);\r\n        if (!mishapVictim || !isMishapVictim(mishapVictim)) {\r\n            throw new Error('Entity passed is not a mishap victim');\r\n        }\r\n\r\n        const findPossibleHazards = (mishapVictim: MishapVictim) => {\r\n            let result: PossibleHazard[] = [];\r\n            const victimKinds = props.node.incomers();\r\n            const relators = props.node.outgoers();\r\n            const hazardRoles = relators.incomers();\r\n\r\n            const hazardElementsEnvObjs: ConnectionToObject[] = [];\r\n            const hazardKinds = hazardRoles.incomers();\r\n            for (let i = 0; i < hazardKinds.length; i++) {\r\n                const envObj = getEntityPair(hazardKinds[i], true);\r\n                if (envObj) {\r\n                    hazardElementsEnvObjs.push(envObj);\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < victimKinds.length; i++) {\r\n                const mishapVictimEnvObj = getEntityPair(victimKinds[i], true);\r\n                if (!mishapVictimEnvObj) {\r\n                    continue;\r\n                }\r\n                for (let j = 0; j < relators.length; j++) {\r\n                    const exposure = getEntityPair(relators[j], false);\r\n                    if (!exposure) {\r\n                        continue;\r\n                    }\r\n                    for (let k = 0; k < hazardRoles.length; k++) {\r\n                        const hazardElement = getEntityPair(hazardRoles[k], true);\r\n                        if (!hazardElement) {\r\n                            continue;\r\n                        }\r\n                        result.push({\r\n                            mishapVictim,\r\n                            mishapVictimEnvObj,\r\n                            exposure,\r\n                            hazardElement,\r\n                            hazardElementEnvObjs: hazardElementsEnvObjs\r\n                                .filter(e => e.connection.target === hazardElement.object.id)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n\r\n        const getEntityPair = (\r\n            ele: SingularElementReturnValue | (NodeSingular & EdgeSingular),\r\n            takeSource: boolean\r\n        ) => {\r\n            if (ele.isEdge()) {\r\n                const node = takeSource ? ele.source() : ele.target();\r\n                const object = getSystemObject(node);\r\n                const connection = getConnection(ele);\r\n                if (object && connection) {\r\n                    return { object, connection };\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        setPossibleHazards(findPossibleHazards(mishapVictim));\r\n    }, [props.node]);\r\n\r\n    const renderDetailsForm = (possibleHazard: PossibleHazard) => {\r\n        if (template !== possibleHazard) {\r\n            return <React.Fragment></React.Fragment>;\r\n        }\r\n\r\n        return (\r\n            <HazardCreateDetails\r\n                template={template}\r\n                nextHazardId={props.nextHazardId}\r\n                hazardCreated={props.hazardCreated}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Typography variant='caption' className={classes.header}>\r\n                        Select a table row to add\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <TableContainer>\r\n                <Table size='small'>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Mishap Victim (Env Obj)</TableCell>\r\n                            <TableCell>Exposure</TableCell>\r\n                            <TableCell>Hazard Element</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {possibleHazards.length === 0 ?\r\n                            <TableRow>\r\n                                <TableCell colSpan={3} align='center'>\r\n                                    No possible hazards found\r\n                            </TableCell>\r\n                            </TableRow>\r\n                            :\r\n                            possibleHazards.map((hazard, index) => (\r\n                                <React.Fragment key={index}>\r\n                                    <StyledTableRow onClick={() => setTemplate(hazard)} >\r\n                                        <TableCell>\r\n                                            {hazard.mishapVictim.name} ({hazard.mishapVictimEnvObj.object.name})\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {hazard.exposure.object.name}\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            {hazard.hazardElement.object.name}\r\n                                        </TableCell>\r\n                                    </StyledTableRow>\r\n                                    {renderDetailsForm(hazard)}\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default connector(HazardCreate);\r\n","import React from 'react';\r\nimport { makeStyles, Typography } from '@material-ui/core';\r\nimport { NodeSingular } from 'cytoscape';\r\n\r\nimport { isMishapVictim } from '../../entities/system-description/role';\r\nimport { getRole } from '../../entities/graph/element-utilities';\r\nimport HazardsTable from './hazards-table';\r\nimport HazardCreate from './hazard-create';\r\nimport CornerFab from '../shared/corner-fab';\r\n\r\ninterface Props {\r\n    node: NodeSingular;\r\n    close: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    header: {\r\n        marginLeft: theme.appSpacing.standard\r\n    },\r\n    tableGutter: {\r\n        marginBottom: theme.appSpacing.standard\r\n    },\r\n    fabSpace: {\r\n        marginBottom: theme.appSpacing.fabOverlap\r\n    }\r\n}));\r\n\r\nconst VictimHazards: React.FC<Props> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const mishapVictim = getRole(props.node);\r\n    if (!mishapVictim || !isMishapVictim(mishapVictim)) {\r\n        throw new Error('Entity passed is not a mishap victim');\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h6\" color=\"textSecondary\" className={classes.header}>\r\n                Possible Harms\r\n            </Typography>\r\n            <Typography variant=\"body1\" className={classes.header} gutterBottom>\r\n                {mishapVictim.possibleHarms.join(', ')}\r\n            </Typography>\r\n            <Typography variant=\"h6\" color=\"textSecondary\" className={classes.header}>\r\n                Hazards\r\n            </Typography>\r\n            <HazardsTable selectedMishapVictim={mishapVictim} />\r\n            <div className={classes.tableGutter}></div>\r\n            <Typography variant='h6' color='textSecondary' className={classes.header}>\r\n                Add New Hazard\r\n            </Typography>\r\n            <HazardCreate node={props.node} />\r\n            <div className={classes.fabSpace}></div>\r\n            <CornerFab onClick={props.close} >\r\n                Back\r\n            </CornerFab>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default VictimHazards;\r\n","import React, { useState } from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { EventObject, NodeSingular, Core } from 'cytoscape';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nimport GraphElementsFactoryMishapVictims from '../../entities/graph/graph-elements-factory-mishap-victims';\r\nimport Graph from '../graph/graph';\r\nimport { isMishapVictim } from '../../entities/system-description/role';\r\nimport CornerCard from '../shared/corner-card';\r\nimport { getRole } from '../../entities/graph/element-utilities';\r\nimport { RootState } from '../../store';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    system: state.systemModel\r\n})\r\n\r\nconst connector = connect(mapState);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {\r\n    victimSelected: (node: NodeSingular) => void;\r\n    cyInitialized: (cy: Core) => void;\r\n}\r\n\r\nconst GraphView: React.FC<Props> = (props) => {\r\n\r\n    const [isVictimPointed, setIsVictimPointed] = useState(false);\r\n\r\n    const getMishapVictimFromEvent = (event: EventObject) => {\r\n        const ele: NodeSingular = event.target.element();\r\n        const role = getRole(ele);\r\n        if (role && isMishapVictim(role)) {\r\n            return role;\r\n        }\r\n    }\r\n\r\n    const checkVictimPointed = (event: EventObject) => {\r\n        setIsVictimPointed(!!getMishapVictimFromEvent(event));\r\n    }\r\n\r\n    const selectVictim = (event: EventObject) => {\r\n        const mishapVictim = getMishapVictimFromEvent(event);\r\n        if (mishapVictim) {\r\n            props.victimSelected(event.target);\r\n        }\r\n    };\r\n\r\n    const elementsFactory = new GraphElementsFactoryMishapVictims();\r\n    const elements = elementsFactory.mapSystemDescription(props.system);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Graph\r\n                elements={elements}\r\n                cursorStyle={isVictimPointed ? 'pointer' : 'default'}\r\n                mouseEnteredNode={checkVictimPointed}\r\n                mouseLeftNode={checkVictimPointed}\r\n                nodeClicked={selectVictim}\r\n                cy={props.cyInitialized}\r\n            />\r\n            <CornerCard>\r\n                <Typography>\r\n                    Click on a mishap victim to populate hazards\r\n                </Typography>\r\n                <Typography variant='caption'>\r\n                    Mishap victims are marked yellow\r\n                </Typography>\r\n            </CornerCard>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default connector(GraphView);\r\n","import React, { useState } from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { makeStyles, Typography, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\n\r\nimport HazardsTable from './hazards-table';\r\nimport { NodeSingular } from 'cytoscape';\r\nimport { isMishapVictim } from '../../entities/system-description/role';\r\nimport HazardCreate from './hazard-create';\r\nimport { RootState } from '../../store';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    mishapVictims: state.systemModel.roles.filter(e => isMishapVictim(e))\r\n})\r\n\r\nconst connector = connect(mapState);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\ntype Props = PropsFromRedux & {\r\n    getNode: (id: string) => NodeSingular | null;\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    header: {\r\n        marginLeft: theme.appSpacing.standard\r\n    },\r\n    tableGutter: {\r\n        marginBottom: theme.appSpacing.standard\r\n    },\r\n    select: {\r\n        marginLeft: theme.appSpacing.standard,\r\n        width: '220px'\r\n    }\r\n}));\r\n\r\nconst TableView: React.FC<Props> = (props: Props) => {\r\n    const classes = useStyles();\r\n\r\n    const [mishapVictimId, setMishapVictimId] = useState('');\r\n    const [mishapVictimNode, setMishapVictimNode] = useState<NodeSingular | null>(null);\r\n\r\n    const selectMishapVictim = (ev: React.ChangeEvent<{ value: unknown }>) => {\r\n        const id = ev.target.value as string;\r\n        const node = props.getNode(id);\r\n        if (node) {\r\n            setMishapVictimId(id);\r\n            setMishapVictimNode(node);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h6\" color=\"textSecondary\" className={classes.header}>\r\n                Hazards\r\n            </Typography>\r\n            <HazardsTable />\r\n            <div className={classes.tableGutter}></div>\r\n            <Typography variant='h6' color='textSecondary' className={classes.header}>\r\n                Add New Hazard\r\n            </Typography>\r\n            <FormControl className={classes.select}>\r\n                <InputLabel id='label-select-mishap-victim'>\r\n                    Select mishap victim\r\n                </InputLabel>\r\n                <Select\r\n                    margin='none'\r\n                    labelId='label-select-mishap-victim'\r\n                    onChange={selectMishapVictim}\r\n                    value={mishapVictimId}\r\n                >\r\n                    {props.mishapVictims\r\n                        .sort((a, b) => a.name.localeCompare(b.name))\r\n                        .map((item, index) => (\r\n                            <MenuItem key={index} value={item.id}>\r\n                                {item.name}\r\n                            </MenuItem>))}\r\n                </Select>\r\n            </FormControl>\r\n            {mishapVictimNode ?\r\n                <HazardCreate node={mishapVictimNode} />\r\n                :\r\n                undefined\r\n            }\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default connector(TableView);\r\n","import React, { useState, useRef } from 'react';\r\nimport { NodeSingular, Core } from 'cytoscape';\r\n\r\nimport VictimHazards from './victim-hazards';\r\nimport GraphView from './graph-view';\r\nimport TableView from './table-view';\r\nimport { getSystemObject } from '../../entities/graph/element-utilities';\r\nimport CornerFab from '../shared/corner-fab';\r\nimport { TableChart, BubbleChart } from '@material-ui/icons';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    fabSpace: {\r\n        height: theme.appSpacing.fabOverlap\r\n    }\r\n}));\r\n\r\nconst HazardPopulation: React.FC = () => {\r\n    const classes = useStyle();\r\n\r\n    const [isSummarySelected, setIsSummarySelected] = useState(false);\r\n    const [selectedVictim, setSelectedVictim] = useState<NodeSingular | null>(null);\r\n\r\n    const cyRef = useRef<Core>();\r\n\r\n    const findNode = (id: string) => {\r\n        if (!cyRef.current) {\r\n            return null;\r\n        }\r\n        const ele = cyRef.current.$(`#${id}`);\r\n        if (ele.isNode()) {\r\n            return ele;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    if (selectedVictim) {\r\n        const mishapVictim = getSystemObject(selectedVictim);\r\n        if (!mishapVictim) {\r\n            throw new Error('Selected node does not represent a mishap victim');\r\n        }\r\n        return <VictimHazards\r\n            node={selectedVictim}\r\n            close={() => setSelectedVictim(null)}\r\n        />;\r\n    }\r\n\r\n    if (isSummarySelected) {\r\n        return (\r\n            <React.Fragment>\r\n                <TableView getNode={findNode} />\r\n                <div className={classes.fabSpace} />\r\n                <CornerFab onClick={() => setIsSummarySelected(false)}>\r\n                    <BubbleChart />\r\n                    Graph View\r\n                </CornerFab>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <GraphView\r\n                victimSelected={setSelectedVictim}\r\n                cyInitialized={cy => cyRef.current = cy}\r\n            />\r\n            <CornerFab onClick={() => setIsSummarySelected(true)}>\r\n                <TableChart />\r\n                Table View\r\n            </CornerFab>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default HazardPopulation;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { Typography, IconButton, TextField, makeStyles } from '@material-ui/core';\r\nimport { Edit, Done, Clear } from '@material-ui/icons';\r\nimport { RootState } from '../store';\r\nimport { updateProjectName } from '../store/system-model/actions';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    name: state.systemModel.projectName\r\n});\r\n\r\nconst mapDispatch = {\r\n    nameUpdated: updateProjectName\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    input: {\r\n        '& .MuiInput-input': {\r\n            color: theme.palette.common.white,\r\n        }\r\n    },\r\n    buttonGutter: {\r\n        paddingLeft: theme.spacing(1),\r\n    }\r\n}));\r\n\r\nconst ProjectName: React.FC<Props> = (props) => {\r\n    const classes = useStyle();\r\n\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [name, setName] = useState(props.name);\r\n\r\n    const inputRef = useRef<HTMLInputElement>();\r\n\r\n    useEffect(() => {\r\n        setName(props.name);\r\n    }, [props.name]);\r\n\r\n    const cancelEdit = () => {\r\n        setName(props.name);\r\n        setIsEditing(false);\r\n        inputRef.current = undefined;\r\n    };\r\n\r\n    const confirmEdit = (ev: React.FormEvent<HTMLFormElement>) => {\r\n        ev.preventDefault();\r\n        setIsEditing(false);\r\n        props.nameUpdated(name);\r\n        inputRef.current = undefined;\r\n    };\r\n\r\n    const initInput = (input: HTMLInputElement | null) => {\r\n        if (input && !inputRef.current) {\r\n            input.select();\r\n            inputRef.current = input;\r\n        }\r\n    }\r\n\r\n    if (isEditing) {\r\n        return (\r\n            <form onReset={cancelEdit} onSubmit={confirmEdit} >\r\n                <TextField\r\n                    className={classes.input}\r\n                    type='text'\r\n                    required\r\n                    autoFocus\r\n                    onChange={ev => setName(ev.target.value)}\r\n                    value={name}\r\n                    inputRef={ref => initInput(ref)}\r\n                />\r\n                <IconButton type='submit' size='small' className={classes.buttonGutter} >\r\n                    <Done />\r\n                </IconButton>\r\n                <IconButton type='reset' size='small' >\r\n                    <Clear />\r\n                </IconButton>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Typography variant=\"h6\">\r\n            {name}\r\n            <IconButton\r\n                size='small'\r\n                onClick={() => setIsEditing(true)}\r\n                title='Edit project name'\r\n                className={classes.buttonGutter}\r\n            >\r\n                <Edit />\r\n            </IconButton>\r\n        </Typography>\r\n    );\r\n};\r\n\r\nexport default connector(ProjectName);\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { Dialog, DialogContentText, DialogContent, Button, DialogActions } from '@material-ui/core';\r\nimport { RootState } from '../store';\r\nimport { hideConfirmationDialog } from '../store/modal-dialog/actions';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    dialog: state.modalDialog\r\n});\r\n\r\nconst mapDispatch = {\r\n    close: hideConfirmationDialog\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nconst ConfirmationDialog: React.FC<Props> = (props) => {\r\n\r\n    const handleYes = () => {\r\n        props.close();\r\n        props.dialog.onYes();\r\n    };\r\n\r\n    const handleNo = () => {\r\n        props.close();\r\n        if (props.dialog.onNo) {\r\n            props.dialog.onNo();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            open={!!props.dialog.contentText}\r\n            onClose={props.close}\r\n            disableBackdropClick\r\n            disableEscapeKeyDown\r\n        >\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    {props.dialog.contentText}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleYes} color=\"primary\">\r\n                    Yes\r\n                </Button>\r\n                <Button onClick={handleNo} color=\"primary\" autoFocus>\r\n                    No\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default connector(ConfirmationDialog);\r\n","import React, { useState } from 'react';\r\nimport Hazard from '../../../entities/hazard-population/hazard';\r\nimport { TableRow, TableCell, Button } from '@material-ui/core';\r\nimport HazardId from '../../hazard-population/hazard-id';\r\nimport { HazardCategory } from '../../../entities/hazard-description-categorization/hazard-category';\r\nimport CategorizationWizard from './categorization-wizard';\r\n\r\ninterface Props {\r\n    hazard: Hazard;\r\n    hazardUpdated: (hazard: Hazard) => void;\r\n}\r\n\r\nconst OchStep1TableRow: React.FC<Props> = (props) => {\r\n\r\n    const [isCategorizing, setIsCategorizing] = useState(false);\r\n\r\n    const updateCategory = (category: HazardCategory) => {\r\n        setIsCategorizing(false);\r\n        props.hazardUpdated({ ...props.hazard, ...{ category: category } });\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow>\r\n                <TableCell>\r\n                    <HazardId hazard={props.hazard} />\r\n                </TableCell>\r\n                <TableCell>{props.hazard.description}</TableCell>\r\n                <TableCell>\r\n                    {props.hazard.category ? props.hazard.category : '-'}\r\n                </TableCell>\r\n                <TableCell>\r\n                    <Button variant='outlined' onClick={() => setIsCategorizing(true)}>\r\n                        Categorize\r\n                </Button>\r\n                </TableCell>\r\n            </TableRow>\r\n            {isCategorizing ? \r\n                <TableRow>\r\n                    <TableCell colSpan={4}>\r\n                        <CategorizationWizard\r\n                            cancel={() => setIsCategorizing(false)}\r\n                            complete={updateCategory}\r\n                        />\r\n                    </TableCell>\r\n                </TableRow>\r\n                :\r\n                undefined}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default OchStep1TableRow;\r\n","import React from 'react';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { TableContainer, TableBody, TableRow, Table, TableHead, TableCell } from '@material-ui/core';\r\nimport OchStep1TableRow from './table-row';\r\nimport { RootState } from '../../../store';\r\nimport { updateHazard } from '../../../store/system-model/actions';\r\n\r\nconst mapState = (state: RootState) => ({\r\n    hazards: state.systemModel.hazards\r\n});\r\n\r\nconst mapDispatch = {\r\n    hazardUpdated: updateHazard\r\n};\r\n\r\nconst connector = connect(mapState, mapDispatch);\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nconst OchStep1: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableContainer>\r\n                <Table size='small'>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>\r\n                                ID\r\n                             </TableCell>\r\n                            <TableCell>\r\n                                Hazard Description\r\n                             </TableCell>\r\n                            <TableCell>\r\n                                Category\r\n                             </TableCell>\r\n                            <TableCell />\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {props.hazards.length === 0 ?\r\n                            <TableRow>\r\n                                <TableCell colSpan={4}>\r\n                                    No hazards identified\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            :\r\n                            props.hazards.map((hazard, index) => (\r\n                                <OchStep1TableRow\r\n                                    key={index}\r\n                                    hazard={hazard}\r\n                                    hazardUpdated={props.hazardUpdated}\r\n                                />\r\n                            ))\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default connector(OchStep1);\r\n","import React from 'react';\r\nimport { useBeforeunload } from 'react-beforeunload';\r\nimport 'typeface-roboto';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Toolbar, AppBar, Grid, Drawer } from '@material-ui/core';\r\nimport { connect, ConnectedProps } from 'react-redux'\r\n\r\nimport ErrorBoundary from './components/error-boundary';\r\nimport Meny from './components/meny/meny';\r\nimport ProgressSteps from './components/meny/progress-steps';\r\nimport MishapVictimIdentification from './components/mishap-victim-identification/mishap-victim-identification';\r\nimport SdfStep1 from './components/system-description/sdf-step-1';\r\nimport SdfStep2 from './components/system-description/sdf-step-2';\r\nimport SdfStep3 from './components/system-description/sdf-step-3';\r\nimport SdfStep4 from './components/system-description/sdf-step-4';\r\nimport HazardPopulation from './components/hazard-population/hazard-population';\r\nimport ProjectName from './components/project-name';\r\nimport { RootState } from './store';\r\nimport ConfirmationDialog from './components/confirmation-dialog';\r\nimport OchStep1 from './components/hazard-description-categorization/och-step-1/och-step-1';\r\nimport { FlowStepId } from './entities/meny/flow-step-id';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: theme.spacing(0, 1),\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n    },\r\n    appTitle: {\r\n        textAlign: 'center'\r\n    },\r\n}));\r\n\r\nconst mapState = (state: RootState) => ({\r\n    currentStep: state.systemModel.currentStep,\r\n    hasUnsavedChanges: state.unsavedChanges\r\n})\r\n\r\nconst connector = connect(mapState);\r\n\r\ntype Props = ConnectedProps<typeof connector>\r\n\r\nconst App: React.FC<Props> = (props) => {\r\n\r\n    useBeforeunload((ev) => {\r\n        if (props.hasUnsavedChanges) {\r\n            ev.preventDefault();\r\n        }\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    const getMainContent = () => {\r\n        switch (props.currentStep) {\r\n            case FlowStepId.SDF_1:\r\n                return <SdfStep1 />\r\n            case FlowStepId.SDF_2:\r\n                return <SdfStep2 />\r\n            case FlowStepId.SDF_3:\r\n                return <SdfStep3 />\r\n            case FlowStepId.SDF_4:\r\n                return <SdfStep4 />\r\n            case FlowStepId.OHI_2:\r\n                return <MishapVictimIdentification />;\r\n            case FlowStepId.OHI_3:\r\n                return <HazardPopulation />;\r\n            case FlowStepId.OCH_1:\r\n                return <OchStep1 />;\r\n            default:\r\n                throw new Error(`Unknown step id ${props.currentStep}`);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <ErrorBoundary>\r\n            <CssBaseline />\r\n            <ConfirmationDialog />\r\n\r\n            <div className={classes.root}>\r\n                <AppBar\r\n                    position=\"fixed\"\r\n                    className={classes.appBar}\r\n                >\r\n                    <Toolbar variant=\"dense\">\r\n                        <Grid container justify=\"space-evenly\">\r\n                            <Grid item xs>\r\n                                <Meny />\r\n                            </Grid>\r\n                            <Grid item xs={6} className={classes.appTitle}>\r\n                                <ProjectName />\r\n                            </Grid>\r\n                            <Grid item xs>\r\n                                &nbsp;\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    className={classes.drawerOpen}\r\n                    classes={{\r\n                        paper: classes.drawerOpen\r\n                    }}\r\n                >\r\n                    <div className={classes.toolbar}></div>\r\n\r\n                    <ProgressSteps />\r\n                </Drawer>\r\n\r\n                <main className={classes.content}>\r\n                    <div className={classes.toolbar} />\r\n                    {getMainContent()}\r\n                </main>\r\n            </div>\r\n        </ErrorBoundary>\r\n    );\r\n}\r\n\r\nexport default connector(App);\r\n","import Hazard, { isRelatorInHazard, isRoleInHazard, isKindInHazard, getIsSystemObjectInHazard } from '../../../entities/hazard-population/hazard';\r\nimport { SystemModelActionTypes, CREATE_HAZARD, UPDATE_HAZARD, DELETE_HAZARD, RENAME_SYSTEM_OBJECT, DELETE_CONNECTION, DELETE_SYSTEM_OBJECT } from '../types';\r\nimport SystemObject from '../../../entities/system-description/system-object';\r\nimport { ObjectTypes } from '../../../entities/system-description/object-types';\r\n\r\nexport function hazardsReducer(state: Hazard[], action: SystemModelActionTypes): Hazard[] {\r\n    switch (action.type) {\r\n        case CREATE_HAZARD:\r\n            return state.concat(action.payload);\r\n        case UPDATE_HAZARD:\r\n            return state.map(e => e.id === action.payload.id ? action.payload : e);\r\n        case DELETE_HAZARD:\r\n            return state.filter(e => e.id !== action.payload.id);\r\n        case RENAME_SYSTEM_OBJECT:\r\n            const transform = getHazardTransform(action.payload);\r\n            return state.map(transform);\r\n        case DELETE_CONNECTION:\r\n            const isTargetInHazard = getIsSystemObjectInHazard(action.payload.target);\r\n            // both connection's source and destination are always part of the same hazard.\r\n            // so no sense to check them both, checking either of them\r\n            return state.filter(e => !isTargetInHazard(e));\r\n        case DELETE_SYSTEM_OBJECT:\r\n            const isObjectInHazard = getIsSystemObjectInHazard(action.payload);\r\n            return state.filter(e => !isObjectInHazard(e));\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction getHazardTransform(entity: SystemObject) {\r\n    switch (entity.type) {\r\n        case ObjectTypes.relator:\r\n            return (hazard: Hazard) => {\r\n                if (!isRelatorInHazard(entity, hazard)) {\r\n                    return hazard;\r\n                }\r\n                return {\r\n                    ...hazard,\r\n                    ...{ exposure: { id: entity.id, name: entity.name } }\r\n                };\r\n            };\r\n        case ObjectTypes.role:\r\n            return (hazard: Hazard) => {\r\n                if (!isRoleInHazard(entity, hazard)) {\r\n                    return hazard;\r\n                }\r\n                return {\r\n                    ...hazard,\r\n                    ...{\r\n                        mishapVictim: hazard.mishapVictim.id === entity.id ?\r\n                            { id: entity.id, name: entity.name } : hazard.mishapVictim,\r\n                        hazardElement: hazard.hazardElement.id === entity.id ?\r\n                            { id: entity.id, name: entity.name } : hazard.hazardElement,\r\n                    }\r\n                };\r\n            };\r\n        case ObjectTypes.kind:\r\n            return (hazard: Hazard) => {\r\n                if (!isKindInHazard(entity, hazard)) {\r\n                    return hazard;\r\n                }\r\n                return {\r\n                    ...hazard,\r\n                    ...{\r\n                        mishapVictimEnvObj: hazard.mishapVictimEnvObj.id === entity.id ?\r\n                            { id: entity.id, name: entity.name } : hazard.mishapVictimEnvObj,\r\n                        hazardElementEnvObj: hazard.hazardElementEnvObj.id === entity.id ?\r\n                            { id: entity.id, name: entity.name } : hazard.hazardElementEnvObj,\r\n                    }\r\n                };\r\n            };\r\n    }\r\n}\r\n","import { SystemModelActionTypes, CREATE_HAZARD } from '../types';\r\n\r\nexport function nextHazardIdReducer(state: number, action: SystemModelActionTypes): number {\r\n    if (action.type === CREATE_HAZARD) {\r\n        return state + 1;\r\n    }\r\n    return state;\r\n}\r\n","import { SystemModelActionTypes, CREATE_SUBSYSTEM, UPDATE_SUBSYSTEM, DELETE_SUBSYSTEM } from '../types';\r\nimport Subsystem from '../../../entities/system-description/subsystem';\r\n\r\nexport function subsystemReducer(state: Subsystem[], action: SystemModelActionTypes): Subsystem[] {\r\n    switch (action.type) {\r\n        case CREATE_SUBSYSTEM:\r\n            return state.concat(action.payload);\r\n        case UPDATE_SUBSYSTEM:\r\n            return state.map(e => e.id === action.payload.id ? action.payload : e);\r\n        case DELETE_SUBSYSTEM:\r\n            return state.filter(e => e.id !== action.payload.id);\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { SystemModelActionTypes, CREATE_CONNECTION, DELETE_CONNECTION, DELETE_SYSTEM_OBJECT } from '../types';\r\nimport Connection from '../../../entities/system-description/connection';\r\n\r\nexport function connectionReducer(state: Connection[], action: SystemModelActionTypes): Connection[] {\r\n    switch (action.type) {\r\n        case CREATE_CONNECTION:\r\n            return state.concat(action.payload);\r\n        case DELETE_CONNECTION:\r\n            return state.filter(e => e.id !== action.payload.connection.id);\r\n        case DELETE_SYSTEM_OBJECT:\r\n            const objectId = action.payload.id;\r\n            return state.filter(e => e.source !== objectId && e.target !== objectId);\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { SystemModelActionTypes, CREATE_SYSTEM_OBJECT, UPDATE_SYSTEM_OBJECT, DELETE_SYSTEM_OBJECT } from '../types';\r\nimport SystemObject from '../../../entities/system-description/system-object';\r\nimport { ObjectTypes } from '../../../entities/system-description/object-types';\r\n\r\nexport function systemObjectReducer(\r\n    state: SystemObject[],\r\n    action: SystemModelActionTypes,\r\n    objectType: ObjectTypes\r\n): SystemObject[] {\r\n    switch (action.type) {\r\n        case CREATE_SYSTEM_OBJECT:\r\n            if (action.payload.type !== objectType) {\r\n                return state;\r\n            }\r\n            return state.concat(action.payload);\r\n        case UPDATE_SYSTEM_OBJECT:\r\n            if (action.payload.type !== objectType) {\r\n                return state;\r\n            }\r\n            return state.map(e => e.id === action.payload.id ? action.payload : e);\r\n        case DELETE_SYSTEM_OBJECT:\r\n            if (action.payload.type !== objectType) {\r\n                return state;\r\n            }\r\n            return state.filter(e => e.id !== action.payload.id);\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import SystemObject from '../../../entities/system-description/system-object';\r\nimport { SystemModelActionTypes } from '../types';\r\nimport { systemObjectReducer } from './system-object-reducer';\r\nimport { ObjectTypes } from '../../../entities/system-description/object-types';\r\n\r\nexport function kindsReducer(state: SystemObject[], action: SystemModelActionTypes): SystemObject[] {\r\n    return systemObjectReducer(state, action, ObjectTypes.kind);\r\n}\r\n","import { SystemModelActionTypes, ADD_POSSIBLE_HARM, REMOVE_POSSIBLE_HARM } from '../types';\r\nimport { systemObjectReducer } from './system-object-reducer';\r\nimport { ObjectTypes } from '../../../entities/system-description/object-types';\r\nimport Role from '../../../entities/system-description/role';\r\n\r\nexport function rolesReducer(state: Role[], action: SystemModelActionTypes): Role[] {\r\n    switch (action.type) {\r\n        case ADD_POSSIBLE_HARM:\r\n            return state.map(e => {\r\n                if (e.id === action.payload.mishapVictim.id) {\r\n                    const possibleHarms = e.possibleHarms.concat(action.payload.harm);\r\n                    return { ...e, ...{ possibleHarms } }\r\n                }\r\n                return e\r\n            });\r\n        case REMOVE_POSSIBLE_HARM:\r\n            return state.map(e => {\r\n                if (e.id === action.payload.mishapVictim.id) {\r\n                    const possibleHarms = e.possibleHarms.filter(h => h !== action.payload.harm);\r\n                    return { ...e, ...{ possibleHarms } }\r\n                }\r\n                return e\r\n            });\r\n        default:\r\n            return systemObjectReducer(state, action, ObjectTypes.role) as Role[];\r\n    }\r\n}\r\n","import SystemObject from '../../../entities/system-description/system-object';\r\nimport { SystemModelActionTypes } from '../types';\r\nimport { systemObjectReducer } from './system-object-reducer';\r\nimport { ObjectTypes } from '../../../entities/system-description/object-types';\r\n\r\nexport function relatorsReducer(state: SystemObject[], action: SystemModelActionTypes): SystemObject[] {\r\n    return systemObjectReducer(state, action, ObjectTypes.relator);\r\n}\r\n","import { SystemModel } from '../../entities/system-model'\r\nimport { getFirstStepId, getFlowStepOrder } from '../../entities/meny/flow'\r\nimport { SystemModelActionTypes, LOAD_MODEL, RESET_MODEL, UPDATE_FLOW_STEP, UPDATE_PROJECT_NAME } from './types'\r\nimport { hazardsReducer } from './reducers/hazards-reducer'\r\nimport { nextHazardIdReducer } from './reducers/next-hazard-id-reducer'\r\nimport { subsystemReducer } from './reducers/subsystems-reducer'\r\nimport { connectionReducer } from './reducers/connections-reducer'\r\nimport { kindsReducer } from './reducers/kinds-reducer'\r\nimport { rolesReducer } from './reducers/roles-reducer'\r\nimport { relatorsReducer } from './reducers/relators-reducer'\r\n\r\nconst initialState: SystemModel = {\r\n    projectName: 'Hazard Ontology',\r\n    currentStep: getFirstStepId(),\r\n    lastCompletedStep: getFirstStepId(),\r\n    kinds: [],\r\n    roles: [],\r\n    relators: [],\r\n    systemObjectConnections: [],\r\n    subsystems: [],\r\n    hazards: [],\r\n    nextHazardId: 1\r\n}\r\n\r\nexport function systemModelReducer(state = initialState, action: SystemModelActionTypes): SystemModel {\r\n    switch (action.type) {\r\n        case LOAD_MODEL:\r\n            return action.payload;\r\n        case RESET_MODEL:\r\n            return initialState;\r\n        case UPDATE_FLOW_STEP:\r\n            const step = action.payload;\r\n            const stepOrder = getFlowStepOrder(step);\r\n            if (stepOrder === getFlowStepOrder(state.currentStep)) {\r\n                return state;\r\n            }\r\n            if (stepOrder > getFlowStepOrder(state.lastCompletedStep)) {\r\n                return { ...state, ...{ currentStep: step, lastCompletedStep: step } };\r\n            }\r\n            return { ...state, ...{ currentStep: step } };\r\n        case UPDATE_PROJECT_NAME:\r\n            return { ...state, ...{ projectName: action.payload } };\r\n        default:\r\n            return {\r\n                ...state,\r\n                ...{\r\n                    hazards: hazardsReducer(state.hazards, action),\r\n                    nextHazardId: nextHazardIdReducer(state.nextHazardId, action),\r\n                    subsystems: subsystemReducer(state.subsystems, action),\r\n                    systemObjectConnections: connectionReducer(state.systemObjectConnections, action),\r\n                    kinds: kindsReducer(state.kinds, action),\r\n                    roles: rolesReducer(state.roles, action),\r\n                    relators: relatorsReducer(state.relators, action)\r\n                }\r\n            }\r\n    }\r\n}\r\n","import DialogConfirmation from \"../../entities/dialog-confirmation\";\r\nimport { ModalDialogActionTypes, SHOW_CONFIRMATION_DIALOG, HIDE_CONFIRMATION_DIALOG } from \"./types\";\r\n\r\nconst initialState = {\r\n    contentText: '',\r\n    onYes: () => { }\r\n};\r\n\r\nexport function modalDialogReducer(state = initialState, action: ModalDialogActionTypes): DialogConfirmation {\r\n    switch (action.type) {\r\n        case SHOW_CONFIRMATION_DIALOG:\r\n            return action.payload;\r\n        case HIDE_CONFIRMATION_DIALOG:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { systemModelReducer } from './system-model/system-model-reducer'\r\nimport { unsavedChangesReducer } from './unsaved-changes/reducers'\r\nimport { modalDialogReducer } from './modal-dialog/reducers'\r\n\r\nexport const rootReducer = combineReducers({\r\n    systemModel: systemModelReducer,\r\n    unsavedChanges: unsavedChangesReducer,\r\n    modalDialog: modalDialogReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n","import { SystemModelActionTypes, RESET_MODEL, LOAD_MODEL } from '../system-model/types';\r\nimport { UnsavedChangesActionType, SAVE_CHANGES } from './types';\r\n\r\nexport function unsavedChangesReducer(\r\n    state = false,\r\n    action: SystemModelActionTypes | UnsavedChangesActionType\r\n): boolean {\r\n    if ('unsavedChanges' in action) {\r\n        return action.unsavedChanges;\r\n    }\r\n    switch (action.type) {\r\n        case RESET_MODEL:\r\n        case LOAD_MODEL:\r\n        case SAVE_CHANGES:\r\n            return false;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst appZIndex = {\r\n    graph: 10,\r\n    nodeAction: 20,\r\n    graphHelp: 30,\r\n    graphAction: 40\r\n};\r\n\r\nconst defaultTheme = createMuiTheme();\r\n\r\nconst appSpacing = {\r\n    standard: defaultTheme.spacing(2),\r\n    fabOverlap: defaultTheme.spacing(2) + defaultTheme.spacing(1) + 40,\r\n    drawerWidth: 240\r\n};\r\n\r\nconst appTheme = createMuiTheme({\r\n    zIndex: appZIndex,\r\n    appSpacing\r\n});\r\n\r\nexport default appTheme;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { rootReducer } from './store';\r\nimport { ThemeProvider } from '@material-ui/core';\r\nimport appTheme from './styles/app-theme';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ThemeProvider theme={appTheme}>\r\n            <App />\r\n        </ThemeProvider>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n"],"sourceRoot":""}